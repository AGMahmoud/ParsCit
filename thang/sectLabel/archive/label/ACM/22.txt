title ||| A Two-Phase Sampling Technique for Information
title ||| Extraction from Hidden Web Databases
author ||| Y.L. Hedley, M. Younas, A. James
affiliation ||| School of Mathematical and Information Sciences
affiliation ||| Coventry University, Coventry CV1 5FB, UK
email ||| {y.hedley, m.younas, a.james}@coventry.ac.uk
email ||| ABSTRACT
bodyText ||| Hidden Web databases maintain a collection of specialised
bodyText ||| documents, which are dynamically generated in response to users’
bodyText ||| queries. However, the documents are generated by Web page
bodyText ||| templates, which contain information that is irrelevant to queries.
bodyText ||| This paper presents a Two-Phase Sampling (2PS) technique that
bodyText ||| detects templates and extracts query-related information from the
bodyText ||| sampled documents of a database. In the first phase, 2PS queries
bodyText ||| databases with terms contained in their search interface pages and
bodyText ||| the subsequently sampled documents. This process retrieves a
bodyText ||| required number of documents. In the second phase, 2PS detects
bodyText ||| Web page templates in the sampled documents in order to extract
bodyText ||| information relevant to queries. We test 2PS on a number of real-
bodyText ||| world Hidden Web databases. Experimental results demonstrate
bodyText ||| that 2PS effectively eliminates irrelevant information contained in
bodyText ||| Web page templates and generates terms and frequencies with
bodyText ||| improved accuracy.
sectionHeader ||| Categories and Subject Descriptors
category ||| H.3.5 [Information Storage and Retrieval]: Online Information
category ||| Services – Web-based services.
sectionHeader ||| General Terms
keyword ||| Algorithms, Experimentation.
sectionHeader ||| Keywords
keyword ||| Hidden Web Databases, Document Sampling, Information
keyword ||| Extraction.
sectionHeader ||| 1. INTRODUCTION
bodyText ||| An increasing number of databases on the Web maintain a
bodyText ||| collection of documents such as archives, user manuals or news
bodyText ||| articles. These databases dynamically generate documents in
bodyText ||| response to users’ queries and are referred to as Hidden Web
bodyText ||| databases [5]. As the number of databases proliferates, it has
bodyText ||| become prohibitive for specialised search services (such as
bodyText ||| search.com) to evaluate databases individually in order to answer
bodyText ||| users’ queries.
bodyText ||| Current techniques such as database selection and categorisation
copyright ||| Permission to make digital or hard copies of all or part of this work for
copyright ||| personal or classroom use is granted without fee provided that copies are
copyright ||| not made or distributed for profit or commercial advantage and that
copyright ||| copies bear this notice and the full citation on the first page. To copy
copyright ||| otherwise, or republish, to post on servers or to redistribute to lists,
copyright ||| requires prior specific permission and/or a fee.
note ||| WIDM’04, November 12–13, 2004, Washington, DC, USA.
copyright ||| Copyright 2004 ACM 1-58113-978-0/04/0011...$5.00.
copyright ||| M. Sanderson
affiliation ||| Department of Information Studies
affiliation ||| University of Sheffield, Sheffield, S1 4DP, UK
email ||| m.sanderson@sheffield.ac.uk
bodyText ||| have been employed to enhance the effectiveness of information
bodyText ||| retrieval from databases [2, 5, 10, 11, 15]. In the domain of the
bodyText ||| Hidden Web, knowledge about the contents of databases is often
bodyText ||| unavailable. Existing approaches such as in [2, 10, 15] acquire
bodyText ||| knowledge through sampling documents from databases. For
bodyText ||| instance, query-based sampling [2] queries databases with terms
bodyText ||| that are randomly selected from those contained in the sampled
bodyText ||| documents. The techniques in [10, 15] sample databases with
bodyText ||| terms obtained from Web logs to retrieve additional topic terms.
bodyText ||| A major issue associated with existing techniques is that they also
bodyText ||| extract information irrelevant to queries. That is, information
bodyText ||| extracted is often found in Web page templates, which contain
bodyText ||| navigation panels, search interfaces and advertisements.
bodyText ||| Consequently, the accuracy of terms and frequencies generated
bodyText ||| from sampled documents has been reduced.
bodyText ||| In addition, approximate string matching techniques are adopted
bodyText ||| by [13] to extract information from Web pages, but this approach
bodyText ||| is limited to textual contents only. Alternatively, the approaches
bodyText ||| proposed in [3, 4] analyse Web pages in tree-like structures.
bodyText ||| However, such an approach requires Web pages with well-
bodyText ||| conformed HTML tag trees. Furthermore, [3] discovers
bodyText ||| dynamically generated objects from Web pages, which are
bodyText ||| clustered into groups of similar structured pages based on a set of
bodyText ||| pre-defined templates, such as exception page templates and
bodyText ||| result page templates.
bodyText ||| In this paper, we propose a sampling and extraction technique,
bodyText ||| which is referred to as Two-Phase Sampling (2PS). 2PS aims to
bodyText ||| extract information relevant to queries in order to acquire
bodyText ||| information contents of underlying databases. Our technique is
bodyText ||| applied in two phases. First, it randomly selects a term from those
bodyText ||| found in the search interface pages of a database to initiate the
bodyText ||| process of sampling documents. Subsequently, 2PS queries the
bodyText ||| database with terms randomly selected from those contained in
bodyText ||| the sampled documents. Second, 2PS detects Web page templates
bodyText ||| and extracts query-related information from which terms and
bodyText ||| frequencies are generated to summarise the database contents.
bodyText ||| Our approach utilises information contained in search interface
bodyText ||| pages of a database to initiate the sampling process. This differs
bodyText ||| from current sampling techniques such as query-based sampling,
bodyText ||| which performs an initial query with a frequently used term.
bodyText ||| Furthermore, 2PS extracts terms that are relevant to queries thus
bodyText ||| generating statistics (i.e., terms and frequencies) that represent
bodyText ||| database contents with improved accuracy. By contrast, the
bodyText ||| approaches in [2, 10, 15] extract all terms from sampled
bodyText ||| documents, including those contained in Web page templates.
bodyText ||| Consequently, information that is irrelevant to queries is also
bodyText ||| extracted.
page ||| 1
figureCaption ||| Figure 1. The Two-Phase Sampling (2PS) technique.
bodyText ||| 2PS is implemented as a prototype system and tested on a number
bodyText ||| of real-world Hidden Web databases, which contain computer
bodyText ||| manuals, healthcare archives and news articles. Experimental
bodyText ||| results show that our technique effectively detects Web page
bodyText ||| templates and generates terms and frequencies (from sampled
bodyText ||| documents) that are relevant to the queries.
bodyText ||| The remainder of the paper is organised as follows. Section 2
bodyText ||| introduces current approaches to the discovery of information
bodyText ||| contents of Hidden Web databases. Related work on the
bodyText ||| information extraction from Web pages or dynamically generated
bodyText ||| documents is also discussed. Section 3 describes the proposed
bodyText ||| 2PS technique. Section 4 presents experimental results. Section 5
bodyText ||| concludes the paper.
sectionHeader ||| 2. RELATED WORK
bodyText ||| A major area of current research into the information retrieval of
bodyText ||| Hidden Web databases focuses on the automatic discovery of
bodyText ||| information contents of databases, in order to facilitate their
bodyText ||| selection or categorisation. For instance, the technique proposed
bodyText ||| in [6] analyses the hyperlink structures of databases in order to
bodyText ||| facilitate the search for databases that are similar in content. The
bodyText ||| approach adopted by [10, 15] examines the textual contents of
bodyText ||| search interface pages maintained by data sources to gather
bodyText ||| information about database contents.
bodyText ||| A different approach is to retrieve actual documents to acquire
bodyText ||| such information. However, in the domain of Hidden Web
bodyText ||| databases, it is difficult to obtain all documents from a database.
bodyText ||| Therefore, a number of research studies [2, 10, 15] obtain
bodyText ||| information by retrieving a set of documents through sampling.
bodyText ||| For instance, query-based sampling [2] queries databases with
bodyText ||| terms that are randomly selected from those contained in the
bodyText ||| sampled documents. The techniques in [10, 15] sample databases
bodyText ||| with terms extracted from Web logs to obtain additional topic
bodyText ||| terms. These techniques generate terms and frequencies from
bodyText ||| sampled documents, which are referred to as Language Models
bodyText ||| [2], Textual Models [10, 15] or Centroids [11].
bodyText ||| A key issue associated with the aforementioned sampling
bodyText ||| techniques is that they extract information that is often irrelevant
bodyText ||| to queries, since information contained in Web page templates
bodyText ||| such as navigation panels, search interfaces and advertisements is
bodyText ||| also extracted. For example, a language model generated from the
bodyText ||| sampled documents of the Combined Health Information
bodyText ||| Database (CHID) contains terms (such as ‘author’ and ‘format’)
bodyText ||| with high frequencies. These terms are not relevant to queries but
bodyText ||| are used for descriptive purposes. Consequently, the accuracy of
bodyText ||| terms and frequencies generated from sampled documents has
bodyText ||| been reduced. The use of additional stop-word lists has been
bodyText ||| considered in [2] to eliminate irrelevant terms - but it is
bodyText ||| maintained that such a technique can be difficult to apply in
bodyText ||| practice.
bodyText ||| Existing techniques in information extraction from Web pages are
bodyText ||| of varying degrees of complexity. For instance, approximate
bodyText ||| string matching techniques are adopted by [13] to extract texts
bodyText ||| that are different. This approach is limited to finding textual
bodyText ||| similarities and differences. The approaches proposed in [3, 4]
bodyText ||| analyse textual contents and tag structures in order to extract data
bodyText ||| from Web pages. However, such an approach requires Web pages
bodyText ||| that are produced with well-conformed HTML tag-trees.
bodyText ||| Computation is also needed to convert and analyse Web pages in
bodyText ||| a tree-like structure. Moreover, [3] identifies Web page templates
bodyText ||| based on a number of pre-defined templates, such as exception
bodyText ||| page templates and result page templates.
bodyText ||| Our technique examines Web documents based on textual
bodyText ||| contents and the neighbouring tag structures rather than analysing
bodyText ||| their contents in a tree-like structure. We also detect information
bodyText ||| contained in different templates through which documents are
bodyText ||| generated. Therefore, it is not restricted to a pre-defined set of
bodyText ||| page templates.
bodyText ||| Furthermore, we focus on databases that contain documents such
bodyText ||| as archives and new articles. A distinct characteristic of
bodyText ||| documents found in such a domain is that the content of a
bodyText ||| document is often accompanied by other information for
bodyText ||| supplementary or navigation purposes. The proposed 2PS
bodyText ||| technique detects and eliminates information contained in
bodyText ||| templates in order to extract the content of a document. This
bodyText ||| differs from the approaches in [1, 4], which attempt to extract a
bodyText ||| set of data from Web pages presented in a particular pattern. For
bodyText ||| example, the Web pages of a bookstore Web site contain
bodyText ||| information about authors followed by their associated list of
bodyText ||| publications. However, in the domain of document databases,
bodyText ||| information contained in dynamically generated Web pages is
bodyText ||| often presented in a structured fashion but irrelevant to queries.
bodyText ||| Other research studies [9, 8, 12] are specifically associated with
bodyText ||| the extraction of data from query forms in order to further the
bodyText ||| retrieval of information from the underlying databases.
sectionHeader ||| 3. TWO-PHASE SAMPLING
bodyText ||| This section presents the proposed technique for extracting
bodyText ||| information from Hidden Web document databases in two phases,
bodyText ||| which we refer to as Two-Phase Sampling (2PS). Figure 1 depicts
bodyText ||| the process of sampling a database and extracting query-related
page ||| 2
bodyText ||| information from the sampled documents. In phase one, 2PS
bodyText ||| obtains randomly sampled documents. In phase two, it detects
bodyText ||| Web page templates. This extracts information relevant to the
bodyText ||| queries and then generates terms and frequencies to summarise
bodyText ||| the database content. The two phases are detailed in section 3.1
bodyText ||| and 3.2.
subsectionHeader ||| 3.1 Phase One: Document Sampling
bodyText ||| In the first phase we initiate the process of sampling documents
bodyText ||| from a database with a randomly selected term from those
bodyText ||| contained in the search interface pages of the database. This
bodyText ||| retrieves top N documents where N represents the number of
bodyText ||| documents that are the most relevant to the query. A subsequent
bodyText ||| query term is then randomly selected from terms extracted from
bodyText ||| the sampled documents. This process is repeated until a required
bodyText ||| number of documents are sampled. The sampled documents are
bodyText ||| stored locally for further analysis.
bodyText ||| Figure 2 illustrates the algorithm that obtains a number of
bodyText ||| randomly sampled documents. tq denotes a term extracted from
bodyText ||| the search interface pages of a database, D. qtp represents a query
bodyText ||| term selected from a collection of terms, Q, qtp e Q, 1 &lt;_ p &lt;_ m;
bodyText ||| where m is the distinct number of terms extracted from the search
bodyText ||| interface pages and the documents that have been sampled. R
bodyText ||| represents the set of documents randomly sampled from D. tr is a
bodyText ||| term extracted from di. di represents a sampled document from D,
bodyText ||| di e D, 1 &lt;_ i &lt;_ n, where n is the number of document to sample.
figure ||| Algorithm SampleDocument
figure ||| Extract tq from search interface pages of D, Q = tq
figure ||| For i = 1 to n
figure ||| Randomly select qtp from Q
figure ||| If (qtp has not been selected previously)
figure ||| Execute the query with qtp on D
figure ||| j = 0
figure ||| While j &lt;= N
figure ||| If (di o R)
figure ||| Retrieve di from D
figure ||| Extract tr from di,
figure ||| R = di
figure ||| Q = tr
figure ||| Increase j by 1
figure ||| End if
figure ||| End while
figure ||| End if
figure ||| End for
figureCaption ||| Figure 2. The algorithm for sampling documents from a
figureCaption ||| database.
bodyText ||| 2PS differs from query-based sampling in terms of selecting an
bodyText ||| initial query. The latter selects an initial term from a list of
bodyText ||| frequently used terms. 2PS initiates the sampling process with a
bodyText ||| term randomly selected from those contained in the search
bodyText ||| interface pages of the database. This utilises a source of
bodyText ||| information that is closely related to its content. Moreover, 2PS
bodyText ||| analyses the sampled documents in the second phase in order to
bodyText ||| extract query-related information. By contrast, query-based
bodyText ||| sampling does not analyse their contents to determine whether
bodyText ||| terms are relevant to queries.
subsectionHeader ||| 3.2 Phase Two: Document Content Extraction
subsectionHeader ||| and Summarisation
bodyText ||| The documents sampled from the first phase are further analysed
bodyText ||| in order to extract information relevant to the queries. This is then
bodyText ||| followed by the generation of terms and frequencies to represent
bodyText ||| the content of the underlying database. This phase is carried out
bodyText ||| through the following processes.
subsubsectionHeader ||| 3.2.1 Generate Document Content Representations
bodyText ||| The content of each sampled document is converted into a list of
bodyText ||| text and tag segments. Tag segments include start tags, end tags
bodyText ||| and single tags specified in HyperText Markup Language
bodyText ||| (HTML). Text segments are text that resides between two tag
bodyText ||| segments. The document content is then represented by text
bodyText ||| segments and their neighbouring tag segments, which we refer to
bodyText ||| as Text with Neighbouring Adjacent Tag Segments (TNATS). The
bodyText ||| neighbouring adjacent tag segments of a text segment are defined
bodyText ||| as the list of tag segments that are located immediately before and
bodyText ||| after the text segment until another text segment is reached. The
bodyText ||| neighbouring tag segments of a text segment describe how the
bodyText ||| text segment is structured and its relation to the nearest text
bodyText ||| segments. Assume that a document contains n segments, a text
bodyText ||| segment, txs, is defined as: txs = (txi, tg-lstj, tg-lstk), where txi is
bodyText ||| the textual content of the ith text segment, 1 &lt;_ i &lt;_ n; tg-lstj
bodyText ||| represents p tag segments located before txi and tg-lstk represents
bodyText ||| q tag segments located after txi until another text segment is
equation ||| reached. tg-lstj = (tg1, ..., tgp), 1 &lt;_ j &lt;_ p and tg-lstk = (tg1, ..., tgq),
equation ||| 1 &lt;_ k &lt;_ q.
figureCaption ||| Figure 3. A template-generated document from CHID.
bodyText ||| Figure 3 shows a template-generated document retrieved from the
bodyText ||| CHID database. The source code for this document is given in
bodyText ||| Figure 4. For example, text segment, ‘1. Equipos Mas Seguros:
bodyText ||| Si Te Inyectas Drogas.’, can be identified by the text (i.e., ‘1.
bodyText ||| Equipos Mas Seguros: Si Te Inyectas Drogas.’) and its
bodyText ||| neighbouring tag segments. These include the list of tags located
bodyText ||| before the text (i.e., &lt;/TITLE&gt;, &lt;/HEAD&gt;, &lt;BODY&gt;, &lt;HR&gt;,
bodyText ||| &lt;H3&gt;, &lt;B&gt; and &lt;I&gt;) and the neighbouring tags located after the
bodyText ||| text (i.e., &lt;/I&gt;, &lt;/B&gt;, &lt;/H3&gt;, &lt;I&gt; and &lt;B&gt;). Thus, this segment is
bodyText ||| then represented as (‘1. Equipos Mas Seguros: Si Te Inyectas
bodyText ||| Drogas.’, (&lt;/TITLE&gt;, &lt;/HEAD&gt;, &lt;BODY&gt;, &lt;HR&gt;, &lt;H3&gt;, &lt;B&gt;
bodyText ||| ,&lt;I&gt;), (&lt;/I&gt;, &lt;/B&gt;, &lt;/H3&gt;, &lt;I&gt;, &lt;B&gt;)). Figure 5 shows the content
page ||| 3
bodyText ||| representation of the CHID document (given in Figure 3)
bodyText ||| generated based on TNATS. Given a sampled document, d, with n
bodyText ||| text segments, the content of d is then represented as: Content(d)
bodyText ||| = {txs1, ..., txsn}, where txsi represents a text segment, 1 &lt;_ i &lt;_ n.
figureCaption ||| Figure 4. The source code for the CHID document.
figureCaption ||| Figure 5. The content representation of the CHID document
figureCaption ||| using TNATS.
subsubsectionHeader ||| 3.2.2 Detect Templates
bodyText ||| In the domain of Hidden Web databases, documents are often
bodyText ||| presented to users through one or more templates. Templates are
bodyText ||| typically employed in order to describe document contents or to
bodyText ||| assist users in navigation. For example, information contained in
bodyText ||| the document (as shown in Figure 3) can be classified into the two
bodyText ||| following categories:
listItem ||| (i) Template-Generated Information. This includes information
listItem ||| such as navigation panels, search interfaces and
listItem ||| advertisements. In addition, information may be given to
listItem ||| describe the content of a document. Such information is
listItem ||| irrelevant to a user’s query. For example, navigation links
listItem ||| (such as ‘Next Doc’ and ‘Last Doc’) and headings (such
listItem ||| ‘Subfile’ and ‘Format’) are found in the document.
listItem ||| (ii) Query-Related Information. This information is retrieved in
listItem ||| response to a user’s query, i.e., ‘1. Equipos Mas Seguros:
listItem ||| Si Te Inyectas Drogas. ...’.
bodyText ||| The 2PS technique detects Web page templates employed by
bodyText ||| databases to generate documents in order to extract information
bodyText ||| that is relevant to queries. Figure 6 describes the algorithm that
bodyText ||| detects information contained in Web page templates from n
bodyText ||| sampled documents. di represents a sampled document from the
bodyText ||| database D, di, e D, 1 &lt;_ i &lt;_ n. Content(di) denotes the content
bodyText ||| representation of di.
figure ||| Algorithm DetectTemplate
figure ||| For i = 1 to n
figure ||| If T = 0
figure ||| If S = 0
figure ||| S = di
figure ||| Else if S ;t� 0
figure ||| While l &lt;= s AND T = 0
figure ||| Compare (Content(di),Content(dl))
figure ||| If Content(di) = Content(dl)
figure ||| wptk = Content(di) n Content(dl),
figure ||| Store wptk, T = wptk
figure ||| Delete (Content(di) n Content(dl)) from
figure ||| Content(di), Content(dl)
figure ||| Gk = di, Gk = dl
figure ||| Delete dl from S
figure ||| End if
figure ||| End while
figure ||| If T = 0
figure ||| S = di
figure ||| End if
figure ||| End if
figure ||| Else if T ;t� 0
figure ||| While k &lt;= r AND di o Gk
figure ||| Compare (Content(wptk), Content(di))
figure ||| If Content(wptk) = Content(di)
figure ||| Delete (Content(wptk) n Content(di)) from
figure ||| Content(di)
figure ||| Gk = di
figure ||| End if
figure ||| End while
figure ||| If S ;t� 0 AND di o Gk
figure ||| While l &lt;= s AND di o Gk
figure ||| Compare (Content(di),Content(dl))
figure ||| If Content(di) = Content(dl)
figure ||| wptk = Content(di) n Content(dl)
figure ||| Store wptk, T = wptk
figure ||| Delete (Content(di) n Content(dl)) from
figure ||| Content(di), Content(dl)
figure ||| Gk = di, Gk = dl
figure ||| Delete dl from S
figure ||| End if
figure ||| End while
figure ||| End if
figure ||| If di o Gk
figure ||| S = di
figure ||| End if
figure ||| End if
figure ||| End for
figureCaption ||| Figure 6. The algorithm for detecting and eliminating the
figureCaption ||| information contained in Web page templates.
figure ||| ...
figure ||| &lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;CHID Document
figure ||| &lt;/TITLE&gt;&lt;/HEAD&gt;
figure ||| &lt;BODY&gt;
figure ||| &lt;HR&gt;&lt;H3&gt;&lt;B&gt;&lt;I&gt; 1. Equipos Mas Seguros: Si Te Inyectas
figure ||| Drogas.
figure ||| &lt;/I&gt;&lt;/B&gt;&lt;/H3&gt;
figure ||| &lt;I&gt;&lt;B&gt;Subfile: &lt;/B&gt;&lt;/I&gt;
figure ||| AIDS Education&lt;BR&gt;
figure ||| &lt;I&gt;&lt;B&gt;Format (FM): &lt;/B&gt;&lt;/I&gt;
figure ||| 08 - Brochure.
figure ||| &lt;BR&gt;
figure ||| ...
figure ||| ...
figure ||| ‘CHID Document’, (&lt;HTML&gt;, &lt;HEAD&gt;, &lt;TITLE&gt;),
figure ||| (&lt;/TITLE&gt;, &lt;/HEAD&gt;, &lt;BODY&gt;, &lt;HR&gt;, &lt;H3&gt;, &lt;B&gt;,
figure ||| &lt;I&gt;);
figure ||| ‘1. Equipos Mas Seguros: Si Te Inyectas Drogas.’,
figure ||| (&lt;/TITLE&gt;, &lt;/HEAD&gt;, &lt;BODY&gt;, &lt;HR&gt;, &lt;H3&gt;, &lt;B&gt;,
figure ||| &lt;I&gt;), (&lt;/I&gt;, &lt;/B&gt;, &lt;/H3&gt;, &lt;I&gt;, &lt;B&gt;);
figure ||| ‘Subfile:’, (&lt;/I&gt;, &lt;/B&gt;, &lt;/H3&gt;, &lt;I&gt;, &lt;B&gt;), (&lt;/B&gt;, &lt;/I&gt;);
figure ||| ‘AIDS Education’, (&lt;/B&gt;, &lt;/I&gt;), (&lt;BR&gt;, &lt;I&gt;, &lt;B&gt;);
figure ||| ‘Format (FM):’, (&lt;BR&gt;, &lt;I&gt;, &lt;B&gt;), (&lt;/B&gt;, &lt;/I&gt;);
figure ||| ...
page ||| 4
bodyText ||| Similar to the representation for the contents of sampled
bodyText ||| documents, the content of a Web page template, wpt, is
bodyText ||| represented as Content(wpt) = {txs1, ..., txsq}, where q is the
bodyText ||| number of text segments, txsj, 1 ≤ j ≤ q. T represents a set of
bodyText ||| templates detected. T = {wpt1, ..., wptr}, where r is the distinct
bodyText ||| number of templates, wptk, 1 ≤ k ≤ r. Gk represents a group of
bodyText ||| documents generated from wptk. Furthermore, S represents the
bodyText ||| sampled documents from which no templates have yet been
bodyText ||| detected. Thus, S = {d1, ..., ds}, where s is the number of
bodyText ||| temporarily stored document, dl, 1 ≤ l ≤ s.
bodyText ||| The process of detecting templates is executed until all sampled
bodyText ||| documents are analysed. This results in the identification of one
bodyText ||| or more templates. For each template, two or more documents are
bodyText ||| assigned to a group associated with the template from which the
bodyText ||| documents are generated. Each document contains text segments
bodyText ||| that are not found in their respective template. These text
bodyText ||| segments are partially related to their queries. In addition to a set
bodyText ||| of templates, the content representations of zero or more
bodyText ||| documents in which no matched patterns are found are stored.
subsubsectionHeader ||| 3.2.3 Extract Query-Related Information
bodyText ||| This process analyses a group of documents associated with each
bodyText ||| template from which documents are generated. It further identifies
bodyText ||| any repeated patterns from the remaining text segments of the
bodyText ||| documents in order to extract query-related information.
bodyText ||| We compute cosine similarity [14] given in (1) to determine the
bodyText ||| similarities between the text segments of different documents that
bodyText ||| are associated the template where the documents are generated.
bodyText ||| The textual content of each text segment is represented as a vector
bodyText ||| of terms with weights. The weight of a term is obtained by its
bodyText ||| occurrence in the segment.
bodyText ||| from the document content (given in Figure 4) as a result of
bodyText ||| eliminating information contained in the Web page template.
subsubsectionHeader ||| 3.2.4 Generate Content Summary
bodyText ||| Frequencies are computed for the terms extracted from randomly
bodyText ||| sampled documents. These summarise the information content of
bodyText ||| a database, which we refer to as Content Summary.
figure ||| Algorithm ExtractQueryInfo
figure ||| For each (da ∈ Gk)
figure ||| For each (db ∈ Gk), da ≠ db
figure ||| Compare (Content(da),Content(db))
figure ||| If Content(da) = Content(db)
figure ||| Delete (Content(da) ∩ Content(db)) from
figure ||| Content(da), Content(db)
figure ||| End if
figure ||| End for
figure ||| End for
figure ||| For each (di ∈ Gk)
figure ||| Extract txm of txsm from Content(di)
figure ||| End for
figure ||| For each (dl ∈ S)
figure ||| Extract txn of txsn from Content(dl)
figure ||| End for
figureCaption ||| Figure 7. The algorithm for extracting query-related
figureCaption ||| information from template-generated documents.
figure ||| 1. Equipos Mas Seguros: Si Te Inyectas Drogas.
figure ||| AIDS Education
figure ||| ...
equation ||| t
equation ||| (	,	)	(	)	(	) 2	(	)
equation ||| txs txs	tw tw	tw	tw
equation ||| i	j	ik	jk	ik
equation ||| =	∗	∗
equation ||| ∑	∑	∑ jk
equation ||| k=1	k=1
figureCaption ||| (1)	Figure 8. The query-related information extracted from the
figureCaption ||| CHID document.
equation ||| COSINE
equation ||| t
equation ||| t
equation ||| 1
equation ||| =
equation ||| k
equation ||| 2
equation ||| .
bodyText ||| where txsi and txsj represent two text segments in a document; twik
bodyText ||| is the weight of term k in txsi, and twjk is the weight of term k in
bodyText ||| txsj . This is only applied to text segments with identical adjacent
bodyText ||| tag segments. Two segments are considered to be similar if their
bodyText ||| similarity exceeds a threshold value. The threshold value is
bodyText ||| determined experimentally.
bodyText ||| The algorithm that extracts information relevant to queries is
bodyText ||| illustrated in Figure 7. da and db represent the sampled documents
bodyText ||| from the database, D, da, db ∈ Gk, where Gk denotes a group of
bodyText ||| documents associated with the template, wptk, from which the
bodyText ||| documents are generated. txm represents the textual content of a
bodyText ||| text segment, txsm, contained in di, di ∈ Gk. txn represents the
bodyText ||| textual content of a text segment, txsn, contained in dl, dl ∈ S. S
bodyText ||| represents the sampled documents from which no templates are
bodyText ||| detected.
bodyText ||| The results of the above algorithm extract text segments with
bodyText ||| different tag structures. It also extracts text segments that have
bodyText ||| identical adjacent tag structures but are significantly different in
bodyText ||| their textual contents. Figure 8 shows the information extracted
bodyText ||| Previous experiments in [2] demonstrate that a number of
bodyText ||| randomly sampled documents (i.e., 300 documents) sufficiently
bodyText ||| represent the information content of a database.
bodyText ||| In the domain of Hidden Web databases, the inverse document
bodyText ||| frequency (idf), used in traditional information retrieval, is not
bodyText ||| applicable, since the total number of documents in a database is
bodyText ||| often unknown. Therefore, document frequency (df), collection
bodyText ||| term frequency (ctf) and average term frequency (avg_tf) initially
bodyText ||| used in [2] are applied in this paper. We consider the following
bodyText ||| frequencies to compute the content summary of a Hidden Web
bodyText ||| database.
listItem ||| •	Document frequency (df): the number of documents in the
bodyText ||| collection of documents sampled that contain term t,
bodyText ||| where d is the document and f is the frequency
listItem ||| •	Collection term frequency (ctf): the occurrence of a term
bodyText ||| in the collection of documents sampled, where c is the
bodyText ||| collection, t is the term and f is the frequency
listItem ||| •	Average term frequency (avg_tf): the average frequency
bodyText ||| of a term obtained from dividing collection term
bodyText ||| frequency by document frequency (i.e., avg_tf = ctf / df)
page ||| 5
tableCaption ||| Table 1. 3 Hidden Web databases used in the experiments
table ||| Database	URL	Subject	Content	Template
table ||| Help Site	www.help-site.com	Computer manuals	Homogeneous	Multiple templates
table ||| CHID	www.chid.nih.gov	Healthcare articles	Homogeneous	Single template
table ||| Wired News	www.wired.com	General news articles	Heterogeneous	Single template
bodyText ||| The content summary of a document database is defined as
bodyText ||| follows. Assume that a Hidden Web database, D, is sampled with
bodyText ||| N documents. Each sampled document, d, is represented as a
bodyText ||| vector of terms and their associated weights [14]. Thus d = (w1,
bodyText ||| ..., wm), where wi is the weight of term ti, and m is the number of
bodyText ||| distinct terms in d e D, 1 &lt;_ i ≤ m. Each wi is computed using term
bodyText ||| frequency metric, avg_tf (i. e., wi = ctfi/dfi). The content summary
bodyText ||| is then denoted as CS(D), which is generated from the vectors of
bodyText ||| sampled documents. Assume that n is the number of distinct terms
bodyText ||| in all sampled documents. CS(D) is, therefore, expressed as a
bodyText ||| vector of terms: CS(D)= {w1, ..., wn}, where wi is computed by
bodyText ||| adding the weights of ti in the documents sampled from D and
bodyText ||| dividing the sum by the number of sampled documents that
bodyText ||| contain ti, 1 &lt;_ i ≤ n.
sectionHeader ||| 4. EXPERIMENTAL RESULTS
bodyText ||| This section reports on a number of experiments conducted to
bodyText ||| assess the effectiveness of the 2PS technique in terms of: (i)
bodyText ||| detecting Web page templates, and (ii) extracting relevant
bodyText ||| information from the documents of a Hidden Web databases
bodyText ||| through sampling. The experimental results are compared with
bodyText ||| those from query-based sampling (abbreviated as QS). We
bodyText ||| compare 2PS with QS as it is a well-established technique and has
bodyText ||| also been widely adopted by other relevant studies [5, 10, 11, 15].
bodyText ||| Experiments are carried out on three real-world Hidden Web
bodyText ||| document databases including Help Site, CHID and Wired News,
bodyText ||| which provide information about user manuals, healthcare
bodyText ||| archives and news articles, respectively. Table 1 summarises
bodyText ||| these databases in terms of their subjects, contents and templates
bodyText ||| employed. For instance, Help Site and CHID contain documents
bodyText ||| relating to subjects on computing and healthcare, respectively.
bodyText ||| Their information contents are homogeneous in nature. By
bodyText ||| contrast, Wired News contains articles that relate to different
bodyText ||| subjects of interest.
bodyText ||| Where the number of templates is concerned, CHID and Wired
bodyText ||| News generate documents from one Web page template. Help
bodyText ||| Site maintains a collection of documents produced by other
bodyText ||| information sources. Subsequently, different Web page templates
bodyText ||| are found in Help Site sampled documents.
bodyText ||| The experiment conducted using QS initiates the first query to a
bodyText ||| database with a frequently used term to obtain a set of sampled
bodyText ||| documents. Subsequent query terms are randomly selected from
bodyText ||| those contained in the sampled documents. It extracts terms
bodyText ||| (including terms contained in Web page templates) and updates
bodyText ||| the frequencies after each document is sampled. By contrast, 2PS
bodyText ||| initiates the sampling process with a term contained in the search
bodyText ||| interface pages of a database. In addition, 2PS analyses the
bodyText ||| sampled documents in the second phase in order to extract query-
bodyText ||| related information, from which terms and frequencies are
bodyText ||| generated.
bodyText ||| Experimental results in [2] conclude that QS obtains
bodyText ||| approximately 80% of terms from a database, when 300
bodyText ||| documents are sampled and top 4 documents are retrieved for
bodyText ||| each query. These two parameters are used to obtain results for
bodyText ||| our experiments in which terms and frequencies are generated for
bodyText ||| QS and 2PS after 300 documents have been sampled. The results
bodyText ||| generated from QS provide the baseline for the experiments.
bodyText ||| Three sets of samples are obtained for each database and 300
bodyText ||| documents are retrieved for each sample. First, we manually
bodyText ||| examine each set of sampled documents to obtain the number of
bodyText ||| Web page templates used to generate the documents. This is then
bodyText ||| compared with the number of templates detected by 2PS. The
bodyText ||| detection of Web page templates from the sampled documents is
bodyText ||| important as this determines whether irrelevant information is
bodyText ||| effectively eliminated.
bodyText ||| Next, we compare the number of relevant terms (from top 50
bodyText ||| terms) retrieved using 2PS with the number obtained by QS.
bodyText ||| Terms are ranked according to their ctf frequencies to determine
bodyText ||| their relevancy to the queries. This frequency represents the
bodyText ||| occurrences of a term contained in the sampled documents. Ctf
bodyText ||| frequencies are used to demonstrate the effectiveness of
bodyText ||| extracting query-related information from sampled documents
bodyText ||| since the terms extracted from Web page templates are often
bodyText ||| ranked with high ctf frequencies.
tableCaption ||| Table 2. The number of templates employed by databases and
table ||| the number detected by 2PS
table ||| Databases		Number of templates	
table ||| 		Employed	Detected
table ||| Help Site	Sample 1	17	15
table ||| 	Sample 2	17	16
table ||| 	Sample 3	19	17
table ||| CHID	Sample 1	1	1
table ||| 	Sample 2	1	1
table ||| 	Sample 3	1	1
table ||| Wired News	Sample 1	1	1
table ||| 	Sample 2	1	1
table ||| 	Sample 3	1	1
bodyText ||| Experimental results for QS and 2PS are summarised as follows.
bodyText ||| Firstly, Table 2 gives the number of Web page templates
bodyText ||| employed by the databases and the number detected by 2PS. It
bodyText ||| shows that 2PS effectively identifies the number of templates
bodyText ||| found in the sampled documents. However, a small number of
bodyText ||| templates are not detected from Help Site. For instance, 2PS does
bodyText ||| not detect two of the templates from the first set of sampled
bodyText ||| documents, since the two templates are very similar in terms of
bodyText ||| content and structure.
page ||| 6
bodyText ||| Table 3 summarises the number of relevant terms (from top 50
bodyText ||| terms ranked according to their ctf frequencies) obtained for the
bodyText ||| three databases. These terms are retrieved using 2PS and QS. We
bodyText ||| determine the relevancy of a term by examining whether the term
bodyText ||| is found in Web page templates. Table 3 gives the number of
bodyText ||| retrieved terms that do not appear in Web page templates. The
bodyText ||| results show that 2PS obtains more relevant terms. For instance,
bodyText ||| in the first set of documents sampled from CHID using 2PS, the
bodyText ||| number of relevant terms retrieved is 47. By comparison, the
bodyText ||| number of terms obtained for QS is 20.
bodyText ||| The results generated from CHID and Wired News demonstrate
bodyText ||| that 2PS retrieves more relevant terms, as a large number of terms
bodyText ||| contained in the templates have been successfully eliminated from
bodyText ||| the top 50 terms. However, the elimination of template terms is
bodyText ||| less noticeable for Help Site. Our observation is that template
bodyText ||| terms attain high frequencies since the CHID and Wired News
bodyText ||| databases generate documents using a single Web page template.
bodyText ||| By comparison, a larger number of Web page templates are found
bodyText ||| in the documents sampled from Help Site. As a result, terms
bodyText ||| contained in the templates do not attain high frequencies as those
bodyText ||| found in the templates employed by CHID and Wired News.
bodyText ||| Table 4 and 5 show the results of the top 50 terms ranked
bodyText ||| according to their ctf frequencies retrieved from the first set of
bodyText ||| sampled documents of the CHID database. Table 4 shows the top
bodyText ||| 50 terms retrieved for QS whereby terms contained in Web page
bodyText ||| templates are not excluded. As a result, a number of terms (such
bodyText ||| as ‘author’, ‘language’ and ‘format’) have attained much higher
bodyText ||| frequencies. By contrast, Table 5 lists the top 50 terms retrieved
bodyText ||| using 2PS. Our technique eliminates terms (such as ‘author’ and
bodyText ||| ‘format’) and obtains terms (such as ‘treatment’, ‘disease’ and
bodyText ||| ‘immunodeficiency’) in the higher rank.
tableCaption ||| Table 3. The number of relevant terms retrieved (from top 50
tableCaption ||| terms) according to ctf frequencies
table ||| Databases		Number of relevant terms	
table ||| 		QS	2PS
table ||| Help Site	Sample 1	46	48
table ||| 	Sample 2	47	48
table ||| 	Sample 3	46	48
table ||| CHID	Sample 1	20	47
table ||| 	Sample 2	19	47
table ||| 	Sample 3	20	47
table ||| Wired News	Sample 1	14	42
table ||| 	Sample 2	10	43
table ||| 	Sample 3	11	39
sectionHeader ||| 5. CONCLUSION
bodyText ||| This paper presents a sampling and extraction technique, 2PS,
bodyText ||| which utilises information that is contained in the search interface
bodyText ||| pages and documents of a database in the sampling process. This
bodyText ||| technique extracts information relevant to queries from the
bodyText ||| sampled documents in order to generate terms and frequencies
bodyText ||| with improved accuracy. Experimental results demonstrate that
bodyText ||| our technique effectively eliminates information contained in
bodyText ||| Web page templates, thus attaining terms and frequencies that are
bodyText ||| of a higher degree of relevancy. This can also enhance the
bodyText ||| effectiveness of categorisation in which such statistics are used to
bodyText ||| represent the information contents of underlying databases.
bodyText ||| We obtain promising results by applying 2PS in the experiments
bodyText ||| on three databases that differ in nature. However, experiments on
bodyText ||| a larger number of Hidden Web databases are required in order to
bodyText ||| further assess the effectiveness of the proposed technique.
tableCaption ||| Table 4. Top 50 terms and frequencies ranked according to ctf generated from CHID when QS is applied
table ||| Rank	Term	Rank	Term	Rank	Term
table ||| 1	hiv	18	document	35	lg
table ||| 2	aids	19	disease	36	ve
table ||| 3	information	20	published	37	yr
table ||| 4	health	21	physical	38	ac
table ||| 5	prevention	22	subfile	39	corporate
table ||| 6	education	23	audience	40	mj
table ||| 7	tb	24	update	41	description
table ||| 8	accession	25	verification	42	www
table ||| 9	number	26	major	43	cn
table ||| 10	author	27	pamphlet	44	pd
table ||| 11	persons	28	chid	45	english
table ||| 12	language	29	human	46	national
table ||| 13	sheet	30	date	47	public
table ||| 14	format	31	abstract	48	immunodeficiency
table ||| 15	treatment	32	code	49	virus
table ||| 16	descriptors	33	ab	50	org
table ||| 17	availability	34	fm		
page ||| 7
tableCaption ||| Table 5. Top 50 terms and frequencies ranked according to ctf generated from CHID when 2PS is applied
table ||| Rank	Term	Rank	Term	Rank	Term
table ||| 1	hiv	18	education	35	testing
table ||| 2	aids	19	virus	36	programs
table ||| 3	information	20	org	37	services
table ||| 4	health	21	notes	38	clinical
table ||| 5	prevention	22	nt	39	people
table ||| 6	tb	23	cdc	40	hepatitis
table ||| 7	persons	24	service	41	community
table ||| 8	sheet	25	box	42	world
table ||| 9	treatment	26	research	43	listed
table ||| 10	disease	27	department	44	professionals
table ||| 11	human	28	positive	45	training
table ||| 12	pamphlet	29	tuberculosis	46	diseases
table ||| 13	www	30	control	47	accession
table ||| 14	http	31	drug	48	network
table ||| 15	national	32	discusses	49	general
table ||| 16	public	33	ill	50	std
table ||| 17	immunodeficiency	34	organizations		
sectionHeader ||| 6. REFERENCES
reference ||| [1] Arasu, A. and Garcia-Molina, H. Extracting Structured Data
reference ||| from Web Pages. In Proceedings of the 2003 ACM SIGMOD
reference ||| International Conference on Management, 2003, 337-348.
reference ||| [2] Callan, J. and Connell, M. Query-Based Sampling of Text
reference ||| Databases. ACM Transactions on Information Systems
reference ||| (TOIS), Vol. 19, No. 2, 2001, 97-130.
reference ||| [3] Caverlee, J., Buttler, D. and Liu, L. Discovering Objects in
reference ||| Dynamically-Generated Web Pages. Technical report,
reference ||| Georgia Institute of Technology, 2003.
reference ||| [4] Crescenzi, V., Mecca, G. and Merialdo, P. ROADRUNNER:
reference ||| Towards Automatic Data Extraction from Large Web Sites,
reference ||| In Proceedings of the 27th International Conference on Very
reference ||| Large Data Bases (VLDB), 2001, 109-118.
reference ||| [5] Gravano, L., Ipeirotis, P. G. and Sahami, M. QProber: A
reference ||| System for Automatic Classification of Hidden-Web
reference ||| Databases. ACM Transactions on Information Systems
reference ||| (TOIS), Vol. 21, No. 1, 2003.
reference ||| [6] Heß, M. and Drobnik, O. Clustering Specialised Web-
reference ||| databases by Exploiting Hyperlinks. In Proceedings of the
reference ||| Second Asian Digital Library Conference, 1999.
reference ||| [7] Hedley, Y.L., Younas, M., James, A. and Sanderson M.
reference ||| Query-Related Data Extraction of Hidden Web Documents.
reference ||| In Proceedings of the 27th Annual International ACM SIGIR
reference ||| Conference, 2004, 558-559.
reference ||| [8] Lage, J. P., da Silva, A. S., Golgher, P. B. and Laender, A.
reference ||| H. F. Automatic Generation of Agents for Collecting Hidden
reference ||| Web Pages for Data Extraction. Data &amp; Knowledge
reference ||| Engineering, Vol. 49, No. 2, 2004, 177-196.
reference ||| [9] Liddle, S.W., Yau, S.H. and Embley, D. W. On the
reference ||| Automatic Extraction of Data from the Hidden Web. In
reference ||| Proceedings of the 20th International Conference on
reference ||| Conceptual Modeling, (ER) Workshops, 2001, 212-226.
reference ||| [ 10] Lin, K.I. and Chen, H. Automatic Information Discovery
reference ||| from the Invisible Web. International Conference on
reference ||| Information Technology: Coding and Computing (ITCC),
reference ||| 2002, 332-337.
reference ||| [ 11 ] Meng, W., Wang, W., Sun, H. and Yu, C. Concept
reference ||| Hierarchy Based Text Database Categorization.
reference ||| International Journal on Knowledge and Information
reference ||| Systems, Vol. 4, No. 2, 2002, 132-150.
reference ||| [ 12] Raghavan, S. and Garcia-Molina, H. Crawling the Hidden
reference ||| Web. In Proceedings of the 27th International Conference on
reference ||| Very Large Databases (VLDB), 2001, 129-138.
reference ||| [ 13] Rahardjo, B. and Yap, R. Automatic Information Extraction
reference ||| from Web Pages, In Proceedings of the 24th Annual
reference ||| International ACM SIGIR Conference, 2001, 430-431.
reference ||| [ 14] Salton, G. and McGill, M. Introduction to Modern
reference ||| Information Retrieval. New York, McCraw-Hill, 1983.
reference ||| [ 15] Sugiura, A. and Etzioni, O. Query Routing for Web Search
reference ||| Engines: Architecture and Experiments. In Proceedings of
reference ||| the 9th International World Wide Web Conference: The
reference ||| Web: The Next Generation, 2000, 417-430.
page ||| 8
