note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
title ||| TALC: Using Desktop Graffiti to Fight
title ||| Software Vulnerability
author ||| Kandha Sankarapandian, Travis Little, W. Keith Edwards
affiliation ||| Georgia Institute of Technology
address ||| 85 Fifth Street NW, Atlanta, GA 30308, USA.
email ||| {kandha, tlittle , keith}@cc.gatech.edu
sectionHeader ||| ABSTRACT
bodyText ||| With the proliferation of computer security threats on the
bodyText ||| Internet, especially threats such as worms that
bodyText ||| automatically exploit software flaws, it is becoming more
bodyText ||| and more important that home users keep their computers
bodyText ||| secure from known software vulnerabilities. Unfortunately,
bodyText ||| keeping software up-to-date is notoriously difficult for
bodyText ||| home users. This paper introduces TALC, a system to
bodyText ||| encourage and help home users patch vulnerable software.
bodyText ||| TALC increases home usersâ awareness of software
bodyText ||| vulnerabilities and their motivation to patch their software;
bodyText ||| it does so by detecting unpatched software and then
bodyText ||| drawing graffiti on their computerâs background wallpaper
bodyText ||| image to denote potential vulnerabilities. Users can âclean
bodyText ||| upâ the graffiti by applying necessary patches, which
bodyText ||| TALC makes possible by assisting in the software patching
bodyText ||| process
category ||| ACM Classification: H.5.m Information interfaces and
category ||| presentation, H.5.2 User Interfaces, K.6.5 Management of
category ||| Computer and Information Systems: Security and
category ||| Protection, D.4.6 Operating Systems: Security and
category ||| Protection
keyword ||| General terms: Human factors, security, management
keyword ||| Keywords: Usable security, Internet security, home users,
keyword ||| patch management, software vulnerabilities, security
keyword ||| framework, graffiti
sectionHeader ||| INTRODUCTION
bodyText ||| One of the most significant computer security threats faced
bodyText ||| by users today results from vulnerabilities in the operating
bodyText ||| system and application software installed on usersâ
bodyText ||| computers. Software defectsâbugs such as susceptibility
bodyText ||| to buffer overflow attacks [7], cross site scripting [26], and
bodyText ||| so forthârepresent vectors through which malware can
copyright ||| Permission to make digital or hard copies of all or part of this work for
copyright ||| personal or classroom use is granted without fee provided that copies are
copyright ||| not made or distributed for profit or commercial advantage and that copies
copyright ||| bear this notice and the full citation on the first page. To copy otherwise,
copyright ||| or republish, to post on servers or to redistribute to lists, requires prior
copyright ||| specific permission and/or a fee.
note ||| CHI 2008, April 5â10, 2008, Florence, Italy.
copyright ||| Copyright 2008 ACM 978-1-60558-011-1/08/04...$5.00
bodyText ||| infect and compromise usersâ machines. Once machines
bodyText ||| have been compromised, malicious parties can extract
bodyText ||| personal information from them, or enlist them into botnets
bodyText ||| to serve in further attacks on network resources. The latter
bodyText ||| threat, in particular, has a significant impact on the entire
bodyText ||| Internet community as botnets are the means to Distributed
bodyText ||| Denial of Service (DDoS), spam and phishing attacks [14];
bodyText ||| the exponential increase in size and number of botnets [6]
bodyText ||| is a stark reflection on the number of vulnerable machines
bodyText ||| that exist in the Internet. Ironically, in many cases, patches
bodyText ||| exist to repair these vulnerabilities; however, users are
bodyText ||| often unaware that such patches exist, or are unmotivated to
bodyText ||| install them, or may not know how to install them.
bodyText ||| Numerous reports from both government and industry
bodyText ||| sources highlight the magnitude of the threat posed by
bodyText ||| unpatched software vulnerabilities. For example, statistics
bodyText ||| from the Computer Emergency Response Team
bodyText ||| (CERT/CC) show the rapid increase in reported software
bodyText ||| vulnerabilities since 1995 [5]. NIST&apos;s report on the
bodyText ||| economic impacts of inadequate software testing estimates
bodyText ||| damage from attacks exploiting software vulnerabilities at
bodyText ||| US$60 billion/year [25]. Furthermore, testimony from the
bodyText ||| US General Accounting Office notes the importance of
bodyText ||| effective and continual patch management in addressing the
bodyText ||| âstaggeringâ increase in software vulnerabilities [29].
bodyText ||| Industry sources echo these same concerns. The importance
bodyText ||| of routine patching is highlighted in Symantecâs security
bodyText ||| report [28], which notes that after having a firewall and
bodyText ||| antivirus software, the single most important practice for
bodyText ||| consumers to maintain their computerâs security is to stay
bodyText ||| current on software patches. The SAGE report [17] from
bodyText ||| McAfee Avert Labs estimates that known software
bodyText ||| vulnerabilities are increasing at a rate of about 30%
bodyText ||| annually. Microsoftâs LaMacchia [16] also notes that the
bodyText ||| window of time between when new software is released
bodyText ||| and when an exploit has been created has decreased
bodyText ||| considerably (leading to so-called zero day attacks, in
bodyText ||| which exploits are ready to be employed the day new
bodyText ||| software is released).
bodyText ||| Unfortunately, just as the necessity of maintaining up-to-
bodyText ||| date patches is increasing, the complexity of doing so is
bodyText ||| also increasing: users must now be responsible for patching
bodyText ||| not only their operating system software, but also the
page ||| 1055
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
bodyText ||| multiplicity of application software on their systems. While
bodyText ||| operating systems have built-in facilities (such as Windows
bodyText ||| Update) to download patches and encourage users to install
bodyText ||| them, other applications use a diverse range of update
bodyText ||| mechanisms, including requiring that users explicitly visit
bodyText ||| vendorsâ web sites for newer versions. Worryingly, the
bodyText ||| SAGE report indicates that in the period between
bodyText ||| December 2005 and May 2006, the vulnerabilities targeted
bodyText ||| were moving away from OS attacks, to attacks on other
bodyText ||| software, such as Internet Explorer and Firefox. Thus users
bodyText ||| must now contend with a host of disparate and confusing
bodyText ||| patch systems in order to ensure that all of the software on
bodyText ||| their machines is protected.
bodyText ||| In order to patch vulnerable software, users (1) must know
bodyText ||| that such software exists in the first place, (2) know how to
bodyText ||| go about patching it, and (3) be motivated to do so in a
bodyText ||| timely manner.1 Although there are a number of existing
bodyText ||| systems that address patching in some capacity (described
bodyText ||| below), none of these systems specifically address making
bodyText ||| home users aware of the threats that vulnerable software
bodyText ||| poses to their computerâs security and their privacy, nor do
bodyText ||| they provide a holistic approach to patch management
bodyText ||| across multiple vendorsâ applications.
bodyText ||| To address these challenges, we have developed a system
bodyText ||| called TALC (for Threat Awareness, Learning, and
bodyText ||| Control) that aims to augment usersâ awareness of
bodyText ||| vulnerabilities posed by unpatched software through
bodyText ||| unobtrusive yet persistent visual reminders, persuade them
bodyText ||| to remedy those vulnerabilities, and provide easier
bodyText ||| mechanisms for patch install ation across a range of
bodyText ||| applications.
bodyText ||| In this paper, we describe TALC, its architecture, and a
bodyText ||| deployment-based user study that we performed to
bodyText ||| determine its overall utility. We conclude with a discussion
bodyText ||| of our approach and directions for future research.
sectionHeader ||| RELATED WORK
bodyText ||| Most of the current work on easier patch management is
bodyText ||| either vendor-specific, or has focused on managed solutions
bodyText ||| for the enterprise environment.
bodyText ||| In the vendor-specific category, tools such as Windows
bodyText ||| Update and Mac OS X Software Update perform automatic
bodyText ||| detection and download of new patches, and single-click
bodyText ||| installation. However, these tools only work for operating
bodyText ||| system components and, as noted above, unpatched
bodyText ||| application software now represents the major source of
bodyText ||| vulnerabilities. Of course, many application vendors
bodyText ||| provide mechanisms for their own products (such as Adobe
bodyText ||| Onlineâs tools for update of their Creative Suite products).
bodyText ||| However, there is no unified vendor-supported mechanism
footnote ||| 1 Even with systems that include an auto-update mechanism, the response window between
footnote ||| the public disclosure of an exploit and the availability of a software patch is sufficient for a
footnote ||| worm to exploit the vulnerability and achieve significant spread. Usually an advisory on
footnote ||| working around the vulnerable software is released before the actual patch and educating
footnote ||| users with these advisories can be effective in stopping exploits.
bodyText ||| for simple updates of all software on a userâs system,
bodyText ||| requiring users to deal with these on a piecemeal basis,
bodyText ||| when such systems exist at all.
bodyText ||| In the enterprise space, a number of companies have begun
bodyText ||| to focus specifically on patch installation in managed
bodyText ||| networks, as a way for centralized IT organizations to
bodyText ||| protect the corporate network. Enterprise management
bodyText ||| solutions like Marimba Patch Management from BMC
bodyText ||| Software [3], for example, enable deployment of security
bodyText ||| patches on all devices across the enterprise. While
bodyText ||| powerful, these systems are not designed for use by home
bodyText ||| users; they require, for example, a centralized administrator
bodyText ||| who manages patch releases to the corporate network, and
bodyText ||| rely on homogeneous software installations on client
bodyText ||| devices.
bodyText ||| There is a tension between tools like Marimba, which are
bodyText ||| proactive and aim to shield end-users from direct
bodyText ||| involvement with patching, and other tools such as
bodyText ||| Windows Update that take a more interactive approach,
bodyText ||| involving the user in the patch decision process and
bodyText ||| demanding their attention [15].
bodyText ||| While proactive tools are, on the surface, easier to use since
bodyText ||| they do not require direct user involvement, they also do
bodyText ||| not contribute to the userâs learning process: awareness of
bodyText ||| threats is a critical component in managing software
bodyText ||| vulnerabilities given the diversity each userâs individual
bodyText ||| software usage patterns. Furtherâand perhaps more
bodyText ||| importantlyâunless potential software version conflicts
bodyText ||| can be reliably determined in advance, there is a risk that an
bodyText ||| automatically installed patch will break other software on
bodyText ||| the userâs computer. Such a hypothetical, fully-automated
bodyText ||| tool for managing software updates across applications is
bodyText ||| difficult to achieve outside the homogeneity of the
bodyText ||| managed corporate network, meaning that users will likely
bodyText ||| have to be involved in at least some aspects of patch
bodyText ||| decision making for the foreseeable future [10].
bodyText ||| Given these practical realities of automated patch
bodyText ||| management, it is imperative that users be kept informed
bodyText ||| about the potential dangers of an unpatched system, as well
bodyText ||| as the benefits and risks of installing a given patch, if they
bodyText ||| are going to be involved in making patch decisions.
bodyText ||| A challenge, of course, is that highly interactive tools can
bodyText ||| potentially annoy users to the point that they turn off such
bodyText ||| tools completely. This problem has been especially evident
bodyText ||| in security software; most common firewalls, for instance,
bodyText ||| display pop up messages about threats such as port scans.
bodyText ||| Bailey, Konstan, and Carlis [1] report that such
bodyText ||| interruptions increase task completion times, as well as user
bodyText ||| anxiety and frustration. However the suggestion from [1] of
bodyText ||| an âattention managerâ that predicts opportunities for
bodyText ||| engaging with the user may not be an optimal solution for a
bodyText ||| security task like patch management that does not require
bodyText ||| an instantaneous allow/deny decision in the way that
bodyText ||| antivirus or firewall alerts do. This suggests that different,
bodyText ||| more subtle and less intrusive approaches than interrupting
bodyText ||| the user may be employed, which allow the user to interact
page ||| 1056
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
figureCaption ||| Figure 1: TALC showing graffiti on the user&apos;s desktop along with a popup description of the threat.
bodyText ||| with the patch management system as a secondary task, but
bodyText ||| with sufficient persuasion that users do not ignore it
bodyText ||| completely.
bodyText ||| There have also been a number of research efforts intended
bodyText ||| to address the problem of excessive dependence on user
bodyText ||| interaction for security. For example, systems such as the
bodyText ||| Chameleon System for Desktop Security [23] attempt to
bodyText ||| categorize software into activity roles in an effort to reduce
bodyText ||| impinging on the userâs attention. However, most such
bodyText ||| tools are incomplete, or focus on a narrow range of threats.
bodyText ||| For example, Chameleon is a low-fi, paper-based prototype
bodyText ||| intended to address only the threat of malware.
bodyText ||| TALC is designed in response to the need for better patch
bodyText ||| management on end-user systems. It aims to strike a
bodyText ||| balance between proactive and interactive support, in order
bodyText ||| to provide users with awareness and control over security
bodyText ||| risks without excessive attention costs or disruption to their
bodyText ||| workflow. TALC uses âcalmâ notifications, rather than
bodyText ||| intrusive techniques such as popups, to motivate specific
bodyText ||| user behaviors, and to provide awareness of overall system
bodyText ||| risk from software vulnerabilities. TALC also provides a
bodyText ||| holistic approach to patch management, by assisting with
bodyText ||| patch management across the heterogeneous variety of
bodyText ||| applications and software components that may be installed
bodyText ||| on a userâs machine.
sectionHeader ||| DESCRIPTION
bodyText ||| In this section, we describe how the user sees TALC, as
bodyText ||| well as how TALC detects and assists in repairing software
bodyText ||| vulnerabilities.
bodyText ||| TALC paints graffiti on the userâs desktop to indicate the
bodyText ||| presence of unpatched software on the userâs system (see
bodyText ||| Figure 1). Unlike intrusive techniques such as popups, this
bodyText ||| is meant to be a âlow-distractionâ technique, designed to
bodyText ||| make users aware of potential problems, while allowing
bodyText ||| them to act on them in their own time. In contrast to
bodyText ||| warning dialogs that interrupt usersâ activities (âYour
bodyText ||| patches are out of date!â), this awareness function is
bodyText ||| intended to serve as a constant but gentle reminder,
bodyText ||| allowing users to finish their primary tasks without letting
bodyText ||| them forget about the security maintenance tasks that need
bodyText ||| their attention.
page ||| 1057
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
bodyText ||| For each threat found on the userâs machine by TALC a
bodyText ||| single graffiti image is chosen out of a corpus of images,
bodyText ||| and composited into a randomly selected area of the screen.
bodyText ||| TALC uses the size of the graffiti image to convey the
bodyText ||| relative severity of the threat: the graffiti is shown larger
bodyText ||| for severe threats and smaller for more mild threats.
subsectionHeader ||| Why Graffiti?
bodyText ||| We chose the graffiti visualization of software
bodyText ||| vulnerabilities to convey a general sense of âdecayâ or
bodyText ||| âthreatâ to the user, suggesting that their machine has
bodyText ||| entered a state of risk. Such notions appear to be broadly
bodyText ||| associated with graffiti in physical environments for many
bodyText ||| people. Numerous studies have confirmed this association
bodyText ||| across a number of cultures and communities; see, for
bodyText ||| example Morin et al.âs study of US public health nursing
bodyText ||| studentsâ perception of threat in their communities [22],
bodyText ||| Bowling et al.âs study of risk perception in Britain [4] as
bodyText ||| well as others [2, 13].
bodyText ||| We realize that this association may not hold across all
bodyText ||| cultures, or even across individuals within a given culture.
bodyText ||| (See, for instance, sources that reflect the artistic value in
bodyText ||| graffiti such as Susan Farrellâs Art Crimes site,
bodyText ||| http://www.graffiti.org, as well as academic work exploring
bodyText ||| the appropriation of graffiti by various subcultures [11].)
bodyText ||| However, even for those users that may not have negative
bodyText ||| associations with graffiti, we hoped that their personal
bodyText ||| inclinations would be outweighed by the minor annoyance
bodyText ||| of having part of their desktop covered by the graffiti
bodyText ||| (covering a personally selected photo for instance), and
bodyText ||| therefore would still provide motivation to deal with the
bodyText ||| software vulnerabilities.
bodyText ||| Our choice of a real world metaphor for visualizing
bodyText ||| security threats stems from the observations made by
bodyText ||| Redstrom, Skog and Hallnas in their work on informative
bodyText ||| art [27]. We explored a number of other, non-graffiti
bodyText ||| visualization approaches during prototyping, which we also
bodyText ||| believed might convey a sense of risk to the user. These
bodyText ||| included one that used bullet holes in the userâs background
bodyText ||| image (deemed both to be too violent, and to
bodyText ||| inappropriately convey a sense of active attack rather than
bodyText ||| simple decay), and one that rendered increasingly large
bodyText ||| piles of garbage and other debris along the bottom of the
bodyText ||| userâs screen (deemed to appropriately convey a sense of
bodyText ||| decay but perhaps be too easy to ignore). We believe using
bodyText ||| graffiti walks the line between the ambient media and
bodyText ||| diversion categories as described by McCrickard, et.al. in
bodyText ||| their model for notification systems [18].
subsectionHeader ||| Determining and Presenting Vulnerabilities
bodyText ||| TALC determines potential vulnerabilities through a multi-
bodyText ||| step process. First, we perform a periodic system-wide
bodyText ||| audit to identify software versions installed on the userâs
bodyText ||| machine. Next, this data is compared against the online
bodyText ||| NIST National Vulnerability Database (NVD) [24],
bodyText ||| resulting in an up-to-date list of installed software for
bodyText ||| which patches exist.
bodyText ||| When the userâs cursor hovers over a graffiti area, a tooltip
bodyText ||| displays the name of the software that is vulnerable, as well
bodyText ||| as the threats posed by this vulnerability (see Figure 1).
bodyText ||| We parse the NVD at connection time to retrieve patch
bodyText ||| information, as well as the descriptions presented to users,
bodyText ||| as shown in Figure 1 above. The language used in the
bodyText ||| descriptions in the National Vulnerability Database is often
bodyText ||| highly technical, and may be confusing to home users. To
bodyText ||| make the descriptions more palatable, we use a set of
bodyText ||| heuristics to simplify the explanations. For example, an
bodyText ||| NVD threat description such as the following:
construct ||| The do_change_cipher_specfunction in OpenSSL
construct ||| 0.9.6c to 0.9.6k, and 0.9.7a to 0.9.7c, allows remote
construct ||| attackers to cause a denial of service (crash) via a
construct ||| crafted SSL/TLS handshake that triggers a null
construct ||| dereference
bodyText ||| would be presented by TALC as:
construct ||| Denial of service vulnerability that lets a remote
construct ||| attacker slow down/crash your computer.
bodyText ||| The descriptions are scanned for a small set of keywords,
bodyText ||| and predefined descriptions of the problems are presented
bodyText ||| to the user. This provides a more readable description for a
bodyText ||| large number of common classes of vulnerabilities; other
bodyText ||| descriptions that do not match our heuristics are explained
bodyText ||| with a generic message: âOther vulnerability.â
bodyText ||| We did not completely eliminate all information about the
bodyText ||| vulnerability to allow users to learn about common types of
bodyText ||| threats, andâif necessaryâcommunicate such information
bodyText ||| to any people or organizations they trust to help them keep
bodyText ||| their computer safe. Thus, following Zurko [30], TALC
bodyText ||| places emphasis on helping users understand these security
bodyText ||| concepts through its use.
subsectionHeader ||| Repairing Vulnerabilities
bodyText ||| In addition to supporting threat awareness, TALC also
bodyText ||| allows users to take actions that mitigate threats. When the
bodyText ||| user clicks the right mouse button on graffiti, a popup
bodyText ||| context menu appears that allows them to repair the threats
bodyText ||| posed by a vulnerable program. When the user chooses to
bodyText ||| fix the program, TALC downloads and displays the
bodyText ||| webpage that contain patches or workarounds for
bodyText ||| vulnerabilities, and displays the control window shown in
bodyText ||| Figure 2. TALC also shows system information and the
bodyText ||| name and version number of the program with the
bodyText ||| vulnerability.
bodyText ||| Unfortunately, different vendors require different processes
bodyText ||| to acquire patches: some may require that users log in,
bodyText ||| while others require a click-through license agreement, and
bodyText ||| others may simply provide direct access to the patch itself.
bodyText ||| Thus, while TALC automates the process offinding a patch
bodyText ||| for the detected vulnerabilities, it leaves the task of actually
bodyText ||| installing patches to individual users. This is not only
bodyText ||| because of the difficulty involved in automatically dealing
bodyText ||| with multiple vendorsâ web sites, but also because users
bodyText ||| must often be involved in the process of deciding whether a
bodyText ||| particular patch is appropriate for them. Security is not
page ||| 1058
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
bodyText ||| usersâ only concern; they must make security related
bodyText ||| decisions in context, such as knowing whether a new
bodyText ||| software version will break compatibility with other tools.
bodyText ||| For example, Windows XP SP2âwhile providing
bodyText ||| important security featuresâbroke the functionality of a
bodyText ||| number of network-based tools [21]. Simply installing such
bodyText ||| updates automatically without considering the context of
bodyText ||| other software in use can often lead to such problems.
figureCaption ||| Figure 2: TALC Control window displaying the
figureCaption ||| website with patch information.
sectionHeader ||| IMPLEMENTATION
bodyText ||| TALC uses a modular implementation, with well-defined
bodyText ||| communication interfaces between modules to facilitate
bodyText ||| easy addition and replacement of components. This is
bodyText ||| exposed in the form of an API that allows developers to
bodyText ||| write pluggable modules for TALC. For example, these
bodyText ||| APIs have been used to create the software vulnerability
bodyText ||| detection system described in this paper, but can be
bodyText ||| extended to provide functionality beyond software patch
bodyText ||| management. The extensible nature of TALC is intended to
bodyText ||| be used to visualize and control a large set of security tools
bodyText ||| through a framework similar to the one described by
bodyText ||| Dourish and Redmiles in [9]. For example, information
bodyText ||| sources, sensors and aggregators can be created and
bodyText ||| plugged into TALC, allowing it to be extended to new
bodyText ||| visualizations and to detect new security threats. Our long-
bodyText ||| term goal is for TALC to ultimately serve as an integrated
bodyText ||| security suite along the lines of Internet Security suites
bodyText ||| from Symantec, McAfee and an advanced form of the
bodyText ||| Windows Security Center [20].
bodyText ||| The TALC system is composed of four modules,
bodyText ||| Information Source Module, Correlation Module,
bodyText ||| Visualization Module and Control Module linked together
bodyText ||| by a Communication Manager that allows modules to pass
bodyText ||| messages to each other. Each module exposes hooks and
bodyText ||| registers callback functions with the other modules for
bodyText ||| communication. The Information Source module detects
bodyText ||| events from the host and the network and processes them
bodyText ||| into XML data that can be exchanged with other modules.
bodyText ||| For example, the software vulne rability detection features
bodyText ||| described in this paper are implemented as a custom
bodyText ||| Information Source module, which generates data by using
bodyText ||| Hijackthis [19] (a tool that scans the registry for references
bodyText ||| to installed programs) and a series of other system scans
bodyText ||| (such as programs on the Start Menu, or on the userâs
bodyText ||| desktop) to identify installed software.
bodyText ||| The Correlation module interprets this information by
bodyText ||| aggregating the data from the different Information
bodyText ||| Sources. For the software vulnerability detection
bodyText ||| incarnation of TALC, the Correlation module correlates the
bodyText ||| information from the system scans with data pulled from
bodyText ||| the NVD. The Correlator performs a version match with the
bodyText ||| list of vulnerable software from the NVD database,
bodyText ||| ascertains the severity of the threat (Mild, Medium or
bodyText ||| Severe), and records the website indicated by the NVD to
bodyText ||| contain information necessary to resolve the vulnerability.
bodyText ||| This is fed to the Visualization and Control modules.
bodyText ||| The Visualization module is responsible for information
bodyText ||| presentation. As described earlier, our current visualization
bodyText ||| module presents software vulnerabilities as graffiti
bodyText ||| rendered onto the userâs desktop. Other visualizations are
bodyText ||| possible; for example, one visualization we have explored
bodyText ||| renders vulnerabilities as pieces of garbage piling up along
bodyText ||| the bottom of the userâs screen; one could also create
bodyText ||| visualization modules that use standard pop-up dialog
bodyText ||| boxes to notify the user of threats.
bodyText ||| Finally, the Control module provides the means by which
bodyText ||| the user can act upon the information presented by the
bodyText ||| Visualization module. In our current system the Control
bodyText ||| module opens up websites that lets the user download a
bodyText ||| patch to fix the software vulnerability. The Control module
bodyText ||| can be easily extended to give a user control of different
bodyText ||| security software such as their firewall.
sectionHeader ||| EVALUATION
bodyText ||| We performed a deployment-based study of TALC to
bodyText ||| determine its efficacy in providing better awareness of
bodyText ||| software vulnerabilities, and in incenting users to rectify
bodyText ||| those vulnerabilities. Our study structure consisted of a
bodyText ||| two-week deployment period during which TALC was in
bodyText ||| operation on usersâ primary machines. Logging features in
bodyText ||| TALC reported on usersâ use of the system so that we
bodyText ||| could collect quantitative data on their actions. We also
bodyText ||| collected data from pre- and post-study questionnaires to
bodyText ||| get qualitative data about usersâ perceptions of the
bodyText ||| software.
bodyText ||| Participants were recruited from a non-university context.
bodyText ||| After consent was obtained (but before any other
bodyText ||| participation in the study), users were sent a link to an
bodyText ||| online questionnaire that tested them on their awareness of
bodyText ||| computer security concepts and threats, as well as their
bodyText ||| expertise in general computer usage.
bodyText ||| Once users completed the pre-test questionnaire they were
bodyText ||| emailed a link to the installation file and they were asked to
bodyText ||| download and install TALC. Our participants ran a
bodyText ||| specially instrumented version of TALC on their personal
page ||| 1059
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
bodyText ||| computers for two weeks. Every week, TALC would
bodyText ||| upload the data it had collected on how users interacted
bodyText ||| with it.
bodyText ||| When the participants had been running the program for
bodyText ||| two weeks, they were sent a link via email to a post-study
bodyText ||| questionnaire to allow us to get data about their subjective
bodyText ||| experiences of using the software.
subsectionHeader ||| The Participants
bodyText ||| Ten participants finished the study successfully. Seven
bodyText ||| more started the study, but dropped out for a variety of
bodyText ||| reasons, including changing their mind about participating
bodyText ||| in the study before downloading the software, and because
bodyText ||| of installation problems. One participant uninstalled the
bodyText ||| TALC software before the two weeks were completed; we
bodyText ||| include data from this subject in the results presented here:
bodyText ||| one of the things we hoped to discover was whether we had
bodyText ||| correctly adjusted TALC to motivate users without being
bodyText ||| annoying, and so results from users who ceased using the
bodyText ||| software had the potential to be especially illuminating.
bodyText ||| The ages of the participants ranged from twenty-three to
bodyText ||| thirty-five, with an average age of twenty-six. Of those who
bodyText ||| completed the study, four were women and six were men.
bodyText ||| Although the absolute number of participants is smaller
bodyText ||| than would be typical in a controlled lab study, the intent
bodyText ||| with our evaluation was specifically to engage users in a
bodyText ||| real-world deployment of the system over a sustained (half
bodyText ||| month) period of time, a style of evaluation that we believe
bodyText ||| is necessary for ecological validity. While lab-based studies
bodyText ||| can easily engage substantially larger numbers of users,
bodyText ||| these studies have problems in the security context,
bodyText ||| particularly around artificial experimental scenarios that are
bodyText ||| removed from users&apos; day-to-day experiences, and also may
bodyText ||| overly prime subjectsâ orientation toward security. We
bodyText ||| therefore believed that a deployment study, on usersâ own
bodyText ||| computers, confronting unknown usage contexts and
bodyText ||| uncontrolled software vulnerabilities, was the only
bodyText ||| appropriate way to measure use.
subsectionHeader ||| The Pre-test Questionnaire
bodyText ||| The pre-test questionnaire was administered online, using a
bodyText ||| common online survey vendor. Participants were emailed
bodyText ||| requests to fill out the survey, and provided links to the
bodyText ||| survey site. The survey consisted of three demographic
bodyText ||| questions, eleven questions to determine how comfortable
bodyText ||| the participants felt using computers, and how confident
bodyText ||| they were in their computerâs security. Finally there were
bodyText ||| eight questions in which the user was asked to define
bodyText ||| simple computer security related terms, to gauge their
bodyText ||| general knowledge of computer security concepts.
subsectionHeader ||| The Study
bodyText ||| There were two conditions in the study, to separate
bodyText ||| patching actions incented directly by TALC from other
bodyText ||| patches downloaded merely because users had an increased
bodyText ||| awareness of the security issues as a result of participating
bodyText ||| in the study itself. In all conditions TALC was downloaded
bodyText ||| and installed by the participants. In one condition, however,
bodyText ||| the tool was instrumented to not identify any vulnerabilities
bodyText ||| (and, hence, to not show any graffiti) during the first week;
bodyText ||| in the second condition the tool was instrumented so that it
bodyText ||| did not detect any vulnerabilities (nor show any graffiti) in
bodyText ||| the second week. Through these two conditions we hoped
bodyText ||| to isolate any potentially biasing novelty effects caused
bodyText ||| simply because subjects were participating in the study. In
bodyText ||| both cases, for the week it was active, TALC detected
bodyText ||| vulnerable software on all participantsâ computers, and thus
bodyText ||| presented graffiti to all users during the week it was
bodyText ||| activated. During both weeks, for both conditions, TALC
bodyText ||| continued to scan the usersâ systems and record
bodyText ||| vulnerabilities as well as how the participants interacted
bodyText ||| with it.
bodyText ||| Participants were randomly assigned to a condition when
bodyText ||| they consented to be a part of the study. They were not
bodyText ||| given a link to the TALC installation file until they had
bodyText ||| completed the pre-test questionnaire. Participants were
bodyText ||| instructed to inform researchers if they had any problems
bodyText ||| installing the software packages; despite this, a number of
bodyText ||| participants did have trouble installing our prototype and
bodyText ||| yet did not contact us, which contributed significantly to
bodyText ||| the drop-out rate.
subsectionHeader ||| The Post-test Questionnaire
bodyText ||| The post-test questionnaire was administered online, again
bodyText ||| using a common online survey vendor, in the same way as
bodyText ||| the pretest questionnaire. Participants were emailed
bodyText ||| requests to fill out the survey, and provided links to the
bodyText ||| survey site, when they had run the TALC software for two
bodyText ||| weeks and their usage data had been uploaded. The survey
bodyText ||| had the same ques tions as the pretest questionnaire, along
bodyText ||| with the addition of thirteen questions to dete rmine the
bodyText ||| participantsâ perceptions of using the TALC system over
bodyText ||| the deployment period.
sectionHeader ||| RESULTS
bodyText ||| This section describes the results from our deployment
bodyText ||| study, and from our pre - and post-test questionnaires.
bodyText ||| Events Tracked
bodyText ||| TALC kept logs of the usersâ interaction with it, over the
bodyText ||| two week period, and the data was uploaded twice to our
bodyText ||| server: once at the end of each week.
bodyText ||| From the logs we categorized five types of event s:
bodyText ||| Awareness events, Learning events, Control (Fixed) events,
bodyText ||| Control (Ignore) events, and Reappear events. An
bodyText ||| Awareness event was recorded when graffiti for a particular
bodyText ||| threat was shown to the user for the first time. Whenever
bodyText ||| our simplified description of the threat was shown to the
bodyText ||| user or when the user clicked on a graffiti, and the vendor
bodyText ||| website was displayed, it was recorded as a Learning event.
bodyText ||| Whenever users would indicate to the system that a
bodyText ||| vulnerability had been repaired and should be dismissed
bodyText ||| (through clicking the âAlready Fixedâ button in the TALC
bodyText ||| interface), Control (Fixed) events were recorded. If the
bodyText ||| vulnerability hadnât actually been fixed, a Reappear event
bodyText ||| would be recorded when the vulnerability was re-detected.
bodyText ||| Finally, if a user chose to not fix a vulnerability by clicking
page ||| 1060
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
figureCaption ||| Figure 3: Awareness of new threats reported by
figureCaption ||| TALC to the test participants.
bodyText ||| the Ignore button while viewing a patch website, a Control
bodyText ||| (Ignore) event was written to the log.
bodyText ||| Each line on these graphs represents a single test
bodyText ||| participant. Figure 3 records the distribution of Awareness
bodyText ||| eventsâeach representing a newly detected vulnerabilityâ
bodyText ||| over the TALC active week period. The smaller spike in
bodyText ||| awareness at later stages of test period is a composite of
bodyText ||| two factorsânew vulnerabilities released by NVD and new
bodyText ||| program installs by users of the software.
subsectionHeader ||| Usage Patterns
bodyText ||| The majority of user actions were taken within two days
bodyText ||| after graffiti for a particular vulnerability first appeared on
bodyText ||| the desktop: 60% of all vulnerabilities were fixed within a
bodyText ||| two-day period. However, 39% of the remaining
bodyText ||| vulnerabilities that were fixed were patched in the last two
bodyText ||| days of the test, indicating that users were patching,
bodyText ||| ignoring graffiti for a couple of days, and then coming back
bodyText ||| and patching at a later time. This is illustrated in Figure 4
bodyText ||| below.
bodyText ||| Recall that Learning events represent visits by users to a
bodyText ||| patch website through TALC; this figure shows the
bodyText ||| distribution of such visits. Beyond simply exploring
bodyText ||| vulnerabilities through TALC, we believe that the effects of
bodyText ||| making users aware of software vulnerabilities on their
bodyText ||| systems may have resulted in greater sensitivity to patching
bodyText ||| in general: A number of the respondents to our post-test
bodyText ||| survey reported using regular web search engines to find
bodyText ||| out more details about the detected vulnerabilities. While
bodyText ||| we were encouraged by these findings, such events are
bodyText ||| beyond the scope of the instrumentation we had in place for
bodyText ||| TALC and so we only have self-reports of such activities.
bodyText ||| The Fixed and Ignore types of Control events are a good
bodyText ||| reflection of the effectiveness of TALC. When a participant
bodyText ||| applied a software patch, TALC did not immediately
bodyText ||| remove the graffiti; rather, the graffiti was removed during
bodyText ||| the next periodic scan of the userâs system. The TALC user
bodyText ||| interface, however, provided an option to manually invoke
figureCaption ||| Figure 4: Learning events logged by TALC.
bodyText ||| the scan to remove graffiti for threats that had been fixed.
bodyText ||| Another option, which incidentally most users adopted, was
bodyText ||| to use the Control window to mark a threat as âFixedâ so
bodyText ||| that TALC hides the graffiti. Figure 5 shows usersâ usage
bodyText ||| patterns of marking threats as fixed.
bodyText ||| A common pattern across all participants is that they tried
bodyText ||| to fix a number of vulnerabilities initially, following which
bodyText ||| there was a lull period with little or no activity; finally,
bodyText ||| several days later, there were more attempts to fix
bodyText ||| vulnerabilities. We believe this pattern indicates favorable
bodyText ||| acceptance on the part of users: rather than becoming
bodyText ||| infuriated with the notifications provided by TALC, users
bodyText ||| were âliving withâ the notifications for a period of several
bodyText ||| days, and then fixing them at convenient intervals. Users
bodyText ||| were able to put off patching anything for a couple of days,
bodyText ||| but were not allowed to forget about the security task to
bodyText ||| which they needed to attend. This indicates that the graffiti
bodyText ||| notification system worked well in allowing users to push
bodyText ||| back their lower priority (but necessary) security tasks until
bodyText ||| they were convenient, but while still retaining awareness of
bodyText ||| the need to perform these tasks. Furthermore, we believe
bodyText ||| the sudden flurry of activity near the end of the active week
figureCaption ||| Figure 5: Participants marking threats as âFixedâ.
figure ||| Awareness
figure ||| 1	2	3	4	5	6	7
figure ||| 80
figure ||| 70
figure ||| 60
figure ||| 50
figure ||| 40
figure ||| 30
figure ||| 20
figure ||| 10
figure ||| 0
figure ||| Days
figure ||| Learning
figure ||| 1	2	3	4	5	6	7
figure ||| 40
figure ||| 20
figure ||| 90
figure ||| 80
figure ||| 70
figure ||| 60
figure ||| 50
figure ||| 30
figure ||| 10
figure ||| 0
figure ||| Days Graffiti was shown
figure ||| Control (Fixed)
figure ||| 70
figure ||| 60
figure ||| 50
figure ||| 40
figure ||| 30
figure ||| 20
figure ||| 10
figure ||| 0
figure ||| 1	2	3	4	5	6	7
figure ||| Days Graffiti was shown
page ||| 1061
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
figureCaption ||| Figure 6: Threats that reappeared after being
bodyText ||| marked as âFixedâ by the participants.
bodyText ||| represents a periodic turn of attention toward patching,
bodyText ||| rather than a desire by participants to âwrap upâ patching
bodyText ||| before the end of the study. Much of this activity, for
bodyText ||| example, came from the condition two participants, who
bodyText ||| still had another week to participate in the study.
bodyText ||| In the subsequent scan cycles, TALC logged any of these
bodyText ||| fixed threats that still match the vulnerability description
bodyText ||| from NVD and logs them as a reappearance of a threat,
bodyText ||| shown in Figure 6.
bodyText ||| We should note here that, in our current implementation,
bodyText ||| threats for which the NVD has only an advisory (meaning:
bodyText ||| for which no patch is available) are never detected as fixed
bodyText ||| by TALC. To handle such a scenario, TALC allows the
bodyText ||| user to optionally ignore these threats that have reappeared.
bodyText ||| Threats that have been ignored will not reappear in the
bodyText ||| subsequent scans unless the user explicitly asks TALC to
bodyText ||| include them in the scan. Occurrences of this event are
bodyText ||| plotted in Figure 7. The spike near the start of the test may
bodyText ||| be due to the large number of vulnerabilities detected by
bodyText ||| TALC (see below for details on the number of raw
bodyText ||| vulnerabilities found on usersâ systems). These Ignore
bodyText ||| events were also recorded when participants found the
bodyText ||| information provided by the patch website too daunting for
bodyText ||| them, and chose to leave the vulnerability unpatched. We
bodyText ||| discuss some suggestions for how to overcome both these
bodyText ||| shortcomings in the Future Work section.
sectionHeader ||| DISCUSSION
bodyText ||| There are multiple useful metrics for determining what
bodyText ||| constitutes efficacy in a tool such as TALC. One such
bodyText ||| metric is whether the tool increases the perceived safety of
bodyText ||| users; the second is whether it increases their actual safety.
bodyText ||| While we evaluated for both metrics, we believe that the
bodyText ||| latter is actually the more important, since perceptions of
bodyText ||| increased safety are of little value without actually
bodyText ||| increased safety.
bodyText ||| In the sections below we first report on TALCâs efficacy in
bodyText ||| actually repairing system vulnerabilities, and then on usersâ
bodyText ||| perceptions of its efficacy.
figureCaption ||| Figure 7: Participants asking TALC to Ignore a
figureCaption ||| threat from subsequent scans
subsectionHeader ||| TALC Effectiveness
bodyText ||| We were pleased to find that TALC provided a dramatic
bodyText ||| increase in the safety of usersâ systems during its
bodyText ||| deployment, and that TALCâs notifications made a large
bodyText ||| and statistically significant difference in usersâ awareness
bodyText ||| and motivation to install patches.
bodyText ||| In the weeks where TALC was dormantâmeaning it was
bodyText ||| not drawing graffiti on the usersâ desktopsânone of the
bodyText ||| users patched any vulnerabilities whatsoever. However, in
bodyText ||| the week when the graffiti was placed on the desktop,
bodyText ||| seventy percent of the users fixed at least one vulnerability,
bodyText ||| with an average of 24.3 vulnerabilities patched per user
bodyText ||| (averaged over all users), and an average of 34.7
bodyText ||| vulnerabilities patched over users who patched at least one
bodyText ||| vulnerability. The number of vulnerabilities patched during
bodyText ||| the active period was found to be statistically significant
bodyText ||| (t(9) = 2.78, p = 0.0216) when compared to the dormant
bodyText ||| state when no vulnerabilities were patched.
bodyText ||| The absolute number of vulnerabilities patched may seem
bodyText ||| artificially high, because it does not necessarily indicate the
bodyText ||| number of fixes downloaded, but rather the number of
bodyText ||| vulnerabilities patched: A single fix downloaded by the
bodyText ||| user may or may not patch multiple vulnerabilities.
bodyText ||| At the beginning of the test, TALC found an average of
bodyText ||| 47.6 vulnerabilities on our participantsâ machines. All
bodyText ||| participantsâ computers had at least five vulnerabilities,
bodyText ||| with the most having 64 vulnerabilities. These numbers not
bodyText ||| only confirm the threat posed by unpatched software, but
bodyText ||| also usersâ lack of awareness about vulnerabilities on their
bodyText ||| systems for which patches exist.
bodyText ||| Although TALC was effective in getting users to fix some
bodyText ||| of the vulnerabilities in their systems, none of the users
bodyText ||| patched their machines completely. Of the 482
bodyText ||| vulnerabilities left unpatched, 208 (43.15%) were
bodyText ||| considered serious threats by the NVD, 88 (18.25%) were
bodyText ||| considered moderate threats by the NVD, and 186
bodyText ||| (38.59%) were considered mild threats. The total number of
bodyText ||| vulnerabilities increased over the test period in part due to
figure ||| Reappearances
figure ||| 2.5
figure ||| 2
figure ||| 1.5
figure ||| 1
figure ||| 0.5
figure ||| 0
figure ||| 1	2	3	4	5	6	7
figure ||| Days Grafitti was shown
figure ||| Control (Ignore)
figure ||| 70
figure ||| 1	2	3	4	5	6	7
figure ||| 40
figure ||| 20
figure ||| 60
figure ||| 50
figure ||| 30
figure ||| 10
figure ||| 0
figure ||| Days Graffiti was shown
page ||| 1062
note ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
bodyText ||| new software being installed by our test subjects, but
bodyText ||| mostly due to updates in the vulnerability listing from the
bodyText ||| NVD. 50% of the users responded that it was very difficult
bodyText ||| to correct the security vulnerabilities reported by TALC,
bodyText ||| which we attribute to the poor usability of many of the web
bodyText ||| pages supplied by the NVD. In addition, sometimes the
bodyText ||| links provided in the NVD data were not valid. Further
bodyText ||| discussion can be found in the Future Work section below.
subsectionHeader ||| User Perce ptions
bodyText ||| One of the goals of TALC was to experiment with gentle
bodyText ||| reminder functions to motivate users to take security
bodyText ||| actions. In the post-test questionnaire, when asked to
bodyText ||| suggest improvements to the program, thirty-three percent
bodyText ||| of the participants suggested various solutions for making
bodyText ||| the graffiti less invasive. However, our goal was to make
bodyText ||| TALC as motivating as possible, without being overly
bodyText ||| annoying (which could have caused users to disable the
bodyText ||| program entirely). A majority (67%) of users raised no
bodyText ||| issue with intrusiveness; further, we find it to be telling that
bodyText ||| the only user who reported disabling the TALC software
bodyText ||| during the test did so because he felt it was slowing his
bodyText ||| system down too much. The implementation of our
bodyText ||| Visualization module uses the default.NET transparency
bodyText ||| effects, which run on the CPU on systems without modern
bodyText ||| graphics cards, so this may have contributed to the
bodyText ||| problem.
bodyText ||| Finally, with regard to the effect of TALC on perceived
bodyText ||| user safety, we found that four of the seven users who
bodyText ||| responded to the post-study questionnaire felt that using
bodyText ||| TALC had improved their ability to protect their computer,
bodyText ||| and that their computer was safer as a result. Although this
bodyText ||| figure does not represent universal success in increasing
bodyText ||| perceived safety, we were delighted to demonstrate any
bodyText ||| increase, since our pre-test questionnaire showed users
bodyText ||| were generally unaware of any vulnerabilities. We believe
bodyText ||| that this sort of awareness of risk is essential for self-
bodyText ||| managed computers (at least given todayâs state-of-the-art
bodyText ||| in automated security systems), and points to necessary
bodyText ||| further work in the area of conveying an accurate sense of
bodyText ||| risk or safety to users.
subsectionHeader ||| Future Work
bodyText ||| Our near-term goals concern both expanding the
bodyText ||| capabilities of the TALC framework, as well as evaluating
bodyText ||| with a larger user base on how well our visualization and
bodyText ||| control features motivate and support users to mitigate
bodyText ||| threats.
bodyText ||| One of the common problems encountered by users was the
bodyText ||| complexity of vendorsâ update websites. To address this
bodyText ||| issue, we intend to add another level of proactivity in the
bodyText ||| system, to allow TALC to automatically download and
bodyText ||| install patches from a set of âcommonâ websites, the patch
bodyText ||| processes of which can be built into the tool itself. With
bodyText ||| this addition, TALC would only present instructional web
bodyText ||| pages for late-breaking advisories that do not include a
bodyText ||| direct download link to a software patch. This feature can
bodyText ||| be accompanied by an additional layer of abstraction over
bodyText ||| the patch websites that simply asks the user to update their
bodyText ||| software to the latest version without loading the entire
bodyText ||| website containing specific details of the threat.
bodyText ||| To prevent display of âunfixableâ problems (such as
bodyText ||| advisories that do not have valid URLs), we intend to filter
bodyText ||| the advisories for common problems, and never show
bodyText ||| graffiti for the vulnerabilities reported.
bodyText ||| We also intend to add several more information sources to
bodyText ||| the program, to exercise the extensibility features described
bodyText ||| in the Implementation section. Most important among these
bodyText ||| are the creation of modules that integrate a number of
bodyText ||| existing security tools, such as NMAP [12] and Nessus [8],
bodyText ||| to extract data about other sorts of system vulnerabilities.
bodyText ||| Specifically, we plan to use NMAP (a port scanning tool)
bodyText ||| to independently audit the userâs firewall, since properly
bodyText ||| configured firewalls are very effective at blocking many
bodyText ||| automated attacks. Nessus is a tool that performs security
bodyText ||| audits by running exploit code against a userâs computer. It
bodyText ||| has an active development base that releases new exploits
bodyText ||| to be used while auditing.
sectionHeader ||| CONCLUSION
bodyText ||| We have presented TALC, a software system that assists
bodyText ||| users in protecting their computers from some of the most
bodyText ||| serious threats on the Internet, software with known
bodyText ||| vulnerabilities. TALC uses a low-intrusion notification
bodyText ||| mechanism for presenting users with information about
bodyText ||| vulnerabilities. Through the use of automated system audits
bodyText ||| and correlation against online databases, we can detect
bodyText ||| potential software vulnerabilities and give users easier
bodyText ||| mechanisms to act to repair those vulnerabilities. The
bodyText ||| extensible architecture of TALC allows it to be used to
bodyText ||| detect, visualize, and mitigate against a wide range of
bodyText ||| threats.
bodyText ||| More generally, we believe that the approach taken by
bodyText ||| TALC may be useful in cases where 1) user motivation for
bodyText ||| a task may be low (as is often the case with security tasks),
bodyText ||| 2) intrusive or disruptive notifications may actually incent
bodyText ||| users to disable the system, and 3) there is not the need for
bodyText ||| immediate action. This combination of factors makes this
bodyText ||| class of tasks somewhat different from others (such as
bodyText ||| firewalls or background email notification) that have been
bodyText ||| widely studied in our community. We believe that the
bodyText ||| strategy of background notifications that strike a balance
bodyText ||| between awareness and annoyance to gently incent the user
bodyText ||| can be profitably applied to this class of problems.
sectionHeader ||| REFERENCES
reference ||| 1. Bailey, B.P., Konstan, J.A. and Carlis, J. V. (2001) The
reference ||| effects of interruptions on task performance,
reference ||| annoyance, and anxiety in the user interface.
reference ||| Proceedings ofINTERACT â01, pp. 593-601.
reference ||| 2. Bennett, R. and Flavin, J. âDeterminants of Fear of
reference ||| Crime: The Effect of Cultural Setting.â Justice
reference ||| Quarterly, 11:3, September 1994, pp. 357-381.
reference ||| 3. BMC Software. Marimba Patch Management
reference ||| Software, http://www.marimba.com/
reference ||| 1063
reference ||| CHI 2008 Proceedings Â· Am I Safe	April 5-10, 2008 Â· Florence, Italy
reference ||| 4. Bowling, A., Barber, J., Morris, R., and Ebrahim, S.
reference ||| ÃDo Perceptions of Neighbourhood Environment
reference ||| Influence Health? Baseline Findings from a British
reference ||| Survey of Aging.â Journal of Epidemioogy and
reference ||| Community Health, 60:476-483.2006.
reference ||| 5. Computer Emergency Response Team (CERT), 2006.
reference ||| CERT/CC	Statistics	1988-2006.
reference ||| http://www.cert.org/stats
reference ||| 6. Cooke, E., Jahanian, F., and McPherson, D. The
reference ||| Zombie Roundup: Understanding, Detecting and
reference ||| Disrupting Botnets, in First Workshop on Steps to
reference ||| Reducing Unwanted Traffic on the Internet (SRUTI),
reference ||| 2005.
reference ||| 7. Cowan, C., Wagle, P., and Pu, C. Buffer Overflows:
reference ||| Attacks and Defenses for the Vulnerability of the
reference ||| Decade,	DARPA	Information	Survivability
reference ||| Conference and Expo, 1999.
reference ||| 8. Deraison, R. Nessus - A Comprehensive Vulnerability
reference ||| scanning program, http://www.nessus.org/, 1998.
reference ||| 9. Dourish, P., Redmiles, D. , An approach to usable
reference ||| security based on event monitoring and visualization.
reference ||| In Proceedings of the New Security Paradigms
reference ||| Workshop (NSPW), 2002. pp. 75-81.
reference ||| 10. Edwards, W.K., Poole, E.S., and Stoll, J. Security
reference ||| Automation Considered Harmful? In Proceedings of
reference ||| the New Security Paradigms Workshop (NSPW), White
reference ||| Mountain, New Hampshire. September 18-21, 2007.
reference ||| 11. Ferrell, J. Crimes of Style: Urban Graffiti and the
reference ||| Politics of Criminality. New York: Garland. 1993.
reference ||| 12. Fyodor. Nmap - Free Security Scanner for Network
reference ||| Exploration and Security Audits, Insecure.org, 1997.
reference ||| 13. Geason, S. âPreventing Graffiti and Vandalism.â
reference ||| Proceedings of Designing Out Crime: Crime
reference ||| Prevention through Environmental Design, Sydney,
reference ||| Australia. June 16, 1989.
reference ||| 14. Ianelli, N., and Hackworth, A. Botnets as a Vehicle for
reference ||| Online Crime, CERT, Request for Comments (RFC)
reference ||| 1700, December 2005.
reference ||| 15. Isbell, C. and Pierce, J. An IP Continuum for Adaptive
reference ||| Interface Design. In Proceedings of HCI International,
reference ||| 2005.
reference ||| 16. LaMacchia, B.A. Security Attacks and Defenses, in
reference ||| 47th Meeting of IFIP WG 10.4.2005.
reference ||| 17. McAfee AVERT Labs. SAGE. Security Vision from
reference ||| McAfee AVERT Labs, July 2006.
reference ||| 18. McCrickard, D. S., Chewar, C. M., Somervell, J. P., &amp;
reference ||| Ndiwalana, A. A Model for Notification Systems
reference ||| EvaluationâAssessing User Goals for Multitasking
reference ||| Activity. ACM Transactions on Computer-Human
reference ||| Interaction (TOCHI), 10 (4), 2003.
reference ||| 19. Merijn. HijackThis .
reference ||| http://www.spywareinfo.com/~merijn/programs.php.
reference ||| 20. Microsoft. Manage Your Computer&apos;s Security Settings
reference ||| in	One	Place	with	Security	Center,
reference ||| http://www.microsoft.com/windowsxp/using/security/i
reference ||| nternet/sp2_wscintro.mspx.
reference ||| 21. Microsoft. Programs that are known to experience a
reference ||| loss of functionality when they run on a Windows XP
reference ||| Service	Pack	2-based	computer,
reference ||| http://support.microsoft.com/?id=884130.
reference ||| 22. Morin, K., Hayes, E., Carroll, M., and Chamberlain, B.
reference ||| âSelected Factors Associated with Studentsâ
reference ||| Perceptions of Threat in the Community.â Public
reference ||| Health Nursing, 19:6, pp. 451-459, Nov. 2002
reference ||| 23. Moskowitz, C.L.a.C. Simple Desktop Security with
reference ||| Chameleon. in Lorrie Faith Cranor, S.G. ed. Security
reference ||| and Usability, O&apos;Reilly, August 2005.
reference ||| 24. National Institute of Standards and Technology
reference ||| (NIST).	National	Vulnerability	Database,
reference ||| http://nvd.nist.gov.
reference ||| 25. National Institute of Standards and Technology
reference ||| (NIST), 2002. The economic impacts of inadequate
reference ||| infrastructure for software testing. Technical Report
reference ||| 02-3, May 2002. This report estimates damage from
reference ||| attacks exploiting software vulnerabilities at $60
reference ||| billion/year.
reference ||| 26. Rafail, J. Cross-Site Scripting Vulnerabilities, CERT
reference ||| Coordination Center, 2001.
reference ||| 27. Redstrom, J., Skog, T. and Hallnas, L. Informative Art:
reference ||| Using Amplified Artworks as Information Displays, in
reference ||| Proceedings of the Designing Augmented Reality
reference ||| Environments Conference â00, (Elsinore Denmark,
reference ||| 2000), 103 Ã114.
reference ||| 28. Symantec Internet Security Threat Report, Volume IX.
reference ||| www.symantec.com/enterprise/threatreport/index.jsp.
reference ||| 29. US General Accounting Office (GAO), 2003.
reference ||| &quot;Effective Patch Management is Critical to Mitigating
reference ||| Software Vulnerabilities.&quot; Testimony before the
reference ||| Subcommittee on Technology, Information Policy,
reference ||| Intergovernmental Relations, and the Census.
reference ||| 30. Zurko, M.E. User-Centered Security: Stepping Up to
reference ||| the Grand Challenge ACSAC, 2005.
page ||| 1064
