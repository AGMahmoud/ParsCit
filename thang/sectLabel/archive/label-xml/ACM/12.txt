title ||| A Geometric Constraint Library for |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_begin xmlFontSize_largest-1 xmlFontSizeChange_begin xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
title ||| 3D Graphical Applications |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-1 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
author ||| Hiroshi Hosobe |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
affiliation ||| National Institute of Informatics |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
address ||| 2-1-2 Hitotsubashi, Chiyoda-ku, Tokyo 101-8430, Japan |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
email ||| hosobe@nii.ac.jp |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| ABSTRACT |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Recent computer technologies have enabled fast high-quality |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| 3D graphics on personal computers, and also have made |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the development of 3D graphical applications easier. How- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ever, most of such technologies do not sufficiently support |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| layout and behavior aspects of 3D graphics. Geometric con- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straints are, in general, a powerful tool for specifying layouts |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| and behaviors of graphical objects, and have been applied |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to 2D graphical user interfaces and specialized 3D graph- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ics packages. In this paper, we present Chorus3D, a geo- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| metric constraint library for 3D graphical applications. It |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| enables programmers to use geometric constraints for vari- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ous purposes such as geometric layout, constrained dragging, |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| and inverse kinematics. Its novel feature is to handle scene |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| graphs by processing coordinate transformations in geomet- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ric constraint satisfaction. We demonstrate the usefulness of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D by presenting sample constraint-based 3D graph- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ical applications. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| Keywords |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
keyword ||| geometric constraints, constraint satisfaction, geometric lay- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
keyword ||| out, 3D graphics, scene graphs |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 1. INTRODUCTION |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Recent advances in commodity hardware have enabled fast |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| high-quality 3D graphics on personal computers. Also, soft- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ware technologies such as VRML and Java 3D have made the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| development of 3D graphical applications easier. However, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| most of such technologies mainly focus on rendering aspects |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| of 3D graphics, and do not sufficiently support layout and |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| behavior aspects. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Constraints are, in general, a powerful tool for specifying |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| layouts and behaviors of graphical objects. It is widely |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| recognized that constraints facilitate describing geometric |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| layouts and behaviors of diagrams in 2D graphical user in- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| terfaces such as drawing editors, and therefore constraint |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| solvers for this purpose have been extensively studied [3, 7, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
copyright ||| Permission to make digital or hard copies of all or part of this work for |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
copyright ||| personal or classroom use is granted without fee provided that copies are |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
copyright ||| not made or distributed for profit or commercial advantage and that copies |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
copyright ||| bear this notice and the full citation on the first page. To copy otherwise, to |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
copyright ||| republish, to post on servers or to distribute to lists, requires prior specific |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
copyright ||| permission and/or fee. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
note ||| Int. Symp. on Smart Graphics, June 11-13, 2002, Hawthorne, NY, USA. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
note ||| Copyright 2002 ACM 1-58113-555-6/02/0600...$5.00 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| 8, 9, 11, 12, 13, 17, 18]. Also, many specialized 3D graph- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ics packages enable the specification of object layouts and |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| behaviors by using constraints or similar functions. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| It is natural to consider that various 3D graphical applica- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tions can also be enhanced by incorporating constraints. It |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| might seem sufficient for this purpose to modify existing 2D |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| geometric constraint solvers to support 3D geometry. It is, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| however, insufficient in reality because of the essential dif- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ference between the ways of specifying 2D and 3D graphics; |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| typical 2D graphics handles only simple coordinate systems, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| whereas most 3D graphics requires multiple coordinate sys- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tems with complex relations such as rotations to treat scene |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| graphs. It means that we need to additionally support coor- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| dinate transformations in 3D geometric constraint solvers. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In this paper, we present Chorus3D, a geometric constraint |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| library for 3D graphical applications. The novel feature of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D is to handle scene graphs by processing coordi- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| nate transformations in geometric constraint satisfaction. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We have realized Chorus3D by adding this feature to our |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| previous 2D geometric constraint library Chorus [13]. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Another important point of Chorus3D is that it inherits from |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus the capability to handle “soft” constraints with hier- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| archical strengths or preferences (i.e., constraint hierarchies |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| [7]), which are useful for specifying default layouts and be- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| haviors of graphical objects. It determines solutions so that |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| they satisfy as many strong constraints as possible, leaving |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| weaker inconsistent constraints unsatisfied. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D also inherits from Chorus a module mechanism |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| which allows user-defined kinds of geometric constraints. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| This feature enables programmers to use geometric con- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straints for various purposes including the following: |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Geometric layout: A typical use of Chorus3D is to lay |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| out graphical objects. For example, it allows putting |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| objects parallel or perpendicular to others without re- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| quiring predetermined positioning parameters. Also, it |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| provides constraint-based general graph layout based |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| on the spring model [14]. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Constrained dragging: Chorus3D enables dragging ob- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| jects with positioning constraints. For example, it |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| can constrain a dragged object to be on the surface |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| of a sphere. Constrained dragging is important for 3D |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| graphics because it provides a sophisticated way to ac- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
page ||| 94 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Translation: A translation transformation is characterized |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| with three variables tx, tr, and tz, and specifies the |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| translation of vector (tx,tr, tz). |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Rotation: A rotation transformation is parameterized with |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| four variables rx, rr, rz, and rw, and specifies the ro- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| tation of angle rw about the axis (rx, rr, rz). |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Scale: A scale transformation is represented with three |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| variables sx, sr, and sz, and specifies the axis-wise |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| scale (sx, sr, sz) about the origin. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We can express many practically useful transformations by |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| using such elemental ones. In fact, any transformations rep- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| resented with Transform nodes in VRML can be realized by |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| combining these kinds of transformations [4]. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 3. CONSTRAINT FRAMEWORK |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In this section, we briefly describe our framework for han- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| dling constraints. We base it on the framework for the 2D |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| version of the Chorus constraint solver. See [13] for further |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| detail. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
subsectionHeader ||| 3.1 Problem Formulation |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We first present the mathematical formulation for modeling |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraints and constraint systems. In the following, we |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| write x to represent a variable vector (x1, x2, ... , xn) of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| n variables, and also v to indicate a variable value vector |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| (v1, v2, ... , vn) of n real numbers (vi expresses the value of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| xi). |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| To support various geometric constraints in a uniform man- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ner, we adopt error functions as a means of expressing con- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straints. An error function e(x) is typically associated with |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| a single arithmetic constraint, and is defined as a func- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tion from variable value vectors to errors expressed as non- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| negative real numbers; that is, e(v) gives the error of the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| associated constraint for v. An error function returns a zero |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| if and only if the constraint is exactly satisfied. For example, |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| e(x) = (xi — xj)2 can be used for the constraint xi = xj. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We assume that, for each e(x), its gradient is known: |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| De(x) =	�ae(x) ae(x) ae(x) ax1,ax2 ,...,axn ) |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
bodyText ||| In the same way as constraint hierarchies [7], constraint sys- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tems in our framework can be divided into levels consisting |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| of constraints with equal strengths. Constraints with the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| strongest preference are said to be required (or hard), and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| are guaranteed to be always satisfied (if it is impossible, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| there will be no solution). By contrast, constraints with |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| weaker preferences are said to be preferential (or soft), and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| may be relaxed if they conflict with stronger constraints. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Solutions to constraint systems are defined as follows: let |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ei,j(x) be the error function of the j-th constraint (1 &lt; j &lt; |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| mi) at strength level i (0 &lt; i &lt; l); then solutions v are |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| determined with the optimization problem |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| minimize	E(v) subject to e0,j (v) = 0 (1 &lt; j &lt; m0) |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
none ||| v	 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
bodyText ||| commodate ordinary mouse dragging to 3D spaces. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Inverse kinematics: Chorus3D is applicable to inverse |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| kinematics, which is a problem of finding desired con- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| figurations of “articulated” objects [1, 20]. It allows |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the specification of articulated objects by using coor- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| dinate transformations, and can automatically calcu- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| late the parameters of the transformations that satisfy |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraints. This method is also applicable to camera |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| control by aiming at a possibly moving target object. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In this paper, we demonstrate the usefulness of Chorus3D |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| by presenting sample constraint-based 3D graphical appli- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| cations. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| This paper is organized as follows: We first present our ap- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| proach to the use of constraints for 3D graphics. Second, |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| we describe our basic framework of constraints. Next, we |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| present a method for processing coordinate transformations |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| in our framework. We then provide the implementation of |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D, and demonstrate examples of using constraints |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| in 3D graphics. After giving related work and discussion, we |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| mention the conclusions and future work of this research. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 2. OUR APPROACH |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In this research, we integrate geometric constraints with 3D |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| graphics. Basically, we realize this by extending our previ- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ous 2D geometric constraint solver Chorus [13] to support |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| 3D geometry. However, as already mentioned, it is not a |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straightforward task because 3D graphics typically requires |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| handling scene graphs with hierarchical structures of coor- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| dinate systems, which is not covered by the 2D version of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the Chorus constraint solver. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| To support hierarchies of coordinate systems, we introduce |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the following new model of constraints: |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Point variables: Each point variable (which consists of |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| three real-valued constrainable variables) is associated |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| with one coordinate system, and its value is expressed |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| as local coordinates. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Geometric constraints: Geometric constraints on point |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| variables are evaluated by using the world coordinates |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| of the point variables (they can also refer to 1D vari- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| ables for, e.g., distances and angles by using their val- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| ues directly). A single constraint can refer to point |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| variables belonging to different coordinate systems. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| Coordinate transformations: Parameters of coordinate |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| transformations are provided as constrainable vari- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| ables, and the solver is allowed to change the param- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| eters of transformations to appropriately satisfy given |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listItem ||| constraints. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| With this model, we can gain the benefit of the easy mainte- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| nance of geometric relations by using constraints, as well as |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the convenience of modeling geometric objects by employing |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| scene graphs. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In our actual implementation, we provide the following three |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| elemental kinds of coordinate transformations: |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
page ||| 95 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| where E is an objective function defined as |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| wiei,j (x) |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| in which wi indicates the weight associated with strength i, |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| and the relation w1 » w2 » . . . » wl holds. In this formu- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| lation, level 0 corresponds to required constraints, and the |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| others to preferential ones. Intuitively, more weighted (or |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| stronger) preferential constraints should be more satisfied. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Our framework simulates constraint hierarchies. Particu- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| larly, if the squares of constraint violations are used to com- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| pute error functions, a system in our framework will obtain |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| approximate solutions to the similar hierarchy solved with |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the criterion least-squares-better [3, 17]. The largest differ- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ence is that a system in our framework slightly considers a |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| weak constraint inconsistent with a stronger satisfiable one |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| in computing its solutions, while the similar hierarchy would |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| discard such a weak one. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Our actual implementation of the Chorus3D constraint |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| solver provides four external strengths required, strong, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| medium, and weak as well as two internal strengths very |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| strong (used to approximately handle required nonlinear |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| or inequality constraints) and very weak (exploited to make |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| new solutions as close to previous ones as possible). It typ- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ically assigns weights 324, 323, 322, 321, and 1 to strengths |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| very strong, strong, medium, weak, and very weak respec- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tively. These weights were determined according to the pre- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| cision of the actual numerical algorithm (described in the |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| next subsection). To know how much these weights affect |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| solutions, suppose a system of strong constraint x = 0 and |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| medium one x = 100. Then the unique solution will be ob- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tained as x = 3.0303 . . . (= 100/33). Thus the difference of |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| strengths is obvious. According to our actual experience, |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| this precision allows us to discriminate constraint strengths |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| in most graphical applications. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
subsectionHeader ||| 3.2 Algorithm |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| To actually find solutions to constraint systems presented |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| above, we need to solve their corresponding optimization |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| problems. For this purpose, we designed a constraint sat- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| isfaction algorithm by combining a numerical optimization |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| technique with a genetic algorithm. It uses numerical op- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| timization to find local solutions, while it adopts a genetic |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| algorithm to search for global solutions. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| For numerical optimization, we mainly use the quasi-Newton |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| method based on Broyden-Fletcher-Goldfarb-Sahnno updat- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ing formula [2, 6], which is a fast iterative technique that |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| exhibits superlinear convergence. Since it excludes fruit- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| less searches by utilizing its history, it is usually faster than |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straightforward Newton’s method. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We introduced a genetic algorithm to alleviate the problem |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| that some kinds of geometric constraints suffer from local op- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| timal but global non-optimal solutions [11, 16]. Generally, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| a genetic algorithm is a stochastic search method that re- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| peatedly transforms a population of potential solutions into |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| another next-generation population [10, 15]. We typically |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| necessitate it only for computing initial solutions; in other |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| words, we can usually re-solve modified constraint systems |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| without the genetic algorithm, only by applying numerical |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| optimization to previous solutions. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 4. PROCESSING COORDINATE |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| TRANSFORMATIONS |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In this section, we propose a method for integrating coordi- |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| nate transformations with our constraint framework. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| As already mentioned, we use world coordinates of points |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to evaluate 3D geometric constraints. A naive method for |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| this is to duplicate point variables in all ancestor coordinate |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| systems, and then to impose required constraints that rep- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| resent coordinate transformations between the point vari- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ables. However, this method requires an optimization rou- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tine supporting required nonlinear constraints, which lim- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| its the availability of actual techniques (in fact, we cannot |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| use the quasi-Newton method for this purpose). Also, this |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| method tends to yield many variables and constraints, and |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| therefore requires an extra amount of memory. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Below we propose a more widely applicable method for han- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| dling coordinate transformations. Its characteristic is to |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| hide transformations from optimization routines, which is |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| realized by embedding transformations in error functions. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
subsectionHeader ||| 4.1 Model |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| To begin with, we introduce another variable vector x&apos; = |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| (x&apos;1, x&apos;2, ... ,x&apos; n), which is created by replacing variables for |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| local coordinates of 3D points in x with the corresponding |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ones for world coordinates (1D variables remain the same). |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We can mathematically model this process as follows: Con- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| sider the sequence of the s transformations |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| t0	t1	s 2	ts 1 |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
equation ||| y0 (= x)� y1 �... t y3-1 —� y3 (= x&apos;) |XML| xmlLoc_4 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| where y0 and y3 are equal to x and x&apos; respectively, each |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| yk (1 &lt; k &lt; s — 1) is an “intermediate” vector, and each tk |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| (0 &lt; k &lt; s — 1) is a function that transforms yk into yk+1. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Intuitively, tk corresponds to a coordinate transformation, |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| and transforms related point variables from its source co- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ordinate system into its destination system. It should be |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| noted that, although transformations are, in general, hier- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| archical (or tree-structured), we can always find such a linear |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| sequence by “serializing” them in an appropriate order. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| By using such transformations, we can compute x&apos; as fol- |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| lows: |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| x&apos; = t3-1(t3-2(...(t1(t0(x))) ... )) = t(x) |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| where t is defined as the composition of all the elemental |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| transformations. In the following description, we write yk,i |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to denote the i-th element of yk, and also tk,i to represent |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the i-th element of tk; that is, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| yk+1 = (yk+1,1 , yk+1,2, ... , yk+1,n) |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| = (tk,1(yk),tk,2(yk), ..., tk,n(yk)) = tk(yk). |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
subsectionHeader ||| 4.2 Method |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Geometric constraints are evaluated by using world coordi- |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| nates of points, which means that their error functions are |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| Mi |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| E |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest0 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| j=1 |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| E(x) = |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| �l |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| i=1 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
page ||| 96 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| defined as e(x&apos;). Using the composed transformations, we	parameter of the coordinate transformation), we have |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| can evaluate them as	yk,i = xi, which means that we have atk,j(yk)/axi. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| e(x&apos;) = e(t(x)).	Therefore, we can compute ae(x&apos;)/axi immediately. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes
bodyText ||| Importantly, we can efficiently realize this computation by |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| applying only necessary transformations to actually used |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| variables. |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We also need to compute the gradient of e(t(x)), i.e., |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| �ae(t(x)) ae(t(x)) ae(t(x))  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ax1 , ax2 , ..., axn ) . |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Basically, we can decompose each partial derivative |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ae(t(x))/axi into primitive expressions by repeatedly us- |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ing the chain rule. However, we should avoid the simple |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| application of the chain rule since it would result in a large |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| number of expressions. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Instead, we perform a controlled way of decomposing such |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| partial derivatives; it appropriately arranges the chain rule |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to restrict the computation to only necessary components. |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| First, we decompose ae(t(x))/axi as follows: |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ats-1,j,(ys-1) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(x&apos;)	ats-1,j,(ys-1)ats-2,js_1(ys-2) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axj,Eays-1,js_1	axi |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| js_1 |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
equation ||| ats-2,js_1(ys-2) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(x&apos;) ats-2,js_1(ys-2) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ays-1,js_1	axi	. |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Note that each ae(x&apos;)/ax&apos;j, is given by the defini- |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tion of the geometric constraint, and also that each |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ats-1,j,(ys-1)/ays-1,js_1 is a partial derivative in the gra- |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| dient of a single coordinate transformation ts-1. Thus we |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| can obtain each ae(x&apos;)/ays-1 ,js_1. Also, by repeating this |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| process, we can compute, for each k, |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| atk-1,jk (yk-1) |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| and finally achieve |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(t(x)) |XML| xmlLoc_5 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_5 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| where each at0,j1(x)/axi is a component of the gradient of |XML| xmlLoc_5 xmlAlign_right xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| t0. Therefore, ae(t(x))/axi is now determined. |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Furthermore, we can considerably reduce the number of the |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| computations of ae(x&apos;)/ayk,jk in practice. We can make the |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| following observations about the above computation: |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| 9 For each variable xj,, ae(x&apos;)/ax&apos;j, can be non-zero only |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| if xj,is actually needed to evaluate the designated con- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straint. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| 9 If xi is originated in the coordinate system associated |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| with tk (that is, xi is either a local coordinate or a |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| These observations reveal that we need to transfer a partial |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| derivative ae(x&apos;)/ayk,j to the next step only when xj rep- |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| resents a really necessary coordinate that has not reached |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| its local coordinate system. Also, since we can handle each |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| necessary point independently, we can implement this pro- |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| cess with a linear recursive function that hands over only |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| three derivatives ae(x&apos;)/ayk,j at each recursive call. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 5. IMPLEMENTATION |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
bodyText ||| We implemented the proposed method by developing a con- |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straint solver called Chorus3D, which is a 3D extension to |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| our previous 2D geometric constraint solver Chorus [13]. We |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constructed Chorus3D as a C++ class library, and also de- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| veloped a native method interface to make it available to |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Java programs. |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D allows programmers to add a new kind of arith- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| metic constraints (e.g., Euclidean geometric constraints) by |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constructing a new constraint class with a method that eval- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| uates their error functions. Also, programmers can intro- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| duce a new kind of non-arithmetic (or pseudo) constraints |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| (for, e.g., general graph layout) by developing a new evalua- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tion module which computes an “aggregate” error function |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| for a given set of constraints. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D currently provides linear equality, linear inequal- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ity, edit (update a variable value), stay (fix a variable value), |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Euclidean geometric constraints (for, e.g., parallelism, per- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| pendicularity, and distance equality), and graph layout con- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straints based on the spring model [14]. Linear equality/ |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| inequality constraints can refer to only 1D variables (includ- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ing elements of 3D point variables), while edit and stay con- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straints can be associated with 1D and 3D point variables. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Euclidean geometric constraints typically refer to point vari- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ables although they sometimes require 1D variables for an- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| gles and distances. Each graph layout constraint represents |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| a graph edge, and refers to two point variables as its asso- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ciated graph nodes. As stated earlier, constraints on such |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| point variables are evaluated by using world coordinates of |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the points. Also, a single constraint can refer to point vari- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ables belonging to different coordinate systems. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| The application programming interface of Chorus3D is a |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| natural extension to that of Chorus, which provides a certain |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| compatibility with a recent linear solver called Cassowary |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| [3]; in a similar way to Cassowary and Chorus, Chorus3D |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| allows programmers to process constraint systems by cre- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ating variables and constraints as objects, and by adding/ |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| removing constraint objects to/from the solver object. In |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| addition, Chorus3D handles coordinate transformations as |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| objects, and presents an interface for arranging them hier- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| archically. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 6. EXAMPLES |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
bodyText ||| In this section, we present three examples to demonstrate |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| how to incorporate geometric constraints into 3D graphics |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| by using the Chorus3D constraint solver. All the examples |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| are implemented in Java by using Java 3D as a graphics |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
equation ||| De(t(x)) = |XML| xmlLoc_1 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(t(x)) |XML| xmlLoc_2 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| =E |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| j, |XML| xmlLoc_2 xmlAlign_right xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(x&apos;) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ax&apos;j, |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| =E |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| j, |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes
equation ||| = E |XML| xmlLoc_3 xmlAlign_right xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| js_1 |XML| xmlLoc_3 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| = E |XML| xmlLoc_3 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| js_1 |XML| xmlLoc_4 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| I |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ats1,j, (ys-1) |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(x&apos;) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| E |XML| xmlLoc_3 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ays-1,js_1 |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| j, |XML| xmlLoc_3 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ax&apos;j, |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| I |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| ae(t(x)) |XML| xmlLoc_4 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| =E	ae(x&apos;) |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
equation ||| jk	 |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
equation ||| 	ayk,jk |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
equation ||| =E	ae(x&apos;) |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
equation ||| j1	 |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
equation ||| 	ay1,j1 |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| at0,j1(x) |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
equation ||| axi |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
page ||| 97 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figureCaption ||| Figure 1: A 3D geometric layout of a general graph |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figureCaption ||| structure. |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figureCaption ||| Figure 2: Dragging an object constrained to be on |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figureCaption ||| a sphere. |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| programming interface as well as the native method interface |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| with Chorus3D. We also provide computation times taken |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| for constraint satisfaction in these examples. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
subsectionHeader ||| 6.1 Graph Layout |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| The first example is an application which lays out a set |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| of points with a general graph structure in a 3D space as |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| shown in Figure 1. This application also allows a user to |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| drag graph nodes with a mouse.&apos; The used graph layout |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| technique is based on a 3D extension to the spring model |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| [14]. This kind of 3D graph layout is practically useful to |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| information visualization, and has actually been adopted in |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| a certain system [19]. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| The constraint system of this graph layout consists of 26 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| point variables (i.e., 78 real-valued variables), 31 graph lay- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| out constraints, and three linear equality constraints for fix- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ing one of the point variables at the origin. When executed |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| on an 866 MHz Pentium III processor running Linux 2.2.16, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D obtained an initial solution in 456 milliseconds. It |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| performed constraint satisfaction typically within 250 mil- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| liseconds to reflect the user’s dragging a graph node. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
subsectionHeader ||| 6.2 Constrained Dragging |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| The second example is an application which allows a user |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to drag an object constrained to be on another spherical |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| object. Figure 2 depicts this application, where the smaller |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| solid spherical object is constrained to be on the surface of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the larger wireframe one. The application declares a strong |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Euclidean geometric constraint which specifies a constant |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| distance between the centers of these objects. When the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| user tries to drag the smaller object with a mouse, the appli- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| cation imposes another medium Euclidean constraint which |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| collinearly locates the viewpoint, the 3D position of the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| mouse cursor (which is considered to be on the screen), and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
footnote ||| &apos;Unlike constrained dragging in the next example, this |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
footnote ||| mouse operation is simply implemented with Java 3D’s |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
footnote ||| PickMouseBehavior classes. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
footnote ||| Sphere |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figureCaption ||| Figure 3: Implementation of constrained dragging. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the center of the dragged object as shown in Figure 3. This |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| collinearity constraint reflects the motion of the mouse in |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the position of the dragged object. Since the collinearity |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraint is weaker than the first Euclidean constraint, the |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| user cannot drag the smaller object to the outside of the |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| larger sphere. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| The application initially declares one Euclidean geometric |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraint on two point variables, and solved it in 1 mil- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| lisecond on the same computer as the first example. When |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the user tries to drag the smaller object, it adds another |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Euclidean constraint as well as two edit constraints for the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| viewpoint and mouse position. The solver maintained this |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraint system usually within 2 milliseconds. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
subsectionHeader ||| 6.3 Inverse Kinematics |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| The final example applies inverse kinematics to a virtual |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| robot arm by using constraints. Unlike the previous ex- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| amples, it takes advantage of coordinate transformations to |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| express its constraint system. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| Mouse cursor which |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| is on the screen |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| Viewpoint |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| Distance |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| constraint |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| Collinearity |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| constraint |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| Object which is on |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| the sphere surface |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| Screen |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
page ||| 98 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| (a)	(b)	(c) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figureCaption ||| Figure 4: A robot arm application which performs inverse kinematics. |XML| xmlLoc_4 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| (d)	(e)	(f) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| As illustrated in Figure 4(a), the robot arm consists of four |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| parts called a base, a shoulder, an upper arm, and a forearm. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Constraint satisfaction for inverse kinematics is performed |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to position its hand (the end of the forearm) at the target |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| object if possible, or otherwise to make it maximally close |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to the target. Figures 4(b)–(f) show the movement of the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| robot arm. In Figures 4(b)–(e), its hand is positioned at |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the exact location of the target by using appropriate angles |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| of its joints. By contrast, in Figure 4(f), the hand cannot |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| reach the target, and therefore the arm is extended toward |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the target instead. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Figure 5 describes the constraint program used in the robot |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| arm application. After constructing a constraint solver |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| s, it creates six coordinate transformations shldrTTfm, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| shldrRTfm, uarmTTfm, uarmRTfm, farmTTfm, and farmRTfm. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Here the rotation angle parameters of the rotation trans- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| formations shldrRTfm, uarmRTfm, and farmRTfm will actu- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ally work as variables that can be altered by the solver. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Next, it generates a point variable handPos to represent |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the position of the hand, and then suggests the target po- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| sition to the hand by using a preferential edit constraint |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| editHandPos. Finally, executing the solver, it obtains the |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| desired angles shldrAngle, uarmAngle, and farmAngle of |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the rotation transformations. These angles will be passed |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to the Java 3D library to render the properly configured |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| robot arm. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| This program generates a constraint system which contains |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| three translation and three rotation transformations, one ex- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| plicit point variable as well as six point variables and three |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| 1D variables for coordinate transformations, and one edit |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraint. The solver found an initial solution to this sys- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tem in 18 milliseconds, and obtained each new solution for |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| a frame update typically within 10 milliseconds. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 7. RELATED WORK AND DISCUSSION |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| There has been work on integrating constraints or similar |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| functions with 3D graphics languages to facilitate the spec- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ification of graphical objects. For example, we can view the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| event routing mechanism in VRML [4] as a limited form of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| one-way propagation constraints. Also, there is an attempt |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| to extend VRML by introducing one-way propagation and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| finite-domain combinatorial constraints [5]. However, they |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| cannot handle more powerful simultaneous nonlinear con- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straints such as Euclidean geometric constraints. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Although many constraint solvers have been developed in |XML| xmlLoc_7 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
page ||| 99 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
figure ||| // constraint solver |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| s = new C3Solver(); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // translation transformation for the shoulder: fixed to (0, .1, 0) |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| shldrTTfm = new C3TranslateTransform(new C3Domain3D(0, .1, 0)); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(shldrTTfm); // shldrTTfm is parented by the world coordinate system |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // rotation transformation for the shoulder: axis fixed to (0, 1, 0); angle ranging over [-10000, 10000] |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| shldrRTfm = new C3RotateTransform(new C3Domain3D(0, 1, 0), new C3Domain(-10000, 10000)); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(shldrRTfm, shldrTTfm); // shldrRTfm is parented by shldrTTfm |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // translation transformation for the upper arm: fixed to (0, .1, 0) |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| uarmTTfm = new C3TranslateTransform(new C3Domain3D(0, .1, 0)); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(uarmTTfm, shldrRTfm); // uarmTTfm is parented by shldrRTfm |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // rotation transformation for the upper arm: axis fixed to (0, 0, 1); angle ranging over [-1.57,1.57] |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| uarmRTfm = new C3RotateTransform(new C3Domain3D(0, 0, 1), new C3Domain(-1.57, 1.57)); |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(uarmRTfm, uarmTTfm); // uarmRTfm is parented by uarmTTfm |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // translation transformation for the forearm: fixed to (0, .5, 0) |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| farmTTfm = new C3TranslateTransform(new C3Domain3D(0, .5, 0)); |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(farmTTfm, uarmRTfm); // farmTTfm is parented by uarmRTfm |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // rotation transformation for the forearm: axis fixed to (0, 0, 1); angle ranging over [-3.14, 0] |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| farmRTfm = new C3RotateTransform(new C3Domain3D(0, 0, 1), new C3Domain(-3.14, 0)); |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(farmRTfm, farmTTfm); // farmRTfm is parented by farmTTfm |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // variable for the hand’s position, associated with farmRTfm and fixed to (0, .5, 0) |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| handPos = new C3Variable3D(farmRTfm, new C3Domain3D(0, .5, 0)); |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // medium-strength edit constraint for the hand’s position |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| editHandPos = new C3EditConstraint(handPos, C3.MEDIUM); |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| s.add(editHandPos); |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // suggest the hand being located at the target’s position |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| editHandPos.set(getTargetWorldCoordinates() ); |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // solve the constraint system |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| s.solve(); |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| // get solutions |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
figure ||| double shldrAngle = shldrRTfm.rotationAngle().value() ; |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| double uarmAngle = uarmRTfm.rotationAngle().value(); |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figure ||| double farmAngle = farmRTfm.rotationAngle().value(); |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
figureCaption ||| Figure 5: Constraint program for the robot arm application. |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the field of graphical user interfaces [3, 7, 11, 12, 13, 17, 18], |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| most of them do not provide special treatment for 3D graph- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ics. In general, the role of nonlinear geometric constraints |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| is more important in 3D applications than in 2D interfaces. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Most importantly, 3D graphics usually requires rotations of |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| objects which are rarely used in 2D interfaces. The main |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| reason is that we often equally treat all “horizontal” direc- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tions in a 3D space even if we may clearly distinguish them |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| from “vertical” directions. Therefore, nonlinear constraint |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| solvers are appropriate for 3D applications. In addition, co- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ordinate transformations should be supported since they are |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| typically used to handle rotations of objects. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Gleicher proposed the differential approach [8, 9], which sup- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ports 3D geometric constraints and coordinate transforma- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tions. In a sense, it shares a motivation with Chorus3D; in |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| addition to support for 3D graphics, it allows user-defined |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| kinds of geometric constraints. However, it is based on a dif- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ferent solution method from Chorus3D; it realizes constraint |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| satisfaction by running virtual dynamic simulations. This |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| difference results in a quite different behavior of solutions as |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| well as an interface for controlling solutions. By contrast, |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D provides a much more compatible interface with |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| recent successful solvers such as Cassowary [3]. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Much research on inverse kinematics has been conducted in |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the fields of computer graphics and robotics [1, 20]. How- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ever, inverse kinematics is typically implemented as special- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| ized software which only provides limited kinds of geometric |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraints. |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Chorus3D has two limitations in its algorithm: one is on the |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| precision of solutions determined by preferential constraints; |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| the other is on the speed of the satisfaction of large con- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straint systems. These limitations are mainly caused by the |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| treatment of multi-level preferences of constraints in addi- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tion to required constraints (i.e., constraint hierarchies). Al- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| though many numerical optimization techniques have been |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| proposed and implemented in the field of mathematical pro- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| gramming [2, 6], most of them do not handle preferential |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| constraints. To alleviate the limitations of Chorus3D, we |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| are pursuing a more sophisticated method for processing |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| multi-level preferential constraints. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| We implemented Chorus3D as a class library which can |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| be exploited in C++ and Java programs. However, more |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| high-level authoring tools will also be useful for declarative |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| approaches to 3D design. One possible direction is to ex- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| tend VRML [4] to support geometric constraints. Standard |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| VRML requires scripts in Java or JavaScript to realize com- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| plex layouts and behaviors. By contrast, constraint-enabled |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| VRML will cover a wider range of applications without such |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| additional scripts. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 8. CONCLUSIONS AND FUTURE WORK |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| In this paper, we presented Chorus3D, a geometric con- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straint library for 3D graphical applications. It enables pro- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| grammers to use geometric constraints for various purposes |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
page ||| 100 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| such as geometric layout, constrained dragging, and inverse |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| kinematics. Its novel feature is to handle scene graphs |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| by processing coordinate transformations in geometric con- |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| straint satisfaction. |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| Our future work includes the development of other kinds of |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| geometric constraints to further prove the usefulness of our |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| approach. In particular, we are planning to implement non- |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| overlapping constraints [13] in Chorus3D so that we can use |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| it for the collision resolution of graphical objects. Another |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| future direction is to improve Chorus3D in the scalability |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bodyText ||| and accuracy of constraint satisfaction. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sectionHeader ||| 9. REFERENCES |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
reference ||| [1] Badler, N. I., Phillips, C. B., and Webber, B. L. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Simulating Humans: Computer Graphics, Animation, |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| and Control. Oxford University Press, Oxford, 1993. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [2] Bertsekas, D. P. Nonlinear Programming, 2nd ed. |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Athena Scientific, 1999. |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [3] Borning, A., Marriott, K., Stuckey, P., and Xiao, Y. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Solving linear arithmetic constraints for user interface |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| applications. In Proc. ACM UIST, 1997, 87–96. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [4] Carey, R., Bell, G., and Marrin, C. The Virtual |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Reality Modeling Language (VRML97). ISO/IEC |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 14772-1:1997, The VRML Consortium Inc., 1997. |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [5] Diehl, S., and Keller, J. VRML with constraints. In |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Proc. Web3D-VRML, ACM, 2000, 81–86. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [6] Fletcher, R. Practical Methods of Optimization, |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 2nd ed. John Wiley &amp; Sons, 1987. |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [7] Freeman-Benson, B. N., Maloney, J., and Borning, A. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| An incremental constraint solver. Commun. ACM 33, |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 1 (1990), 54–63. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [8] Gleicher, M. A graphical toolkit based on differential |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| constraints. In Proc. ACM UIST, 1993, 109–120. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [9] Gleicher, M. A differential approach to graphical |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| manipulation (Ph.D. thesis). Tech. Rep. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| CMU-CS-94-217, Sch. Comput. Sci. Carnegie Mellon |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Univ., 1994. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [10] Herrera, F., Lozano, M., and Verdegay, J. L. Tackling |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| real-coded genetic algorithms: Operators and tools for |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| behavioural analysis. Artif. Intell. Rev. 12, 4 (1998), |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 265–319. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [11] Heydon, A., and Nelson, G. The Juno-2 |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| constraint-based drawing editor. Research Report |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 131a, Digital Systems Research Center, 1994. |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [12] Hosobe, H. A scalable linear constraint solver for user |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| interface construction. In Principles and Practice of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Constraint Programming—CP2000, vol. 1894 of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| LNCS, Springer, 2000, 218–232. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [13] Hosobe, H. A modular geometric constraint solver for |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| user interface applications. In Proc. ACM UIST, 2001, |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 91–100. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [14] Kamada, T., and Kawai, S. An algorithm for drawing |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| general undirected graphs. Inf. Process. Lett. 31, 1 |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| (1989), 7–15. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [15] Kitano, H., Ed. Genetic Algorithms. Sangyo-Tosho, |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 1993. In Japanese. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [16] Kramer, G. A. A geometric constraint engine. Artif. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Intell. 58, 1–3 (1992), 327–360. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [17] Marriott, K., Chok, S. S., and Finlay, A. A tableau |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| based constraint solving toolkit for interactive |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| graphical applications. In Principles and Practice of |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Constraint Programming—CP98, vol. 1520 of LNCS, |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Springer, 1998, 340–354. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [18] Sannella, M. Skyblue: A multi-way local propagation |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| constraint solver for user interface construction. In |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Proc. ACM UIST, 1994,137–146. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [19] Takahashi, S. Visualizing constraints in visualization |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| rules. In Proc. CP2000 Workshop on Analysis and |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| Visualization of Constraint Programs and Solvers, |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 2000. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| [20] Zhao, J., and Badler, N. I. Inverse kinematics |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| positioning using nonlinear programming for highly |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| articulated figures. ACM Trans. Gr. 13, 4 (1994), |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
reference ||| 313–336. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
page ||| 101 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
