title ||| 2-Source Dispersers for Sub-Polynomial Entropy and |XML| xmlLoc_0 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest0 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
title ||| Ramsey Graphs Beating the Frankl-Wilson Construction |XML| xmlLoc_0 xmlAlign_centered xmlBold_yes xmlItalic_no xmlFontSize_largest0 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_header
none ||| ∗ |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
author ||| Boaz Barak |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
affiliation ||| Department of Computer Science |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
affiliation ||| Princeton University |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_header
email ||| boaz@cs.princeton.edu |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
author ||| Ronen Shaltiel ‡ |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
affiliation ||| University of Haifa |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
address ||| Mount Carmel |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_header
address ||| Haifa, Israel |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_header
email ||| ronen@cs.haifa.ac.il |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_header
sectionHeader ||| ABSTRACT |XML| xmlLoc_2 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| The main result of this paper is an explicit disperser for two |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| independent sources on n bits, each of entropy k = no(1). |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Put differently, setting N = 2n and K = 2k, we construct |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| explicit N × N Boolean matrices for which no K × K sub- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| matrix is monochromatic. Viewed as adjacency matrices of |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| bipartite graphs, this gives an explicit construction of K- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Ramsey bipartite graphs of size N. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| This greatly improves the previous bound of k = o(n) of |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Barak, Kindler, Shaltiel, Sudakov and Wigderson [4]. It also |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| significantly improves the 25-year record of k = ~O(√n) on |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the special case of Ramsey graphs, due to Frankl and Wilson |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| [9]. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The construction uses (besides ”classical” extractor ideas) |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| almost all of the machinery developed in the last couple of |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| years for extraction from independent sources, including: |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| •	Bourgain’s extractor for 2 independent sources of some |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| entropy rate < 1/2 [5] |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| •	Raz’s extractor for 2 independent sources, one of which |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| has any entropy rate > 1/2 [18] |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| ∗Supported by a Princeton University startup grant. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
footnote ||| †Most of this work was done while the author was visiting |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| Princeton University and the Institute for Advanced Study. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| Supported in part by an MCD fellowship from UT Austin |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| and NSF Grant CCR-0310960. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| ‡This research was supported by the United States-Israel |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| Binational Science Foundation (BSF) grant 2004329. |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| §This research was supported by NSF Grant CCR-0324906. |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
copyright ||| Permission to make digital or hard copies of all or part of this work for |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
copyright ||| personal or classroom use is granted without fee provided that copies are |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
copyright ||| not made or distributed for profit or commercial advantage and that copies |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
copyright ||| bear this notice and the full citation on the first page. To copy otherwise, to |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
copyright ||| republish, to post on servers or to redistribute to lists, requires prior specific |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
copyright ||| permission and/or a fee. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
note ||| STOC’06, May 21–23, 2006, Seattle, Washington, USA. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
copyright ||| Copyright 2006 ACM 1-59593-134-1/06/0005 ...$5.00. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
author ||| Anup Rao † |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
affiliation ||| Department of Computer Science |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
affiliation ||| University of Texas at Austin |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
email ||| arao@cs.utexas.edu |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
author ||| Avi Wigderson § |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
affiliation ||| Institute for Advanced Study |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
address ||| Princeton |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
address ||| New Jersey |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
email ||| avi@math.ias.edu |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| •	Rao’s extractor for 2 independent block-sources of en- |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| tropy no(1) [17] |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| •	The “Challenge-Response” mechanism for detecting |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| “entropy concentration” of [4]. |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The main novelty comes in a bootstrap procedure which |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| allows the Challenge-Response mechanism of [4] to be used |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| with sources of less and less entropy, using recursive calls |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to itself. Subtleties arise since the success of this mecha- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| nism depends on restricting the given sources, and so re- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| cursion constantly changes the original sources. These are |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| resolved via a new construct, in between a disperser and |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| an extractor, which behaves like an extractor on sufficiently |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| large subsources of the given ones. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
note ||| This version is only an extended abstract, please see the |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
note ||| full version, available on the authors’ homepages, for more |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
note ||| details. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| Categories and Subject Descriptors |XML| xmlLoc_4 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
category ||| G.2.2 [Mathematics of Computing]: Discrete Mathe- |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
category ||| matics—Graph algorithms |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
sectionHeader ||| General Terms |XML| xmlLoc_5 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
keyword ||| Theory, Algorithms |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
sectionHeader ||| Keywords |XML| xmlLoc_5 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
keyword ||| Dispersers, Ramsey Graphs, Independent Sources, Extrac- |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
keyword ||| tors |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 1. INTRODUCTION |XML| xmlLoc_6 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| This paper deals with randomness extraction from weak |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| random sources. Here a weak random source is a distribu- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tion which contains some entropy. The extraction task is to |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| design efficient algorithms (called extractors) to convert this |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| entropy into useful form, namely a sequence of independent |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| unbiased bits. Beyond the obvious motivations (potential |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| use of physical sources in pseudorandom generators and in |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| derandomization), extractors have found applications in a |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
page ||| 671 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| variety of areas in theoretical computer science where ran- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| domness does not seem an issue, such as in efficient con- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| structions of communication networks [24, 7], error correct- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ing codes [22, 12], data structures [14] and more. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Most work in this subject over the last 20 years has fo- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| cused on what is now called seeded extraction, in which the |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| extractor is given as input not only the (sample from the) |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| defective random source, but also a few truly random bits |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| (called the seed). A comprehensive survey of much of this |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| body of work is [21]. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Another direction, which has been mostly dormant till |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| about two years ago, is (seedless, deterministic) extraction |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| from a few independent weak sources. This kind of extrac- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tion is important in several applications where it is unrealis- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tic to have a short random seed or deterministically enumer- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ate over its possible values. However, it is easily shown to be |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| impossible when only one weak source is available. When at |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| least 2 independent sources are available extraction becomes |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| possible in principle. The 2-source case is the one we will |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| focus on in this work. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The rest of the introduction is structured as follows. We’ll |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| start by describing our main result in the context of Ramsey |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| graphs. We then move to the context of extractors and dis- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| perser, describing the relevant background and stating our |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| result in this language. Then we give an overview of the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| construction of our dispersers, describing the main building |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| blocks we construct along the way. As the construction is |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| quite complex and its analysis quite subtle, in this proceed- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ings version we try to abstract away many of the technical |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| difficulties so that the main ideas, structure and tools used |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| are highlighted. For that reason we also often state defini- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tions and theorems somewhat informally. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
subsectionHeader ||| 1.1 Ramsey Graphs |XML| xmlLoc_3 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| DefInItIOn 1.1. A graph on N vertices is called a K- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| Ramsey Graph if it contains no clique or independent set of |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| size K. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| In 1947 Erd}os published his paper inaugurating the Prob- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| abilistic Method with a few examples, including a proof that |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| most graphs on N = 2n vertices are 2n-Ramsey. The quest |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| for constructing such graphs explicitly has existed ever since |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| and lead to some beautiful mathematics. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The best record to date was obtained in 1981 by Frankl |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| and Wilson [9], who used intersection theorems for set sys- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tems to construct N-vertex graphs which are 21�n log n-Ramsey. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| This bound was matched by Alon [1] using the Polynomial |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Method, by Grolmusz [11] using low rank matrices over rings, |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| and also by Barak [2] boosting Abbot’s method with almost |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| k-wise independent random variables (a construction that |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| was independently discovered by others as well). Remark- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ably all of these different approaches got stuck at essentially |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the same bound. In recent work, Gopalan [10] showed that |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| other than the last construction, all of these can be viewed |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| as coming from low-degree symmetric representations of the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| OR function. He also shows that any such symmetric rep- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| resentation cannot be used to give a better Ramsey graph, |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| which gives a good indication of why these constructions |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| had similar performance. Indeed, as we will discuss in a |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| later section, the √n entropy bound initially looked like a |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| natural obstacle even for our techniques, though eventually |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| we were able to surpass it. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The analogous question for bipartite graphs seemed much |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| harder. |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DefInItIOn 1.2. A bipartite graph on two sets of N ver- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| tices is a K-Ramsey Bipartite Graph if it has no K × K |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| complete or empty bipartite subgraph. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| While Erd}os’ result on the abundance of 2n-Ramsey graphs |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| holds as is for bipartite graphs, until recently the best ex- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| plicit construction of bipartite Ramsey graphs was 2n/2- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Ramsey, using the Hadamard matrix. This was improved |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| last year, first to o(2n/2) by Pudlak and R}odl [16] and then |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to 2o(n) by Barak, Kindler, Shaltiel, Sudakov and Wigderson |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| [4] . |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| It is convenient to view such graphs as functions f : |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| ({0, 1}n)2 → {0, 1}. This then gives exactly the definition |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of a disperser. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DefInItIOn 1.3. A function f : ({0, 1}n)2 → {0, 1} is |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| called a 2-source disperser for entropy k if for any two sets |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| X, Y ⊂ {0, 1}n with | X | = |Y| = 2k, we have that the image |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| f (X, Y) is {0, 1}. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| This allows for a more formal definition of explicitness: we |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| simply demand that the function f is computable in polyno- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| mial time. Most of the constructions mentioned above are |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| explicit in this sense.' |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Our main result (stated informally) significantly improves |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| the bounds in both the bipartite and non-bipartite settings: |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| TheOrem 1.4. For every N we construct polynomial time |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| computable bipartite graphs which are 2n'(1)-Ramsey. A stan- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| dard transformation of these graphs also yields polynomial |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| time computable ordinary Ramsey Graphs with the same pa- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| rameters. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
subsectionHeader ||| 1.2 Extractors and Dispersers from indepen- |XML| xmlLoc_4 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
subsectionHeader ||| dent sources |XML| xmlLoc_4 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Now we give a brief review of past relevant work (with the |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| goal of putting this paper in proper context) and describe |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| some of the tools from these past works that we will use. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We start with the basic definitions of k-sources by Nisan |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| and Zuckerman [15] and of extractors and dispersers for in- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| dependent sources by Santha and Vazirani [20]. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DefInItIOn 1.5 ([15], See alSO [8]). The min-entropy |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| of a distribution X is the maximum k such that for every |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
construct ||| element x in its support, Pr[X = x] ≤ 2-k. If X is a dis- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| tribution on strings with min-entropy at least k, we will call |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| X a k-source 2. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| To simplify the presentation, in this version of the paper |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| we will assume that we are working with entropy as opposed |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to min-entropy. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DefInItIOn 1.6 ([20]). A function f : ({0,1}n)c → |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
construct ||| {0, 1}m is a c-source (k, ǫ) extractor if for every family of c |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
construct ||| independent k-sources X', • • • , Xc, the output f (X', • • • , Xc) |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| 'The Abbot’s product based Ramsey-graph construction of |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| [3] and the bipartite Ramsey construction of [16] only satisfy |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| a weaker notion of explicitness. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| 2It is no loss of generality to imagine that X is uniformly |XML| xmlLoc_7 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| distributed over some (unknown) set of size 2k. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
page ||| 672 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| is a ǫ-close 3 to uniformly distributed on m bits. f is a dis- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| perser for the same parameters if the output is simply re- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| quired to have a support of relative size (1 − ǫ). |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| To simplify the presentation, in this version of the paper, |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| we will assume that ǫ = 0 for all of our constructions. |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| In this language, Erd}os’ theorem says that most functions |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| f : ({0, 1}n)2 → {0, 1} are dispersers for entropy 1 + logn |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| (treating f as the characteristic function for the set of edges |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of the graph). The proof easily extends to show that indeed |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| most such functions are in fact extractors. This naturally |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| challenges us to find explicit functions f that are 2-source |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| extractors. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Until one year ago, essentially the only known explicit |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| construction was the Hadamard extractor Had defined by |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Had(x,y) |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| k > n/2 as observed by Chor and Goldreich [8] and can |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| be extended to give m = Q(n) output bits as observed by |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Vazirani [23]. Over 20 years later, a recent breakthrough |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of Bourgain [5] broke this “1/2 barrier” and can handle 2 |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| sources of entropy .4999n, again with linear output length |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| m = 0(n). This seemingly minor improvement will be cru- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| cial for our work! |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| TheOrem 1.7 ([5] ). There is a polynomial time com- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| putable 2-source extractor f : ({0, 1}n)2 → {0, 1}m for en- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| tropy .4999n and m = 0(n). |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| No better bounds are known for 2-source extractors. Now |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| we turn our attention to 2-source dispersers. It turned out |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that progress for building good 2-source dispersers came via |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| progress on extractors for more than 2 sources, all happening |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| in fast pace in the last 2 years. The seminal paper of Bour- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| gain, Katz and Tao [6] proved the so-called ”sum-product |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| theorem” in prime fields, a result in arithmetic combina- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| torics. This result has already found applications in diverse |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| areas of mathematics, including analysis, number theory, |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| group theory and ... extractor theory. Their work implic- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| itly contained dispersers for c = O(log(n/k)) independent |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| sources of entropy k (with output m = Q(k)). The use of |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the ”sum-product” theorem was then extended by Barak et |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| al. [3] to give extractors with similar parameters. Note that |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| for linear entropy k = 0(n), the number of sources needed |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| for extraction c is a constant! |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Relaxing the independence assumptions via the idea of |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| repeated condensing, allowed the reduction of the number |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of independent sources to c = 3, for extraction from sources |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of any linear entropy k = 0(n), by Barak et al. [4] and |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| independently by Raz [18]. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| For 2 sources Barak et al. [4] were able to construct dis- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| persers for sources of entropy o(n). To do this, they first |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| showed that if the sources have extra structure (block-source |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| structure, defined below), even extraction is possible from 2 |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| sources. The notion of block-sources, capturing ”semi inde- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| pendence” of parts of the source, was introduced by Chor |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| and Goldreich [8]. It has been fundamental in the develop- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ment of seeded extractors and as we shall see, is essential |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| for us as well. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DefInItIOn 1.8 ([8] ). A distribution X = X1, ... , Xc |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| is a c-block-source of (block) entropy k if every block Xi |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| has entropy k even conditioned on fixing the previous blocks |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| X1, • • • , Xi_1 to arbitrary constants. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| 3The error is usually measured in terms of ℓ1 distance or |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| variation distance. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| This definition allowed Barak et al. [4] to show that their |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| extractor for 4 independent sources, actually performs as |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| well with only 2 independent sources, as long as both are |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| 2-block-sources. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| TheOrem 1.9 ([4] ). There exists a polynomial time com- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| putable extractor f : ({0, 1}n)2 → {0, 1} for 2 independent |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| 2-block-sources with entropy o(n). |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| There is no reason to assume that the given sources are |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| block-sources, but it is natural to try and reduce to this |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| case. This approach has been one of the most successful in |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the extractor literature. Namely try to partition a source |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| X into two blocks X = X1, X2 such that X1, X2 form a |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
bodyText ||| 2-block-source. Barak et al. introduced a new technique to |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
bodyText ||| do this reduction called the Challenge-Response mechanism, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| which is crucial for this paper. This method gives a way to |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| “find” how entropy is distributed in a source X, guiding the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| choice of such a partition. This method succeeds only with |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| small probability, dashing the hope for an extractor, but still |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| yielding a disperser. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| TheOrem 1.10 ([4] ). There exists a polynomial time |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| computable 2-source disperser f : ({0, 1}n)2 → {0, 1} for |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| entropy o(n). |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Reducing the entropy requirement of the above 2-source |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| disperser, which is what we achieve in this paper, again |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| needed progress on achieving a similar reduction for extrac- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tors with more independent sources. A few months ago Rao |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| [?] was able to significantly improve all the above results |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| for c ≥ 3 sources. Interestingly, his techniques do not use |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| arithmetic combinatorics, which seemed essential to all the |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| papers above. He improves the results of Barak et al. [3] to |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| give c = O((logn)/(logk))-source extractors for entropy k. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Note that now the number c of sources needed for extraction |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| is constant, even when the entropy is as low as nδ for any |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| constant δ! |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Again, when the input sources are block-sources with suf- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| ficiently many blocks, Rao proves that 2 independent sources |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| suffice (though this result does rely on arithmetic combina- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| torics, in particular, on Bourgain’s extractor). |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| TheOrem 1.11 ([?] ). There is a polynomial time com- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| putable extractor f : ({0, 1}n)2 → {0, 1}m for 2 independent |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| c-block-sources with block entropy k and m = 0(k), as long |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| as c = O((log n)/(log k)). |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| In this paper (see Theorem 2.7 below) we improve this |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| result to hold even when only one of the 2 sources is a c- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| block-source. The other source can be an arbitrary source |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| with sufficient entropy. This is a central building block in |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| our construction. This extractor, like Rao’s above, critically |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| uses Bourgain’s extractor mentioned above. In addition it |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| uses a theorem of Raz [18] allowing seeded extractors to have |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ”weak” seeds, namely instead of being completely random |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| they work as long as the seed has entropy rate > 1/2. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 2. MAIN NOTIONS AND NEW RESULTS |XML| xmlLoc_6 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| The main result of this paper is a polynomial time com- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| putable disperser for 2 sources of entropy no(1), significantly |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| improving both the results of Barak et al. [4] (o(n) entropy). |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| It also improves on Frankl and Wilson [9], who only built |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Ramsey Graphs and only for entropy ~O(√n). |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| = (x, y)( mod 2). It is an extractor for entropy |XML| xmlLoc_1 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_right bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
page ||| 673 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
construct ||| ThEOREm 2.1 (MaIn thEOREm, REStatEd). There ex- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| ists a polynomial time computable 2-source disperser D : |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
construct ||| ({0, 1}n)2 → {0, 1} for entropy no(1). |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The construction of this disperser will involve the con- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| struction of an object which in some sense is stronger and |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| in another weaker than a disperser: a subsource somewhere |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| extractor. We first define a related object: a somewhere ex- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tractor, which is a function producing several outputs, one of |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| which must be uniform. Again we will ignore many technical |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| issues such as error, min-entropy vs. entropy and more, in |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| definitions and results, which are deferred to the full version |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of this paper. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DEfInItIOn 2.2. A function f : ({0, 1}n)2 → ({0,1}m)ℓ |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
construct ||| is a 2-source somewhere extractor with ℓ outputs, for entropy |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| k, if for every 2 independent k-sources X, Y there exists an |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| i ∈ [ℓ] such the ith output f (X, Y)i is a uniformly distributed |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| string of m bits. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Here is a simple construction of such a somewhere extrac- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| tor with ℓ as large as poly(n) (and the p in its name will |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| stress the fact that indeed the number of outputs is that |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| large). It will nevertheless be useful to us (though its de- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| scription in the next sentence may be safely skipped). Define |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| pSE(x, y)i = V(E(x, i), E(y, i)) where E is a ”strong” loga- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| rithmic seed extractor, and V is the Hadamard/Vazirani 2- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source extractor. Using this construction, it is easy to see |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that: |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| PROPOSItIOn 2.3. For every n, k there is a polynomial |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
construct ||| time computable somewhere extractor pSE : ({0, 1}n)2 → |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| ({0, 1}m)ℓ with ℓ = poly(n) outputs, for entropy k, and m = |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| Q(k). |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Before we define subsource somewhere extractor, we must |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| first define a subsource. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DEfInItIOn 2.4 (SUBSOURCES). Given random variables |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
construct ||| Z and Z^ on {0, 1}n we say that Z^ is a deficiency d subsource |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| of Z and write Z^ ⊆ Z if there exists a set A ⊆ {0,1}n such |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| that (Z|Z ∈ A) = Z^ and Pr[Z ∈ A] ≥ 2-d. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| A subsource somewhere extractor guarantees the ”some- |XML| xmlLoc_5 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| where extractor” property only on subsources X', Y' of the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| original input distributions X, Y (respectively). It will be |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| extremely important for us to make these subsources as large |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| as possible (i.e. we have to lose as little entropy as possible). |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Controlling these entropy deficiencies is a major technical |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| complication we have to deal with. However we will be in- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| formal with it here, mentioning it only qualitatively when |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| needed. We discuss this issue a little more in Section 6. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DEfInItIOn 2.5. A function f : ({0, 1}n)2 → ({0,1}m)ℓ |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
construct ||| is a 2-source subsource somewhere extractor with ℓ outputs |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| for entropy k, if for every 2 independent k-sources X, Y there |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| exists a subsource X^ of X, a subsource Y^ of Y and an i ∈ [ℓ] |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| such the ith output f (^X, Y^)i is a uniformly distributed string |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| of m bits. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| A central technical result for us is that with this ”sub- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| source” relaxation, we can have much fewer outputs – in- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| deed we’ll replace poly(n) outputs in our first construction |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| above with no(1) outputs. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| ThEOREm 2.6 (SUBSOURCE SOmEWhERE ExtRaCtOR). |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| For every δ > 0 there is a polynomial time computable sub- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
construct ||| source somewhere extractor SSE : ({0, 1}n)2 → ({0, 1}m)ℓ |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| with ℓ = no(1) outputs, for entropy k = nδ, with output |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| m=√k. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We will describe the ideas used for constructing this im- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| portant object and analyzing it in the next section, where |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| we will also indicate how it is used in the construction of |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the final disperser. Here we state a central building block, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| mentioned in the previous section (as an improvement of the |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| work of Rao [?]). We construct an extractor for 2 indepen- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| dent sources one of which is a block-sources with sufficient |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| number of blocks. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| ThEOREm 2.7 (BlOCK SOURCE ExtRaCtOR). There is |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| a polynomial time computable extractor B : ({0, 1}n)2 → |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
construct ||| {0,1}m for 2 independent sources, one of which is a c-block- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| sources with block entropy k and the other a source of en- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| tropy k, with m = 0(k), and c = O((log n)/(log k)). |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| A simple corollary of this block-source extractor B, is the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| following weaker (though useful) somewhere block-source |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| extractor SB. A source Z = Z1, Z2, • • • , Zt is a somewhere |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| c-block-source of block entropy k if for some c indices i1 < |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| i2 < • • • < ic the source Zi1, Zi2, • • • , Zic is a c-block-source. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Collecting the outputs of B on every c-subset of blocks re- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| sults in that somewhere extractor. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| COROllaRY 2.8. There is a polynomial time computable |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| somewhere extractorSB : ({0, 1}n)2 → ({0, 1}m)ℓ for2 inde- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| pendent sources, one of which is a somewhere c-block-sources |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| with block entropy k and t blocks total and the other a source |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| of entropy k, with m = 0(k), c = O((log n)/(log k)), and |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| ℓ ≤ tc. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| In both the theorem and corollary above, the values of |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| entropy k we will be interested in are k = no(1). It follows |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that a block-source with a constant c = O(1) suffices. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 3. THE CHALLENGE-RESPONSE MECH- |XML| xmlLoc_4 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
sectionHeader ||| ANISM |XML| xmlLoc_4 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We now describe abstractly a mechanism which will be |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| used in the construction of the disperser as well as the sub- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source somewhere extractor. Intuitively, this mechanism al- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| lows us to identify parts of a source which contain large |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| amounts of entropy. One can hope that using such a mech- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| anism one can partition a given source into blocks in a way |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| which make it a block-source, or alternatively focus on a part |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of the source which is unusually condensed with entropy - |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| two cases which may simplify the extraction problem. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The reader may decide, now or in the middle of this |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| section, to skip ahead to the next section which describes |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the construction of the subsource somewhere extractor SSE, |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| which extensively uses this mechanism. Then this section |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| may seem less abstract, as it will be clearer where this mech- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| anism is used. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| This mechanism was introduced by Barak et al. [4], and |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| was essential in their 2-source disperser. Its use in this paper |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| is far more involved (in particular it calls itself recursively, |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| a fact which creates many subtleties). However, at a high |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| level, the basic idea behind the mechanism is the same: |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Let Z be a source and Z' a part of Z (Z projected on a |XML| xmlLoc_7 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_right bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| subset of the coordinates). We know that Z has entropy k, |XML| xmlLoc_7 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
page ||| 674 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| and want to distinguish two possibilities: Z′ has no entropy |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| (it is fixed) or it has at least k′ entropy. Z′ will get a pass |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| or fail grade, hopefully corresponding to the cases of high or |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| no entropy in Z′. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Anticipating the use of this mechanism, it is a good idea |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| to think of Z as a ”parent” of Z′, which wants to check if |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| this ”child” has sufficient entropy. Moreover, in the context |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of the initial 2 sources X, Y we will operate on, think of Z |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| as a part of X, and thus that Y is independent of Z and Z′. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| To execute this ”test” we will compute two sets of strings |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| (all of length m, say): the Challenge C = C(Z′,Y) and |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the Response R = R(Z, Y). Z′ fails if C C R and passes |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| otherwise. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The key to the usefulness of this mechanism is the follow- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| ing lemma, which states that what ”should” happen, indeed |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| happens after some restriction of the 2 sources Z and Y. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We state it and then explain how the functions C and R are |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| defined to accommodate its proof. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| Lemma 3.1. Assume Z, Y are sources of entropy k. |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| 1. If Z′ has entropy k′+O(m), then there are subsources |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| Z^ of Z and Y^ of Y, such that |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| Pr[^Z′ passes] = Pr[C(^Z′, Y^) C R(^Z, Y^)] > 1—nO(1)2−m |XML| xmlLoc_2 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_right bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| 2. If Z′ is fixed (namely, has zero entropy), then for some |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_left bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| subsources Z^ of Z and Y^ of Y, we have |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| Pr[Z′ fails] = Pr[C(^Z′, Y^) C R(^Z, Y^)] = 1 |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Once we have such a mechanism, we will design our dis- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| perser algorithm assuming that the challenge response mech- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| anism correctly identifies parts of the source with high or |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| low levels of entropy. Then in the analysis, we will ensure |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that our algorithm succeeds in making the right decisions, |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| at least on subsources of the original input sources. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Now let us explain how to compute the sets C and R. We |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| will use some of the constructs above with parameters which |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| don’t quite fit. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The response set R(Z, Y) = pSE(Z, Y) is chosen to be the |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| output of the somewhere extractor of Proposition 2.3. The |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| challenge set C(Z′, Y) = SSE(Z′, Y) is chosen to be the out- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| put of the subsource somewhere extractor of Theorem 2.6. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Why does it work? We explain each of the two claims |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| in the lemma in turn (and after each comment on the im- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| portant parameters and how they differ from Barak et al. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| [4]). |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 1. Z′ has entropy. We need to show that Z′ passes the |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| test with high probability. We will point to the out- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| put string in C(^Z′, Y^′) which avoids R(^Z, Y^) with high |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| probability as follows. In the analysis we will use the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| union bound on several events, one associated with |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| each (poly(n) many) string in pSE(^Z, Y^). We note |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| that by the definition of the response function, if we |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| want to fix a particular element in the response set to |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| a particular value, we can do this by fixing E(Z, i) and |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| E(Y, i). This fixing keeps the restricted sources inde- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| pendent and loses only O(m) entropy. In the subsource |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| of Z′ guaranteed to exist by Theorem 2.6 we can afford |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| to lose this entropy in Z′. Thus we conclude that one |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| of its outputs is uniform. The probability that this |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| output will equal any fixed value is thus 2−m, com- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| pleting the argument. We note that we can handle |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| the polynomial output size of pSE, since the uniform |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| string has length m = no(1) (something which could |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| not be done with the technology available to Barak et |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| al. [4]). |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 2. Z′ has no entropy. We now need to guarantee that |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| in the chosen subsources (which we choose) ^Z, Y^, all |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| strings in C = C(^Z′, Y^) are in R(^Z, Y^). First notice |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| that as Z′ is fixed, C is only a function of Y. We |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| set Y~ to be the subsource of Y that fixes all strings |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| in C = C(Y) to their most popular values (losing |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| only ℓm entropy from Y). We take care of includ- |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| ing these fixed strings in R(Z, Y~) one at a time, by |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| restricting to subsources assuring that. Let σ be any |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| m-bit string we want to appear in R(Z, Y~). Recall that |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| R(z, y) = V(E(z, i), E(y, i)). We pick a ”good” seed i, |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| and restrict Z, Y~ to subsources with only O(m) less |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| entropy by fixing E(Z, i) = a and E(Y~, i) = b to values |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| (a, b) for which V(a, b) = σ. This is repeated suc- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| cessively ℓ times, and results in the final subsources |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| ^Z, Y^ on which ^Z′ fails with probability 1. Note that |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| we keep reducing the entropy of our sources ℓ times, |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| which necessitates that this ℓ be tiny (here we could |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| not tolerate poly(n), and indeed can guarantee no(1), |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| at least on a subsource – this is one aspect of how cru- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| cial the subsource somewhere extractor SSE is to the |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| construction. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We note that initially it seemed like the Challenge-Response |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| mechanism as used in [4] could not be used to handle en- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tropy that is significantly less than -,/n (which is approxi- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| mately the bound that many of the previous constructions |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| got stuck at). The techniques of [4] involved partitioning |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the sources into t pieces of length n/t each, with the hope |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that one of those parts would have a significant amount of |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| entropy, yet there’d be enough entropy left over in the rest |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of the source (so that the source can be partitioned into a |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| block source). |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| However it is not clear how to do this when the total |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| entropy is less than -,/n. On the one hand we will have |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to partition our sources into blocks of length significantly |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| more than -,/n (or the adversary could distribute a negligible |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| fraction of entropy in all blocks). On the other hand, if |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| our blocks are so large, a single block could contain all the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| entropy. Thus it was not clear how to use the challenge |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| response mechanism to find a block source. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 4. THE SUBSOURCE SOMEWHERE |XML| xmlLoc_5 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
sectionHeader ||| EXTRACTOR SSE |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
bodyText ||| We now explain some of the ideas behind the construction |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| of the subsource somewhere extractor SSE of Theorem 2.6. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Consider the source X. We are seeking to find in it a some- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| where c-block-source, so that we can use it (together with Y) |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| in the block-source extractor of Theorem 2.8. Like in previ- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ous works in the extractor literature (e.g. [19, 13]) we use a |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ”win-win” analysis which shows that either X is already a |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| somewhere c-block-source, or it has a condensed part which |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| contains a lot of the entropy of the source. In this case we |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| proceed recursively on that part. Continuing this way we |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| eventually reach a source so condensed that it must be a |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| somewhere block source. Note that in [4], the challenge re- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| sponse mechanism was used to find a block source also, but |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| there the entropy was so high that they could afford to use |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
page ||| 675 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figure ||| Not Somewhere block source	n bits total |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figure ||| 		t blocks			Outputs |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_no xmlCell_yes xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figure ||| < k’ |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| Challenge Challenge |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| responded responded |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| X |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| low |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| med |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| high |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| n/t bits total |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| t blocks |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| Challenge Unresponded |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| SB |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| Somewhere Block Source! |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| med |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| med |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| low |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| 0< low < k’/t |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| k’/t < med < k’/c |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| k’/c < high < k’ |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| high |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| med |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| Random Row |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| med |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| SB |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figureCaption ||| Figure 1: Analysis of the subsource somewhere extractor. |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figureCaption ||| a tree of depth 1. They did not need to recurse or condense |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figureCaption ||| the sources. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Consider the tree of parts of the source X evolved by |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| such recursion. Each node in the tree corresponds to some |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| interval of bit locations of the source, with the root node |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| corresponding to the entire source. A node is a child of an- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| other if its interval is a subinterval of the parent. It can be |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| shown that some node in the tree is ”good”; it corresponds |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to a somewhere c-source, but we don’t know which node is |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| good. Since we only want a somewhere extractor, we can |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| apply to each node the somewhere block-source extractor of |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Corollary 2.8 – this will give us a random output in every |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ”good” node of the tree. The usual idea is output all these |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| values (and in seeded extractors, merge them using the ex- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ternally given random seed). However, we cannot afford to |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| do that here as there is no external seed and the number of |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| these outputs (the size of the tree) is far too large. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Our aim then will be to significantly prune this number |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| of candidates and in fact output only the candidates on one |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| path to a canonical”good” node. First we will give a very in- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| formal description of how to do this (Figure 1). Before call- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ing SSE recursively on a subpart of a current part of X, we’ll |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| use the ”Challenge-Response” mechanism described above |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to check if ”it has entropy”.4 We will recurse only with the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| first (in left-to-right order) part which passes the ”entropy |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| test”. Thus note that we will follow a single path on this |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tree. The algorithm SSE will output only the sets of strings |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| produced by applying the somewhere c-block-extractor SB |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| on the parts visited along this path. |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Now let us describe the algorithm for SSE. SSE will be |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| initially invoked as SSE(x, y), but will recursively call itself |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| with different inputs z which will always be substrings of x. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| 4We note that we ignore the additional complication that |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
footnote ||| SSE will actually use recursion also to compute the challenge |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| in the challenge-response mechanism. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| Algorithm: SSE(z, y) |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Let pSE(., .) be the somewhere extractor with a polyno- |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| mial number of outputs of Proposition 2.3. |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Let SB be the somewhere block source extractor of Corol- |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| lary 2.8. |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Global Parameters: t, the branching factor of the tree. k |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| the original entropy of the sources. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Output will be a set of strings. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| 1. If z is shorter than √k, return the empty set, else |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| continue. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 2. Partition z into t equal parts z = z1, z2, ... ,zt. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| 3. Compute the response set R(z, y) which is the set of |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| strings output by pSE(z, y). |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 4. For i E [t], compute the challenge set C(zi, y), which |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| is the set of outputs of SSE(zi, y). |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 5. Let h be the smallest index for which the challenge set |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| C(zh, y) is not contained in the response set (set h = t |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| if no such index exists). |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 6. Output SB(z, y) concatenated with SSE(zh, y). |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| Proving that indeed there are subsources on which SSE |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| will follow a path to a ”good” (for these subsources) node, |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| is the heart of the analysis. It is especially complex due |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| to the fact that the recursive call to SSE on subparts of |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| the current part is used to generate the Challenges for the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| Challenge-Response mechanism. Since SSE works only on |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| a subsources we have to guarantee that restriction to these |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| does not hamper the behavior of SSE in past and future calls |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| to it. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| Let us turn to the highlights of the analysis, for the proof |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| of Theorem 2.6. Let k' be the entropy of the source Z at |XML| xmlLoc_7 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| some place in this recursion. Either one of its blocks Zi has |XML| xmlLoc_7 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
page ||| 676 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| entropy k'/c, in which case it is very condensed, since its |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| size is n/t for t ≫ c), or it must be that c of its blocks form |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| a c-block source with block entropy k'/t (which is sufficient |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| for the extractor B used by SB). In the 2nd case the fact |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| that SB(z, y) is part of the output of of our SSE guarantees |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that we are somewhere random. If the 2nd case doesn’t hold, |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| let Zi be the leftmost condensed block. We want to ensure |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that (on appropriate subsources) SSE calls itself on that ith |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| subpart. To do so, we fix all Zj for j < i to constants zj. We |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| are now in the position described in the Challenge-Response |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| mechanism section, that (in each of the first i parts) there |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| is either no entropy or lots of entropy. We further restrict |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to subsources as explained there which make all first i − 1 |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| blocks fail the ”entropy test”, and the fact that Zi still has |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| lots of entropy after these restrictions (which we need to |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| prove) ensures that indeed SSE will be recursively applied |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to it. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We note that while the procedure SSE can be described re- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| cursively, the formal analysis of fixing subsources is actually |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| done globally, to ensure that indeed all entropy requirements |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| are met along the various recursive calls. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Let us remark on the choice of the branching parameter t. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| On the one hand, we’d like to keep it small, as it dominates |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the number of outputs tc of SB, and thus the total number of |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| outputs (which is tc logt n). For this purpose, any t = no(1) |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| will do. On the other hand, t should be large enough so that |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| condensing is faster than losing entropy. Here note that if |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Z is of length n, its child has length n/t, while the entropy |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| shrinks only from k' to k'/c. A simple calculation shows that |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| if k(lo9t)/lo9c) > n2 then a c block-source must exist along |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| such a path before the length shrinks to √k. Note that for |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| k = nΩ(1) a (large enough) constant t suffices (resulting in |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| only logarithmic number of outputs of SSE). This analysis |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| is depicted pictorially in Figure 1. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 5. THE FINAL DISPERSER D |XML| xmlLoc_4 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Following is a rough description of our disperser D proving |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Theorem 2.1. The high level structure of D will resemble the |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| structure of SSE - we will recursively split the source X and |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| look for entropy in the parts. However now we must output |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| a single value (rather than a set) which can take both values |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| 0 and 1. This was problematic in SSE, even knowing where |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the ”good” part (containing a c-block-source) was! How can |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| we do so now? |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| We now have at our disposal a much more powerful tool |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| for generating challenges (and thus detecting entropy), namely |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the subsource somewhere disperser SSE. Note that in con- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| structing SSE we only had essentially the somewhere c-block- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source extractor SB to (recursively) generate the challenges, |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| but it depended on a structural property of the block it was |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| applied on. Now SSE does not assume any structure on its |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| input sources except sufficient entropy 5. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Let us now give a high level description of the disperser |XML| xmlLoc_6 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| D. It too will be a recursive procedure. If when processing |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| some part Z of X it ”realizes” that a subpart Zi of Z has |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| entropy, but not all the entropy of Z (namely Zi, Z is a |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| 2-block-source) then we will halt and produce the output |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of D. Intuitively, thinking about the Challenge-Response |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| mechanism described above, the analysis implies that we |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| 5There is a catch – it only works on subsources of them! |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| This will cause us a lot of head ache; we will elaborate on it |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| later. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| can either pass or fail Zi (on appropriate subsources). But |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| this means that the outcome of this ”entropy test” is a 1-bit |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| disperser! |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| To capitalize on this idea, we want to use SSE to identify |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
footnote ||| such a block-source in the recursion tree. As before, we scan |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| the blocks from left to right, and want to distinguish three |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| possibilities. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| low Zi has low entropy. In this case we proceed to i + 1. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
footnote ||| medium Zi has ”medium” entropy (Zi, Z is a block-source). |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| In which case we halt and produce an output (zero or |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| one). |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| high Zi has essentially all entropy of Z. In this case we |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| recurse on the condensed block Zi. |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| As before, we use the Challenge-Response mechanism (with |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
footnote ||| a twist). We will compute challenges C(Zi, Y) and responses |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| R(Z, Y), all strings of length m. The responses are computed |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| exactly as before, using the somewhere extractor pSE. The |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| Challenges are computed using our subsource somewhere |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| extractor SSE. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| We really have 4 possibilities to distinguish, since when we |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
footnote ||| halt we also need to decide which output bit we give. We will |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| do so by deriving three tests from the above challenges and |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| responses: (CH, RH), (CM, RM), (CL, RL) for high, medium |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| and low respectively, as follows. Let m ≥ mH >> mM >> |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| mL be appropriate integers: then in each of the tests above |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| we restrict ourselves to prefixes of all strings of the appro- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| priate lengths only. So every string in CM will be a prefix |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| of length mM of some string in CH. Similarly, every string |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| in RL is the length mL prefix of some string in RH. Now |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| it is immediately clear that if CM is contained in RM, then |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| CL is contained in RL. Thus these tests are monotone, if |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
footnote ||| our sample fails the high test, it will definitely fail all tests. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| Algorithm: D(z, y) |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Let pSE(., .) be the somewhere extractor with a polyno- |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| mial number of outputs of Proposition 2.3. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Let SSE(.,.) be the subsource somewhere extractor of The- |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| orem 2.6. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Global Parameters: t, the branching factor of the tree. k |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| the original entropy of the sources. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Local Parameters for recursive level: mL ≪ mM ≪ mH. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| Output will be an element of {0, 1}. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 1. If z is shorter than √k, return 0. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| 2. Partition z into t equal parts z = z1, z2, ... , zt. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| 3. Compute three response sets RL, RM, RH using pSE(z, y). |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| Rj will be the prefixes of length mj of the strings in |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| pSE(z, y). |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 4. For each i ∈ [t], compute three challenge sets CiL, CiM, CiH |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| using SSE(zi, y). Cij will be the prefixes of length mj |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| of the strings in SSE(zi, y). |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 5. Let h be the smallest index for which the challenge set |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| CL is not contained in the response set RL, if there is |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| no such index, output 0 and halt. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 6. If ChH is contained in RH and ChH is contained in RM, |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
listItem ||| output 0 and halt. If ChH is contained in RH but ChH |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| is not contained in RM, output 1 and halt. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
page ||| 677 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figure ||| t blocks |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figure ||| X |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figure ||| low |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| fail |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| X_3 |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| (X_3)_4 |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| low |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| low |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| fail |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| fail |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| fail |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| low |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| low |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| pass |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| pass |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| pass |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| high |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| low |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| low |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| t blocks |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| low |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| high |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| t blocks |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| med |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| n bits total |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_none bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| n/t bits total |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| n/t^2 bits total |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| pass |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| pass |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| pass |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
figure ||| fail |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| fail |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
figure ||| Output 0	Output 1 |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
figureCaption ||| Figure 2: Analysis of the disperser. |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| 7. Output D(zh, y), |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| First note the obvious monotonicity of the tests. If Zi fails |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| one of the tests it will certainly fail for shorter strings. Thus |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| there are only four outcomes to the three tests, written in the |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| order (low, medium, high): (pass, pass, pass), (pass, pass, fail), |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
bodyText ||| (pass, fail, fail) and (fail, fail, fail). Conceptually, the algo- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
bodyText ||| rithm is making the following decisions using the four tests: |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 1. (fail, fail, fail): Assume Zi has low entropy and proceed |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| to block i + 1. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 2. (pass, fail, fail): Assume Zi is medium, halt and output |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| 0. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 3. (pass, pass, fail): Assume Zi is medium, halt and out- |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
listItem ||| put 1. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
listItem ||| 4. (pass, pass, pass): Assume Zi is high and recurse on Zi. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| The analysis of this idea (depicted in Figure 2).turns out |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| to be more complex than it seems. There are two reasons for |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| that. Now we briefly explain them and the way to overcome |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| them in the construction and analysis. |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The first reason is the fact mentioned above, that SSE |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| which generates the challenges, works only on a subsources |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of the original sources. Restricting to these subsources at |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| some level of the recursion (as required by the analysis of of |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the test) causes entropy loss which affects both definitions |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| (such as these entropy thresholds for decisions) and correct- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ness of SSE in higher levels of recursion. Controlling this en- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tropy loss is achieved by calling SSE recursively with smaller |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| and smaller entropy requirements, which in turn limits the |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| entropy which will be lost by these restrictions. In order not |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| to lose all the entropy for this reason alone, we must work |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| with special parameters of SSE, essentially requiring that at |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| termination it has almost all the entropy it started with. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| The second reason is the analysis of the test when we are |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| in a medium block. In contrast with the above situation, we |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| cannot consider the value of Zi fixed when we need it to fail |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| on the Medium and Low tests. We need to show that for |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| these two tests (given a pass for High), they come up both |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| (pass, fail) and (fail, fail) each with positive probability. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Since the length of Medium challenges and responses is |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| mM, the probability of failure is at least exp(−Q(mM)) (this |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| follows relatively easily from the fact that the responses are |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| somewhere random). If the Medium test fails so does the |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Low test, and thus (fail, fail) has a positive probability and |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| our disperser D outputs 0 with positive probability. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| To bound (pass, fail) we first observe (with a similar |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| reasoning) that the low test fails with probability at least |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| exp(−Q(mL)). But we want the medium test to pass at the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| same time. This probability is at least the probability that |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| low fails minus the probability that medium fails. We already |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| have a bound on the latter: it is at most poly(n)exp(−ℓmM). |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Here comes our control of the different length into play - we |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| can make the mL sufficiently smaller than mM to yield this |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| difference positive. We conclude that our disperser D out- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| puts 1 with positive probability as well. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Finally, we need to take care of termination: we have to |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| ensure that the recurrence always arrives at a medium sub- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| part, but it is easy to chose entropy thresholds for low, medium |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| and high to ensure that this happens. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
page ||| 678 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
sectionHeader ||| 6. RESILIENCY AND DEFICIENCY |XML| xmlLoc_0 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_justified bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| In this section we will breifly discuss an issue which arises |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| in our construction that we glossed over in the previous sec- |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tions. Recall our definition of subsources: |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DEfInItIOn 6.1 (SUBSOURCES). Given random variables |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
construct ||| Z and Zˆ on {0,1}n we say that Zˆ is a deficiency d subsource |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| of Z and write Zˆ ⊆ Z if there exists a set A ⊆ {0,1}n such |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| that (Z|A) = Zˆ and Pr[Z ∈ A] ≥ 2—d. |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Recall that we were able to guarantee that our algorithms |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| made the right decisions only on subsources of the original |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source. For example, in the construction of our final dis- |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| perser, to ensure that our algorithms correctly identify the |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| right high block to recurse on, we were only able to guar- |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| antee that there are subsources of the original sources in |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| which our algorithm makes the correct decision with high |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| probability. Then, later in the analysis we had to further |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| restrict the source to even smaller subsources. This leads to |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| complications, since the original event of picking the correct |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| high block, which occurred with high probability, may be- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| come an event which does not occur with high probability |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| in the current subsource. To handle these kinds of issues, |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| we will need to be very careful in measuring how small our |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| subsources are. |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| In the formal analysis we introduce the concept of re- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| siliency to deal with this. To give an idea of how this works, |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| here is the actual definition of somewhere subsource extrac- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tor that we use in the formal analysis. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
construct ||| DEfInItIOn 6.2 (SUBSOURCE SOmEWhERE ExtRaCtOR). |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| A function SSE : {0, 1}n × {0, 1}n → ({0, 1}m)ℓ is a sub- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source somewhere extractor with nrows output rows, entropy |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| threshold k, deficiency def, resiliency res and error ǫ if for |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| every (n, k)-sources X, Y there exist a deficiency def sub- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source Xgood of X and a deficiency def subsource Ygood of |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Y such that for every deficiency res subsource X' of Xgood |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| and deficiency res subsource Y' of Ygood, the random vari- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| able SSE(X',Y') is ǫ-close to a ℓ × m somewhere random |XML| xmlLoc_4 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_centered bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| distribution. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| It turns out that our subsource somewhere extractor does |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_justified bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| satisfy this stronger definition. The advantage of this defi- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| nition is that it says that once we restrict our attention to |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| the good subsources Xgood, Ygood, we have the freedom to fur- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| ther restrict these subsources to smaller subsources, as long |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| as our final subsources do not lose more entropy than the |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| resiliency permits. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| This issue of managing the resiliency for the various ob- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| jects that we construct is one of the major technical chal- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| lenges that we had to overcome in our construction. |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 7. OPEN PROBLEMS |XML| xmlLoc_6 xmlAlign_justified xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| Better Independent Source Extractors A bottleneck to |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
bodyText ||| improving our disperser is the block versus general |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
bodyText ||| source extractor of Theorem 2.7. A good next step |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| would be to try to build an extractor for one block |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| source (with only a constant number of blocks) and |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| one other independent source which works for polylog- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| arithmic entropy, or even an extractor for a constant |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| number of sources that works for sub-polynomial en- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| tropy. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| Simple Dispersers While our disperser is polynomial time |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
bodyText ||| computable, it is not as explicit as one might have |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| hoped. For instance the Ramsey Graph construction |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| of Frankl-Wilson is extremely simple: For a prime p, |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| let the vertices of the graph be all subsets of [p3] of |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| size p2 − 1. Two vertices S, T are adjacent if and only |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| if |S ∩ T | ≡ −1 mod p. It would be nice to find a good |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| disperser that beats the Frankl-Wilson construction, |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
bodyText ||| yet is comparable in simplicity. |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
sectionHeader ||| 8. REFERENCES |XML| xmlLoc_1 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| [1] N. Alon. The shannon capacity of a union. |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| Combinatorica, 18, 1998. |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| [2] B. Barak. A simple explicit construction of an |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| n˜o(logn )-ramsey graph. Technical report, Arxiv, 2006. |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| http://arxiv.org/abs/math.CO/0601651. |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| [3] B. Barak, R. Impagliazzo, and A. Wigderson. |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| Extracting randomness using few independent sources. |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| In Proceedings of the 45th Annual IEEE Symposium |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| on Foundations of Computer Science, pages 384–393, |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| 2004. |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [4] B. Barak, G. Kindler, R. Shaltiel, B. Sudakov, and |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| A. Wigderson. Simulating independence: New |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| constructions of condensers, Ramsey graphs, |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| dispersers, and extractors. In Proceedings of the 37th |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| Annual ACM Symposium on Theory of Computing, |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| pages 1–10, 2005. |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [5] J. Bourgain. More on the sum-product phenomenon in |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_justified bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| prime fields and its applications. International Journal |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| of Number Theory, 1:1–32, 2005. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [6] J. Bourgain, N. Katz, and T. Tao. A sum-product |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_left bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| estimate in finite fields, and applications. Geometric |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| and Functional Analysis, 14:27–57, 2004. |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [7] M. Capalbo, O. Reingold, S. Vadhan, and |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| A. Wigderson. Randomness conductors and |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| constant-degree lossless expanders. In Proceedings of |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| the 34th Annual ACM Symposium on Theory of |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Computing, pages 659–668, 2002. |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [8] B. Chor and O. Goldreich. Unbiased bits from sources |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| of weak randomness and probabilistic communication |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| complexity. SIAM Journal on Computing, |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| 17(2):230–261, 1988. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| [9] P. Frankl and R. M. Wilson. Intersection theorems |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| with geometric consequences. Combinatorica, |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| 1(4):357–368, 1981. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| [10] P. Gopalan. Constructing ramsey graphs from boolean |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| function representations. In Proceedings of the 21th |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Annual IEEE Conference on Computational |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| Complexity, 2006. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| [11] V. Grolmusz. Low rank co-diagonal matrices and |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| ramsey graphs. Electr. J. Comb, 7, 2000. |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| [12] V. Guruswami. Better extractors for better codes? |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| Electronic Colloquium on Computational Complexity |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| (ECCC), (080), 2003. |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [13] C. J. Lu, O. Reingold, S. Vadhan, and A. Wigderson. |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| Extractors: Optimal up to constant factors. In |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| Proceedings of the 35th Annual ACM Symposium on |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Theory of Computing, pages 602–611, 2003. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [14] P. Miltersen, N. Nisan, S. Safra, and A. Wigderson. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_justified bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_new bi_xmlPara_new
reference ||| On data structures and asymmetric communication |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| complexity. Journal of Computer and System |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Sciences, 57:37–49, 1 1998. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
page ||| 679 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| [15] N. Nisan and D. Zuckerman. More deterministic |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_none bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| simulation in logspace. In Proceedings of the 25th |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Annual ACM Symposium on Theory of Computing, |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| pages 235–244, 1993. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [16] P. Pudlak and V. Rodl. Pseudorandom sets and |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| explicit constructions of ramsey graphs. Submitted for |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| publication, 2004. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| [17] A. Rao. Extractors for a constant number of |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| polynomially small min-entropy independent sources. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| In Proceedings of the 38th Annual ACM Symposium |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| on Theory of Computing, 2006. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| [18] R. Raz. Extractors with weak random seeds. In |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| Proceedings of the 37th Annual ACM Symposium on |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Theory of Computing, pages 11–20, 2005. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [19] O. Reingold, R. Shaltiel, and A. Wigderson. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| Extracting randomness via repeated condensing. In |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| Proceedings of the 41st Annual IEEE Symposium on |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Foundations of Computer Science, pages 22–31, 2000. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| [20] M. Santha and U. V. Vazirani. Generating |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| quasi-random sequences from semi-random sources. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| Journal of Computer and System Sciences, 33:75–87, |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| 1986. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [21] R. Shaltiel. Recent developments in explicit |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| constructions of extractors. Bulletin of the European |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Association for Theoretical Computer Science, |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| 77:67–95, 2002. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [22] A. Ta-Shma and D. Zuckerman. Extractor codes. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| IEEE Transactions on Information Theory, 50, 2004. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [23] U. Vazirani. Towards a strong communication |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
reference ||| complexity theory or generating quasi-random |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| sequences from two communicating slightly-random |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| sources (extended abstract). In Proceedings of the 17th |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| Annual ACM Symposium on Theory of Computing, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| pages 366–378, 1985. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes bi_xmlA_same bi_xmlS_new bi_xmlF_same bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_same
reference ||| [24] A. Wigderson and D. Zuckerman. Expanders that |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_new
reference ||| beat the eigenvalue bound: Explicit construction and |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
reference ||| applications. Combinatorica, 19(1):125–138, 1999. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no bi_xmlA_same bi_xmlS_same bi_xmlF_same bi_xmlSF_same bi_xmlSFBI_same bi_xmlSFBIA_same bi_xmlPara_same
page ||| 680 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no bi_xmlA_left bi_xmlS_new bi_xmlF_new bi_xmlSF_new bi_xmlSFBI_new bi_xmlSFBIA_new bi_xmlPara_new
