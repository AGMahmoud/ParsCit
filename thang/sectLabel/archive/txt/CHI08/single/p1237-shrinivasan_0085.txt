CHI 2008 Proceedings · Visualization to Support Information Work	April 5-10, 2008 · Florence, Italy
Often, the data is so complex and large that static visualiza-
tions fall short. Hence, interactions are needed to explore the 
data by modifying the data transformation, visual mappings 
and view transformation [10].
An interaction interface is defined as an interface that trans-
lates user actions such as mouse events, key events and other 
input events into visualization specifications. These interac-
tion interfaces enable the user to apply changes to various 
stages in visualization pipeline [10] such as the data orga-
nization, data filtering, data mapping on visual representa-
tion, and displaying to the user. A dynamic query interface 
is used for specifying data filters. A visual mapping inter-
face is used to specify transformations from data to visual 
representations, for instance, a data clustering interface and 
changing axes in a scatter plot. Direct manipulation is used 
to select objects for tracking or emphasis. A view settings 
interface is used to change color maps, form (shape) encod-
ing, camera parameters, overview and details, panning and 
zooming. These interfaces are some examples of how inter-
action interfaces help to specify visualizations interactively 
and explore complex dataset rapidly.
Navigation View
The navigation view provides an overview of the exploration 
process by capturing the visualization states automatically. 
We now describe a history tracking mechanism to capture 
the visualization states automatically.
In interactive visualization, the dataset D is transformed into 
an image I based on a specification S [34]. S includes visu-
alization methods, attribute filters, graphical filters applied 
through direct manipulation, color mappings, clustering and 
so forth. The user provides the specification St to the system 
based on the current knowledge Kt_1 to generate the image 
It. Kt is the total knowledge gained by the user. The user re-
peats the process of generating a new image It+1 by provid-
ing a new specification St+1 based on Kt, until the desired 
results are achieved. Thus, the user navigates through the 
data by changing S. Figure 2 shows the visualization state in 
the user navigation at time t.
Figure 2. The visualization state in the user navigation at time t
A new visualization state is recorded automatically when the 
visualization specification is changed via an interaction in-
terface. This allows users to roll back to previous visualiza-
tion states. When a visualization state is revisited, the image 
I is regenerated based on S and D of that state. The user 
can reuse the revisited visualization state by changing S and
D. This creates a new branch, resulting in a tree structured
navigation path that is similar to a history tree representation 
[7].
Initially, we use a history tree representation to show the 
structure of the exploration process. A node represents a
Figure 3. Navigation view
Figure 4. Navigation view implementation
visualization state. An edge between the adjacent nodes is 
labeled with the user action (see figure 3(a)). The history tree 
is drawn using a horizontal-vertical tree layout. A new node 
is appended to the tree at the right in the horizontal direction. 
A new branch is created below existing ones in the vertical 
direction. To avoid cluttering between edges, a right heavy 
horizontal-vertical layout algorithm is used [33]. Figure 3(a) 
shows the structure of the navigation. A branch represents a 
revisit and reuse of an already existing visualization state.
To understand the temporal context, it is important to see 
the sequence of visualization states along with the structure 
of the navigation. Figure 3(b)) shows the structure of the 
navigation ordered by time in the horizontal direction. The 
user can toggle between the two representations during the 
analysis via the settings interface (see figure 4(a)). The user 
can revisit the visualization states sequentially in the order 
of creation using back and forward arrow keys. This action 
is similar to the undo-redo mechanism. Also, the user can 
hover over a node to get information about the visualization 
state (see figure 4(c)) and jump to any visualization state in 
the navigation view. An overview window is used for pan-
ning over the history tree (see figure 4(d)).
When a visualization state is linked to objects in the knowl-
edge view, it is marked with a star in the navigation view 
(see figure 3 and figure 4(b)). The current visualization state 
in the navigation is highlighted in yellow.
Knowledge View
According to Larkin and Simon [23], a diagrammatic repre-
sentation is better than a sentential representation for search-
1240
