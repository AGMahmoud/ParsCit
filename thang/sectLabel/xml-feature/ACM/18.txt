A Resilient Packet-Forwarding Scheme against Maliciously |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_begin xmlFontSize_largest0 xmlFontSizeChange_begin xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Packet-Dropping Nodes in Sensor Networks |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest0 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Suk-Bok Lee and Yoon-Hwa Choi |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Department of Computer Engineering |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Hongik University |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
121-791 Seoul, Korea |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
{sblee, yhchoi}@cs.hongik.ac.kr |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ABSTRACT |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
This paper focuses on defending against compromised nodes’  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
dropping of legitimate reports and investigates the misbe- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
havior of a maliciously packet-dropping node in sensor net- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
works. We present a resilient packet-forwarding scheme us- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing Neighbor Watch System (NWS), specifically designed  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
for hop-by-hop reliable delivery in face of malicious nodes  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
that drop relaying packets, as well as faulty nodes that  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
fail to relay packets. Unlike previous work with multipath  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
data forwarding, our scheme basically employs single-path  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
data forwarding, which consumes less power than multipath  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
schemes. As the packet is forwarded along the single-path  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
toward the base station, our scheme, however, converts into  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
multipath data forwarding at the location where NWS de- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tects relaying nodes’ misbehavior. Simulation experiments  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
show that, with the help of NWS, our forwarding scheme  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
achieves a high success ratio in face of a large number of  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet-dropping nodes, and effectively adjusts its forwarding  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
style, depending on the number of packet-dropping nodes  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
en-route to the base station. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Categories and Subject Descriptors |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
C.2.0 [Computer-Communication Networks]: General—  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Security and protection |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
General Terms |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Security, Algorithm, Reliability |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Keywords |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Sensor Network Security, Reliable Delivery, Packet-dropping  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Attacks, Secure Routing |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
1. INTRODUCTION |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Wireless sensor networks consist of hundreds or even thou- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sands of small devices each with sensing, processing, and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Permission to make digital or hard copies of all or part of this work for  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
personal or classroom use is granted without fee provided that copies are  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
not made or distributed for profit or commercial advantage and that copies  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bear this notice and the full citation on the first page. To copy otherwise, to  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
republish, to post on servers or to redistribute to lists, requires prior specific  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
permission and/or a fee. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
SASN’06, October 30, 2006, Alexandria, Virginia, USA. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Copyright 2006 ACM 1-59593-554-1/06/0010 ...$5.00. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
communicating capabilities to monitor the real-world envi- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ronment. They are envisioned to play an important role  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
in a wide variety of areas ranging from critical military-  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
surveillance applications to forest fire monitoring and the  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
building security monitoring in the near future. In such a  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network, a large number of sensor nodes are distributed to  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
monitor a vast field where the operational conditions are  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
harsh or even hostile. To operate in such environments, se- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
curity is an important aspect for sensor networks and secu- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
rity mechanisms should be provided against various attacks  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
such as node capture, physical tampering, eavesdropping,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
denial of service, etc [23, 33, 38]. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Previous research efforts against outsider attacks in key-  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
management schemes [4, 13, 32] and secure node-to-node  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
communication mechanisms [24, 32] in sensor networks are  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
well-defined. Those security protections, however, break  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
down when even a single legitimate node is compromised.  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
It turns out to be relatively easy to compromise a legiti- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
mate node [14], which is to extract all the security infor- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
mation from the captured node and to make malicious code  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
running for the attacker’s purpose. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Even a small number of compromised nodes can pose  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
severe security threats on the entire part of the network,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
launching several attacks such as dropping legitimate re- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ports, injecting bogus sensing reports, advertising inconsis- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tent routing information, eavesdropping in-network commu- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nication using exposed keys, etc. Such disruption by the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
insider attacks can be devastating unless proper security  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
countermeasures against each type of attacks are provided.  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In reality, detecting all of the compromised nodes in the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network is not always possible, so we should pursue grace- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ful degradation [35], with a small number of compromised  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes. The fundamental principle for defense against the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
insider attacks is to restrict the security impact of a node  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
compromise as close to the vicinity of the compromised node  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as possible. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
When the attacker compromises a legitimate node, it may  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
first try to replicate the captured node indefinitely with the  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
same ID and spread them over the network. Against such  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
attacks, a distributed detection mechanism (based on emer- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
gent properties [11]) has been proposed by Parno et al. [31].  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In addition, Newsome et al. [30] have presented the tech- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
niques that prevent the adversary from arbitrarily creating  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
new IDs for nodes. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Using cryptographic information obtained from a cap- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tured node, attackers can establish pairwise keys with any  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
legitimate nodes in order to eavesdrop communication any- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
59 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
where in the network. Localized key-establishment scheme  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
by Zhu et al. [46] is a good solution against such an in- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sider attack. Since the scheme does not allow a cloned node  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(by inside-attackers) to establish pairwise keys with any le- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
gitimate nodes except the neighbors of the compromised  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes, the cryptographic keys extracted from the compro- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
mised node are of no use for attackers. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Compromised nodes can also inject false sensing reports  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to the network (i.e. report fabrication attacks [39]), which  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
causes false alarms at the base station or the aggregation  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
result to far deviate from the true measurement. Proposed  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
en-route filtering mechanisms [8, 39, 41, 44, 47] that de- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tect and drop such false reports effectively limit the impact  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of this type of attacks. Also, proposed secure aggregation  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
protocols [34, 40] have addressed the problem of false data  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
injection, and they ensure that the aggregated result is a  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
good approximation to the true value in the presence of a  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
small number of compromised nodes. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Advertising inconsistent routing information by compro- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
mised nodes can disrupt the whole network topology. Hu et  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
al. [19, 20] have proposed SEAD, a secure ad-hoc network  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
routing protocol that uses efficient one-way hash functions  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to prevent any inside attackers from injecting inconsistent  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
route updates. A few secure routing protocols [6, 27] in sen- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sor networks have been proposed to detect and exclude the  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
compromised nodes injecting inconsistent route updates. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Compromised nodes also can silently drop legitimate re- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ports (i.e. selective forwarding attacks [23]), instead of for- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
warding them to the next-hop toward the base station. Since  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
data reports are delivered over multihop wireless paths to  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the base station, even a small number of strategically-placed  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet-dropping nodes can deteriorate the network through- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
put significantly. In order to bypass such nodes, most work  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
on secure routing and reliable delivery in sensor networks re- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
lies on multipath forwarding scheme [5, 6, 7, 10], or interleaved-  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
mesh forwarding scheme [26, 29, 39, 42]. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Among the insider attacks described above, this paper fo- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cuses on defense against compromised nodes’ dropping of le- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
gitimate reports and we present a resilient packet-forwarding  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme using Neighbor Watch System (NWS) against ma- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
liciously packet-dropping nodes in sensor networks. We in- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
vestigate the misbehavior of a maliciously packet-dropping  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node and show that an acknowledgement (ACK) that its  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packets were correctly received at the next-hop node does  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
not guarantee reliable delivery from the security perspective. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
NWS is specifically designed for hop-by-hop reliable de- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
livery in face of malicious nodes that drop relaying packets,  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as well as faulty nodes that fail to relay packets. Unlike pre- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
vious work [10, 29, 42] with multipath data forwarding, our  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme basically employs single-path data forwarding, which  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
consumes less power than multipath schemes. As the packet  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
is forwarded along the single-path toward the base station,  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
our scheme, however, converts into multipath data forward- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing at the location where NWS detects relaying nodes’ mis- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
behavior. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
NWS exploits the dense deployment of large-scale static  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sensor networks and the broadcast nature of communication  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
pattern to overhear neighbors’ communication for free. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The contribution of this paper is two-fold. First, we in- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
vestigate the misbehavior of a maliciously packet-dropping  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node and propose a resilient packet-forwarding scheme, which  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
basically employs single-path data forwarding, in face of  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
such nodes, as well as faulty nodes. Second, our scheme  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
can work with any existing routing protocols. Since it is  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
designed not for securing specific protocols but for universal  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
protocols, it can be applied to any existing routing protocols  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as a security complement. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The rest of paper is organized as follows. Background is  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
given in Section 2. We present our resilient packet-forwarding  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
scheme in Section 3. An evaluation of the scheme is given  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
and discussed in Section 4. We present conclusions and fu- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
ture work in Section 5. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
2. BACKGROUND  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
2.1 Network Model |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Sensor networks typically comprise one or multiple base  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
stations and hundreds or thousands of inexpensive, small,  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
static, and resource-constrained nodes scattered over a wide  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
area. An inexpensive sensor node cannot afford tamper-  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
resistant packaging. We assume that a large number of sen- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
sor nodes are deployed in high density over a vast field, such  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
that the expected degree of a node is high; each sensor has  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
multiple neighbors within its communication range. Sensing  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
data or aggregated data are sent along the multihop route  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
to the base station. We assume that each sensor node has  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
a constant transmission range, and communication links are  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
bidirectional. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Our sensor network model employs a key-establishment  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
scheme that extends the one in LEAP [46] where the im- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
pact of a node compromise is localized in the immediate  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
neighborhood of the compromised node, and our scheme is  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
based on it. To evolve from LEAP, we will describe it briefly  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
in Section 2.4. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
2.2 Threat Model |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The attacks launched from outsiders hardly cause much  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
damage to the network, since the rouge node, which does not  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
possesses the legitimate credentials (e.g. the predistributed  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
key ring from the key pool [13]), fails to participate in the  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
network. On the other hand, there may be multiple attacks  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
from insiders (e.g. dropping legitimate reports, injecting  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
false sensing reports, advertising inconsistent route infor- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
mation, and eavesdropping in-network communication us- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
ing exposed keys, etc), and the combination of such attacks  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
can lead to disruption of the whole network. Thus, proper  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
security countermeasures (specifically designed to protect  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
against each type of the attacks) should be provided. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Among them, in this paper, we focus on defending against  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
compromised nodes’ dropping of legitimate reports; Other  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
attacks mentioned above are effectively dealt with by several  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
proposed schemes as described in the previous section. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
We consider a packet-dropping node as not merely a faulty  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
node, but also an arbitrarily malicious node. Some previous  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
work [3, 29, 36] on reliable delivery uses an acknowledge- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
ment (ACK) that its packets were correctly received at the  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
next-hop node, in order to find out unreliable links. How- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
ever, in the presence of maliciously packet-dropping nodes,  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
simply receiving ACK from a next-hop node does not guar- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
antee that the packet will be really forwarded by the next-  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
hop node. For example, node u forwards a packet to com- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
promised node v, and node u waits for ACK from node v.  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Node v sends back ACK to node u, and then node v silently  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
drops the packet. This simple example shows that receiving  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
ACK is not enough for reliable delivery in face of maliciously  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
packet-dropping nodes. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
60 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
For more reliability, we should check whether the next-  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
hop node really forwards the relaying packet to its proper  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
next-hop node. Fortunately, due to the broadcast nature of  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
communication pattern in sensor networks, we can overhear  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbors’ communication for free (for now per-link encryp- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tion is ignored). After forwarding a packet to next-hop node |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v and buffering recently-sent packets, by listening in on node  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v’s traffic, we can tell whether node v really transmits the  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet. Watchdog [28] mechanism (extension to DSR [22]),  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
implicit ACK in M2 RC [29], and local monitoring in DI-  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
CAS [25] detect misbehaving nodes in this way. However,  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
this kind of simple overhearing schemes does not guarantee  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
reliable delivery, either. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
With arbitrarily malicious nodes, we should be assured  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
that the node, to which the next-hop node forwards the  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
relaying packet, is really a neighbor of the next-hop node.  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
For example, node u forwards a packet to compromised node |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v, and node u listens in on node v’s traffic to compare each  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
overheard packet with the packet in the buffer. Node v  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
transmits the relaying packet whose intended next-hop id  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
marked with any id in the network such as x that is not a  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor of v. Then node u overhears this packet from node |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v, and considers it forwarded correctly despite the fact that  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
none actually receives the packet. The packet is eventually  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
dropped without being detected. We refer to this attack as  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
blind letter attack. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
We consider packet-dropping attacks to be addressed in  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
this paper as ones ranging from the naive case (e.g. a faulty  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node) to the most malicious one (e.g. a node launching  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
blind letter attack). We focus on developing a solution to  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
such attacks. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
2.3 Notation |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
We use the following notation throughout the paper: |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
•	u, v are principals, such as communicating nodes. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
•	R.. is a random number generated by u. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
•	fK is a family of pseudo-random function [12]. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
•MAC(K, M1 |M2) denotes the message authentication  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
code (MAC) of message - concatenation of M1 and M2,  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
with MAC key K. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
2.4 Key-Establishment Scheme in LEAP |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
LEAP supports the establishment of four types of keys for  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
each sensor node - an individual key shared with the base  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
station, a pairwise key shared with its neighbor, a cluster  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
key shared with its surrounding neighbors, and a group key  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
shared by all the nodes in the networks. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
It assumes that the time interval Test for a newly deployed  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sensor node to complete the neighbor discovery phase (e.g.  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tens of seconds) is smaller than the time interval T.i. that is  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
necessary for the attacker to compromise a legitimate node  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(i.e. T�i. &gt; Test). Some existing work [1, 39] has made  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
similar assumptions, which are believed to be reasonable. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The four steps for a newly added node u to establish a  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
pairwise key with each of its neighbors are as follows: |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
1. KEY PRE-dIStRIbUtIOn. Each node u is loaded with  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
a common initial key KI, and derives its master key |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
K.. = fKI (u).  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
2. NEIghbOR DISCOVERY. Once deployed, node u sets  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
up a timer to fire after time T�i., broadcasts its id,  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
and waits for each neighbor v’s ACK. The ACK from  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
v is authenticated using the master key K, of node v.  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Since node u knows KI, it can derive K, = fKI (v). |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
u−→∗: u,R... |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
v−→u: v, MAC(K,, R.. |v). |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
3. PAIRWISE KEY EStAblIShmEnt. Node u computes its  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
pairwise key with v, K..,, as K.., = fKv (u). Node v  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
also computes K.., in the same way. K.., serves as  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
their pairwise key. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
4. KEY ERASURE. When its timer expires, node u erases  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
KI and all the master keys of its neighbors. Every  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
node, however, keeps its own master key, in order to  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
establish pairwise keys with later-deployed nodes. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Once erasing KI, a node will not be able to establish a  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
pairwise key with any other nodes that have also erased KI.  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Without KI, a cloned node (by an attacker compromising a  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
legitimate node after T.i.) fails to establish pairwise keys  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with any nodes except the neighbors of the compromised  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node. In such a way, LEAP localizes the security impact of  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
a node compromise. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
3. A RESILIENT PACKET-FORWARDING  |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
SCHEME USING NEIGHBOR WATCH SYS- |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
TEM |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
In this section, we present our resilient packet-forwarding  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme using Neighbor Watch System (NWS). NWS works  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with the information provided by Neighbor List Verification  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(NLV) to be described in Section 3.2. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
3.1 Neighbor Watch System |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Our scheme seeks to achieve hop-by-hop reliable delivery  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
in face of maliciously packet-dropping nodes, basically em- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ploying single-path forwarding. To the best of our knowl- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
edge, proposed works so far rely on multipath forwarding  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
or diffusion-based forwarding, exploiting a large number of  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes in order to deliver a single packet. ACK-based tech- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nique is not a proper solution at all as explained in the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
previous section. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
With NWS, we can check whether the next-hop node re- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ally forwards the relaying packet to the actual neighbor of  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the next-hop node. The basic idea of our scheme is as fol- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
lows: |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
1. Neighbor List Verification. After deployment, dur- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
ing neighbor discovery phase, every node u gets to  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
know of not only its immediate neighbors, but also the  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
neighbors’ respective neighbor lists (i.e. u’s neighbors’  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
neighbor lists). The lists are verified using Neighbor  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
List Verification to be described in Section 3.2. Every  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
node stores its neighbors’ neighbor lists in the neighbor  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
table. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
2. Packet Forwarding to Next-hop. If node u has  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
a packet to be relayed, it buffers the packet and for- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
wards the packet (encrypted with cluster key of node  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
u so that neighbors of node u can overhear it) to its  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
next-hop node v. As in LEAP, a cluster key is a key  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
shared by a node and all its neighbors, for passive par- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
ticipation. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
61 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Figure 1: Neighbor Watch System. Sub-watch  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes w and y, as well as primary-watch node u lis- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ten in on v’s traffic. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
3. Designation of Watch Nodes. Overhearing the  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
packet from node u to node v, among neighbors of  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
node u, the nodes that are also neighbors of node v (in  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Figure 1, nodes w and y) are designated as sub-watch  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
nodes and store the packet in the buffer. Other nodes  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
(that are not neighbors of node v) discard the packet.  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Node u itself is a primary-watch node. A primary-  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
watch node knows which nodes are sub-watch nodes,  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
since every node has the knowledge of not only its  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
neighbors but also their respective neighbor lists. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
4. Neighbor Watch by Sub-Watch Node. Sub-watch  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
nodes w and y listen in on node v’s traffic to compare  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
each overheard packet with the packet in the buffer.  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
To defend against blind letter attack, each of them  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
also checks whether the packet’s intended next-hop is  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
a verified neighbor of node v, by looking up the neigh- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
bor table. If all correct, the packet in the buffer is  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
removed and the role of the sub-watch node is over.  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
If the packet has remained in the buffer for longer  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
than a certain timeout, sub-watch nodes w and y for- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
ward the packet (encrypted with their respective clus- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
ter keys) to their respective next-hop nodes other than  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
node v. Then the role of a sub-watch node is over (each  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
of them is now designated as a primary-watch node for  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
the packet it has forwarded). |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
5. Neighbor Watch by Primary-Watch Node. Primary- |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
watch node u does the same job as sub-watch nodes. |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
The only difference, however, is that it listens in on |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
not only node v’s traffic, but also sub-watch nodes w’s |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
and y’s. If the packet is correctly forwarded on by at |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
least one of them (nodes v, w, or y), primary-watch |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
node u removes the packet in the buffer and the role |XML| xmlLoc_5 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
of the primary-watch node is over. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Otherwise, after a certain timeout, primary-watch node  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
u forwards the packet (encrypted with its cluster key)  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
to its next-hop other than node v. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
As the packet is forwarded on, this procedure (except for  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Neighbor List Verification) of NWS is performed at each  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
hop so that hop-by-hop reliable delivery can be achieved  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with mainly depending on single-path forwarding. On the  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
other hand, in the previous approaches [29, 39, 42], when  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
forwarding a packet, a node broadcasts the packet with no  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
designated next-hop, and all neighbors with smaller costs&apos; |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
&apos;The cost at a node is the minimum energy overhead to |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Figure 2: An example of our packet-forwarding  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme. Only the nodes that relay the packet are  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
presented. With the help of sub-watch nodes (grey  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ones), our scheme bypasses two packet-dropping  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes en-route to the base station. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
or within a specific geographic region continue forwarding  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the packet anyway. For example, in Figure 1, if nodes v,  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
w, and y have smaller costs than node u in the previous  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
approaches, they all forward2 the packet from node u. In  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
our scheme, however, sub-watch nodes w and y are just on  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
watch in designated next-hop node v, instead of uncondi- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tionally forwarding the packet. If no packet-dropping occurs  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
en-route to the base station, the packet may be forwarded  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
along single-path all the way through. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
However, a packet-dropping triggers the multipath for- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
warding for the dropped packet. If the designated next-hop  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node v in Figure 1 has not forwarded the relaying packet to  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
its certified neighbor by a certain timeout, sub-watch nodes  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
w and y forward the packet to their respective next-hop.  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
At the point, the packet is sent over multiple paths. Since  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the location where the packet-dropping occurs is likely in  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
an unreliable region, this prompt reaction of the conver- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sion to multipath forwarding augments the robustness in our  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme. The degree of multipath depends on the number of  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the sub-watch nodes. Figure 2 shows an example of our  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet-forwarding scheme, bypassing two packet-dropping  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes en-route to the base station. If a node utilizes a cache  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
[16, 21] for recently-received packets, it can suppress the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
same copy of previously-received one within a certain time-  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
out, as nodes u and v in Figure 2. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Our scheme requires that a relaying packet should be en- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
crypted with a cluster key of a forwarding node, in order  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
that all its neighbors can decrypt and overhear it. In fact,  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
per-link encryption provides better robustness to a node  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
compromise, since a compromised node can decrypt only  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the packets addressed to it. Thus, there exists a tradeoff  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
between resiliency against packet-dropping and robustness  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to a node compromise. However, encryption with a cluster  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
key provides an intermediate level of robustness to a node  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
compromise [24] (a compromised node can overhear only  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
its immediate neighborhood), and also supports local broad- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cast (i.e. resiliency against packet-dropping), so that we can  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
achieve graceful degradation in face of compromised nodes. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
forward a packet from this node to the base station. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
2It is the broadcast transmission with no designated next-  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
hop, and, if needed, the packet should be encrypted with a  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cluster key in order for all neighbors to overhear it. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
y |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
v |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
w |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Base  |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Station |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
v |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_largest-1 xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
u |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-1 xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
62 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
To make our scheme work (against blind letter attack), we  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
must address the problem of how a node proves that it re- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ally has the claimed neighbors. It is the identical problem of  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
how a node verifies the existence of its neighbors’ neighbors.  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Apparently, a node has the knowledge of its direct neigh- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bors by neighbor discovery and pairwise key establishment  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
phases. However, in the case of two-hop away neighbors,  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as in Figure 1, malicious node v can inform its neighbor u  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
that it also has neighbor node x (any possible id in the net- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
work) which in fact is not a neighbor of node v. Node u has  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to believe it, since node x is not a direct neighbor of node  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u, and only the node v itself knows its actual surrounding  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbors. Then, how do we verify the neighbors’ neigh- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bors? The answer to this critical question is described in  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the next subsection. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
3.2 Neighbor List Verification |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
To verify neighbors’ neighbors, we present Neighbor List  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Verification (NLV) which extends the pairwise key estab- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
lishment in LEAP. During neighbor discovery in LEAP, two  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
messages are exchanged between neighbors to identify each  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
other. On the other hand, NLV adopts three-way handshak- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing neighbor discovery, in order to identify not only com- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
municating parties but also their respective neighbors. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
NLV has two cases of neighbor discovery. One is that  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor discovery between two nodes that are both still  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
within the initial Tmin3 (referred as pure nodes). The other  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
is that neighbor discovery between a newly-deployed node  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
within the initial Tmin and an existing node over the initial  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Tmin (referred as an adult node). |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Neighbor Discovery between Pure Nodes. Neighbor  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
list verification process between pure nodes is quite simple.  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
If a pure node broadcasts its neighbor list before the elapse of  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
its initial Tmin, we can accept the list as verifiable. Thus, the  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
key point here is to keep track of each other’s Tmin, and to  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
make sure that both broadcast their respective neighbor lists  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
before their respective Tmin. The following shows the three-  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
way handshaking neighbor discovery between pure node u  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and v: |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u----+*: u,Ru. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
v ----+u : �v, Tv, �Rv ,  MAC(Kv, Ru J Ku JMv). |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
M„ |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
u----+v: u,Tu , MAC(Kuv, RvJMu). |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
M. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
where Tv and Tu are the amount of time remaining until  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Tmin of v and Tmin of u, respectively. Once deployed, node |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u sets up a timer to fire after time Tmin. Then, it broadcasts  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
its id, and waits for each neighbor v’s ACK. The ACK from  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
every neighbor v is authenticated using the master key Kv of  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node v. Since node u knows KI4, it can derive Kv = fKI (v).  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The ACK from node v contains Tv, the amount of time  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
remaining until Tmin of node v. If Tv is a non-zero value,  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node v claims to be a pure node. Ku in MAC proves node |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v to be a pure node, since pure node v should know KI  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and derive Ku = fKI (u). Node u records ˇTv (Tv added |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
3Tmin is the time interval, necessary for the attacker to com- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
promise a legitimate node as in LEAP [46]. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4Each node u is loaded with a common initial key KI, and  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
derives its master key Ku = fKI (u). After time Tmin, node  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u erases KI and all the master keys of its neighbors. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Figure 3: Neighbor Discovery between Pure node x  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and Adult node u. Grey and white nodes represent  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
adult and pure nodes, respectively. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to the current time of node u) in the entry for node v in  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the neighbor table. Node u computes its pairwise key with |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v, Kuv = fK„ (u).5 Node u also generates MAC(Kv, v Ju)  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(which means that v certifies u as an immediate neighbor),  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and stores it as a certificate. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The ACK from node u also contains Tu, the amount of  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
time remaining until Tmin of u. This ACK is authenticated  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
using their pairwise key Kuv, which proves node u a pure  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node and u’s identity. Node v then records ˇTu (Tu added  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to the current time of v) in the entry for u in the neighbor  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
table. It also generates MAC(Ku, uJv) and stores it as a  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
certificate. Then, the three-way handshaking is done. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Every pure node u broadcasts its neighbor list just prior  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to Tmin of u. Each receiving neighbor v checks whether the  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
receiving time at v is prior to ˇTu in the neighbor table. If  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
yes, the neighbor list of u is now certified by each neighbor v. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Neighbor Discovery between A Pure Node and An  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Adult node. After most nodes have completed bootstrap- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ping phase, new nodes can be added in the network. Con- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sider Figure 3. The issue here is how adult node u can as- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sure its existing neighbors (v and w) of the existence of its  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
newly-added neighbor x. This is a different situation from  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the above neighbor list verification case between two pure  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes. Thus, the messages exchanged during the three-way  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
handshaking are somewhat different in this case. The fol- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
lowing shows the three-way handshaking neighbor discovery  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
between pure node x and adult node u: |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
x----+ * :	x, Rx. |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
, MAC(Kxu, Ru JMx). |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Newly-added node x sets up a timer to fire after time Tmin.  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Then, it broadcasts its id, and waits for each neighbor u’s |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
5Node v also computes Kuv in the same way. Kuv serves as  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
their pairwise key. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
r |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
t |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
z |XML| xmlLoc_0 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
v |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
w |XML| xmlLoc_0 xmlAlign_right xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
u |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
x |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
q |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
certificate ��	� |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
certificate ��	� |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
u----+ x : u, Tu, Ru, v,	MAC(Kv, vJu), w, MAC(Kw, wJu) |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
	�	��	� |XML| xmlLoc_5 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
M. |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes
, MAC(Ku, Rx JMu). |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes
x----+u:	certificate ��	�	one—time cert. �	one—time cert. |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
			^ � |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no
MAC(Kx, xJu), v, MAC(Kv, xJu), w, MAC(Kw, xJu) |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
�	��	� |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Ms |XML| xmlLoc_6 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
x, Tx, |XML| xmlLoc_6 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
63 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
ACK. The ACK from every neighbor u is authenticated us- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing the master key Ku of node u. Since node x knows KI,  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
it can derive Ku = fKI (u). The ACK from node u contains  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Tu, the amount of time remaining until Tmin of u. If Tu is  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
zero, node u is an adult node that may already have mul- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tiple neighbors as in Figure 3. Node u reports its certified  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor list (v and w) to x by including their respective  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
certificates in the ACK. Node x verifies u’s neighbor list by  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
examining each certificate, since x can generate any certifi- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cate with KI. If all correct, x computes its pairwise key with  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u, Kxu = fKu (x). Node x also generates MAC(Ku, ujx) and  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
stores it as a certificate. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The ACK from x also contains Tx, the amount of time  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
remaining until Tmin of x. This ACK is authenticated using  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
their pairwise key Kxu, which proves node x a pure node  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and x’s identity. Node u then records ˇTx (Tx added to the  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
current time of u) in the entry for x in the neighbor table.  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Since adult node u cannot generate MAC(Kx, xju) by itself,  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
pure node x provides the certificate for u in the ACK. Node |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
x also provides one-time certificates6 for each of u’s certified  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbors (v and w). Then, the three-way handshaking is  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
done. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
After that, adult node u broadcasts one-time certificates  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(from newly-discovered pure node x), in order to assure u’s  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
existing neighbors (v and w) of the discovery of new neighbor |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
x. The packet containing one-time certificates is as follows: |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Mu |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
, MAC(Kcu, Mu). |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
where x is a new neighbor of u, KAu is a local broadcast au- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
thentication key in u’s one-way key chain, Kcu is the cluster  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
key of u. Each receiving neighbor v of u verifies u’s new  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor x by examining the one-time certificate designated  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
for v, MAC(Kv, xju)6. If ok, node x is now certified by each  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor v of u. Then, one-time certificates can be erased,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
since they are of no use any more. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Broadcast authentication only with symmetric keys such  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as cluster key Kcu fails to prevent an impersonation attack,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
since every neighbor of u shares the cluster key of u. Thus,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
we employ the reverse disclosure of one-way key chain KAu  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as in LEAP. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Just prior to Tmin of x, pure node x broadcasts its neigh- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bor list. Each receiving neighbor u of x checks whether the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
receiving time at u is prior to ˇTx in the neighbor table. If  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
yes, the neighbor list of x is now certified by each neighbor u. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In summary, through the proposed three-way handshak- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing neighbor discovery process, pure node u identifies each  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
immediate neighbor v and v’s certified neighbor list (if v is  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
an adult node), and keeps track of Tmin of v. Just prior  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to Tmin of u, node u broadcasts its direct neighbor list so  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
that every neighbor of u accepts the list as verifiable. Then,  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node u becomes an adult node. After that, if newly-added  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node x initiates neighbor discovery with adult node u, node |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u identifies pure node x, keeps track of Tmin of x, provides  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u’s certified neighbor list to x, and, in return, takes one-time  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
certificates from x. Node u then broadcasts these one-time |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
6One-time certificate, for instance MAC(Kv, xju), assures |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v that x is an immediate neighbor of u. It is generated by  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
pure node x with master key of v. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Table 1: An example of the Neighbor Table of u. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Neighbor ID	Certificate	Verified Neighbor List |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no
v	MAC(Kv, v ju)	u, w, t |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no
w	MAC(Kw, wju)	u, v, z |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no
x	MAC(Kx, xju)	u, r, q |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no
certificates, in order to assure u’s existing neighbors of the  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
discovery of new neighbor x. Thus, every time adult node u  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
discovers newly-added node x through three-way handshak- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing, node u informs (by broadcasting) its existing neighbors  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of the discovery of new neighbor x. Also, whenever receiv- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ing neighbor list information from pure neighbor x, node u  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
checks whether the receiving time at u is prior to ˇTx in the  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor table. If yes, u now accepts the neighbor list of x  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as verifiable. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Through the above neighbor list verification in the boot- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
strapping phase, every node gets the knowledge of its neigh- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bors’ certified neighbors. Our Neighbor Watch System makes  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
use of this information to prevent blind letter attack. With  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
this knowledge, watch nodes are able to check whether the  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
relaying packet’s intended next-hop is a verified neighbor of  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the forwarding node. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
3.3 Neighbor Table Maintenance |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The information obtained through neighbor list verifica- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tion (e.g. its direct neighbors, corresponding certificates,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbors’ neighbor lists, etc) is stored in the neighbor table  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of each node. Table 1 shows an example of the neighbor  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
table of node u. In densely-deployed sensor networks, the  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
expected degree of a node is high. However, in this example,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
for simplicity, node u has only three neighbors v, w, and x  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as in Figure 3. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The entries in the neighbor table are accessed and main- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tained with immediate neighbor IDs. For example, if node  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u overhears the packet sent from w to v, node u begins to  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
listen in on v’s traffic as a sub-watch node (since the neigh- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bor table of u has both v’s and w’s entries in it). Unless v  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
forwards the packet to a node of the Verified Neighbor List  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
in v’s entry by a certain timeout, sub-watch node u will for- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ward the packet to its next-hop other than v; many existing  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
routing protocols [5, 18, 21, 27, 37, 43] enable each node to  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
maintain multiple potential next-hop. Once forwarding the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet, sub-watch node u becomes a primary-watch node  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and begins to listen in on its next-hop’s traffic as described  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
above. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
If newly-added node y initiates the three-way handshaking  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with u, node u provides its neighbor list to y by sending  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
certificates in the neighbor table. Node u, in return from  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node y, takes the certificate for y and one-time certificates  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
for u’s existing neighbors. Then, node u stores the certificate  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
in the new entry for y. However, node u does not store the  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
one-time certificates but broadcasts them to its neighbors.  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
If new neighbor y broadcasts its neighbor list within Tmin,  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node u stores the list in the entry for y. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
If node u is compromised, not only cryptographic key  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
information but also certificates in the neighbor table are  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
exposed. However, the attacker cannot misuse these cer- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tificates for other purposes. Since a certificate only attests  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighborship between two specific nodes, it cannot be ap- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
plied to any other nodes. In fact, it can be made even public.  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
However, colluding nodes can deceive a pure node anyway, |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
one—time cert.	one—time cert. |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
� �	� |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes
MAC(Kv, xju), w, MAC(Kw, xju), KAu |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
�	��	� |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
u____+ * :	u, x, v, |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
� |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
64 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
by fabricating a bogus certificate. We will describe this lim- |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
itation in Section 4.4. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4. EVALUATION |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In this section, we evaluate the communication and stor- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
age cost, and analyze the security of our resilient forwarding  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme (Neighbor Watch System) as well as Neighbor List  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Verification. We then present the simulation results of our  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
forwarding scheme. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.1 Communication Cost |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Unlike the previously proposed diffusion-based reliable-  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
forwarding schemes [21, 29, 39, 42] that exploit a large num- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ber of nodes to deliver a single packet, our scheme requires  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
only the designated next-hop node to relay the packet, un- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
der the supervision of watch nodes. We note that, like over- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
hearing by watch nodes in our scheme, those diffusion-based  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
schemes require each node to listen to all its neighbors, since  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
they forward a packet by broadcasting with no designated  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
next-hop. With a smaller number of relaying nodes, our  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme makes a report successfully reach the base station.  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Thus, the average communication cost of our forwarding  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme for delivery of a single packet is smaller than those  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of the previous schemes. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Our neighbor list verification during the bootstrapping  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
phase requires the three-way handshaking neighbor discov- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ery. Unlike the neighbor discovery between two pure nodes,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the size of the messages exchanged between a pure and an  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
adult node varies with the degree of the adult node. A large  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
number of certificates caused by the high degree can be over-  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
burdensome to a single TinyOS packet which provides 29  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bytes for data. Considering 8-byte certificates and a 4-byte7  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
message authentication code (MAC), the adult node is able  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to include at most two neighbors’ information in a single  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
TinyOS packet. Thus, when the entire neighbor list cannot  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
be accommodated within a single packet, the node should  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
allot the list to several packets and send them serially. In a  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network of size N with the expected degree d of each node,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the average number of packets invoked by a newly-added  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node per each node is nearly (d — 1)2/2(N — 1). |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Therefore, as node density d grows, the total number  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of packets transmitted from adult nodes to a newly-added  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node increases. However, neighbor discovery between a pure  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and an adult node occurs much less than between two pure  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes, since most neighbor discoveries throughout the net- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
work are between two pure nodes in the early stage of the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network. Neighbor discovery between a pure and an adult  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node occurs generally when a new node is added to the net- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
work. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.2 Storage Overhead |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In LEAP, each node keeps four types of keys and a man- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ageable length of hash chain, which is found to be scalable.  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In our scheme, each node needs to additionally store its di- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
rect neighbors’ certificates and their respective neighbor lists  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
as in Table 1. Thus, for a network of the expected degree  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
d and the byte size l of node ID, the additional storage re- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
quirement for each node is d • (8 + ld) bytes. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Although our storage requirement for these neighbor lists  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
is O(d 2), for a reasonable degree d, memory overhead does |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
74-byte MAC is found to be not detrimental in sensor net- |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
works as in TinySec [24] which employs 4-byte MAC. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Figure 4: Examples of critical area C1 and C2. |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
not exceed 1 KB (a Berkeley MICA2 Mote with 128 KB  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
flash memory and 4 KB SRAM). For example, when d = 20  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
and l = 2, a node needs 960 bytes of memory to store such  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
information. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
If node density of a network is so high that the required  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
space for those neighbor lists significantly increases and the  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
storage utilization becomes an issue, we can employ a storage-  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
reduction technique such as Bloom filter [2]. For example,  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
when d = 30 and l = 2, a node requires 2,040 bytes of addi- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tional space mainly for the neighbor lists. Instead of storing  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbors’ neighbor lists, applying each of the neighbor lists  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(480 bits) to a Bloom filter (of 5 hash functions mapping to  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
a 256 bit vector), a node needs the reduced space of 1,200  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bytes for such information (with the false positive probabil- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ity = 0.02). |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.3 Resilience to Packet-Dropping Attacks |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In face of maliciously packet-dropping nodes, the higher  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
degree of multipath we provide, the more resiliency our  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme achieves against such attacks. The average degree  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of multipath depends on the number of sub-watch nodes  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
around a packet-dropping node. Sub-watch nodes should  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
be located in the region within the communication range of  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
both forwarding node u and designated next-hop v. We re- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
fer to such a region as critical area. As in Figure 4, if nodes  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u and v are located farther away, the size of critical area C2  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
gets smaller than that of C1, and the probability (p.) that  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
at least one sub-watch node exists in the critical area goes  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
down. The probability (p.) is |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
p. = 1 — (1 — c)d-1, |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
where c is the ratio of the critical area size to the node’s com- |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
munication range, and the expected degree d of the node. |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
To determine the appropriate degree d, we set the smallest  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
critical area C2 in Figure 4 as a lower bound case (c = 0.4).  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Figure 5 shows that, even in the lower bound critical area,  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with d = 6 and d = 10, probability p. is above 0.9 and above  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
0.99, respectively. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Since, in a network of degree d, the probability that there  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
exist m sub-watch nodes in the critical area of the ratio c is |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
p(m) = �d — m J 1) cm(1 — c)d-m-1 |XML| xmlLoc_6 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the expected number of sub-watch nodes, m, in the critical  |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
area is given by |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
E[m] = (d — 1)c. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Thus, in the lower bound (c = 0.4) critical area, when d =  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
10, 15, 20, the number of sub-watch nodes (i.e. the degree  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of multipath) is 3.6, 5.6, 7.6 on average, respectively. This |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
u	v	?	u	v	? |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
C1	C2 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_yes xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
, |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
65 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Figure 5: Probability (p.) that at least one sub-  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
watch node exists in the lower bound (c = 0.4) criti- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cal area. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
shows that the higher degree of each node has, our scheme  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
has the higher degree of multipath and resiliency against  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet-dropping nodes. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.4 The Security of Neighbor List Verification |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Our Neighbor List Verification(NLV) keeps the nice prop- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
erties of LEAP. Adult nodes fail to establish pairwise keys  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with any adult nodes in arbitrary locations, so that the im- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
pact of a node compromise is localized. NLV performs the  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
three-way handshaking neighbor discovery, instead of two-  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
message exchange in LEAP. The three-way handshaking en- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ables each node to verify not only its direct neighbors but  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
also their respective neighbor lists. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Moreover, this this three-way handshaking can be a po- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tential solution to deal with irregularity of radio range [15,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
37, 45]. In reality, due to the noise and some environmen- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tal factors, radio range of each node is not exactly circu- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
lar. So, communication links among nodes are asymmetric;  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node u can hear node v which is unable to hear u. With  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
two-message exchange, only the node initiating the neigh- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
bor discovery is assured of the link’s bidirectionality. By the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
three-way handshaking, both of neighbors can be assured of  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
their symmetric connectivity. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
With NLV, only the verified lists are stored and utilized  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
for our packet-forwarding scheme. NLV verifies the neighbor  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
list of an adult node with certificates. These certificates  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
merely attest neighborship between two specific nodes. Even  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
if a node is compromised, the attacker fails to abuse the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
certificates of the captured node for other purpose. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
However, collusion among compromised nodes can fab- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ricate bogus certificates in order to deceive a newly-added  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node. For example, consider two colluding nodes u and v at  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the different locations. When compromised node u discovers  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
newly-added node x, node u provides x with u’s neighbor  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
list (maliciously including v in it). Even though node v is  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
not an actual neighbor of u, colluding node v can generate |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the bogus certificate for u, MAC(K,, v1u). Then, x falsely |XML| xmlLoc_6 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
believes that v is a direct neighbor of u. This attack, how- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ever, affects only the one newly-added node x. Thus, when  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
compromised node u tries to launch the blind letter attack 8, |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
8Compromised node u transmits the relaying packet with its |XML| xmlLoc_7 xmlAlign_right xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
other surrounding adult neighbors of u can still detect it  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
anyway. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
The more serious case is that colluding nodes exploit a  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
newly-added node to generate bogus one-time certificates.  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
For example, consider two colluding nodes u and v that  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
share all their secret information as well as all their certifi- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cates. When newly-added node x initiates the three-way  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
handshaking with u, compromised node u pretends to be  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v and provides x with v’ neighbor list. Then, x in return  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
provides u with one-time certificates for each neighbor of  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
v; these one-time certificates falsely attest that v has new  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor x. Node u sends this information to v over the  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
covert channel. Then, v broadcasts these one-time certifi- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cates, and neighbors of v falsely believe that x is a direct  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
neighbor of v. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Unfortunately, we do not provide a proper countermea- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sure to defend against this type of man-in-the-middle at- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tacks. However, we point out that this type of attacks has  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to be launched in the passive manner. The adversary has  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to get the chance of discovery of a newly-added node. In  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
other words, compromised nodes wait for the initiation of  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the three-way handshaking from a newly-added node. Since  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the attacker does not know where the new nodes will be  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
added, it has to compromise a sufficient number of legiti- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
mate nodes in order to increase the probability of discovery  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of newly-added nodes. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
As an active defense against such man-in-the-middle at- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tacks, we can apply a node replication detection mechanism  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
such as Randomized or Line-Selected Multicast [31], which  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
revokes the same ID node at the different location claims.  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
To successfully launch such man-in-the-middle attacks, two  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
colluding nodes should pretend to be each other so that each  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of them claims to be at two different locations with the same  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ID. Location-binding key-assignment scheme by Yang et al.  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
[39] with a little modification also can be a good solution  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
to such attacks. Since it binds secret keys with nodes’ geo- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
graphic locations, the key bound to the particular location  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cannot be used at any arbitrary locations. Adopting this,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
NLV can check whether the claimed neighbors are really lo- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
cated within geographically two hops away. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.5 Simulations |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
To further evaluate the performance of our resilient for- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
warding scheme, we run simulations of our scheme in the  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
presence of packet-dropping nodes on a network simulator,  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ns-2 [9]. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.5.1 Simulation Model |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In our simulations, we deploy N sensor nodes uniformly at  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
random within 500 x 500m2 target field, with N = 300 and  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
600. Each sensor node has a constant transmission range of  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
30m, so that the degree of each node is approximately 10  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(N = 300) and 20 (N = 600) on average. We position a base  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
station and a source node in opposite corners of the field, at  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
a fixed point (50, 50) and (450, 450), respectively. They are  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
located approximately 18 hops away from each other. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
We distribute compromised nodes over an inner square  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
area with 200m each side (from 150m to 350m of each side  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of the 500 x 500m2 target area). Thus, compromised nodes  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
are strategically-placed in between the base station and the  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
source node. In the simulations, those compromised nodes  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
drop all the relaying packets. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
next-hop id as v, so that x considers it forwarded correctly. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
1 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.9 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.8 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.7 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.6  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.5  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.4 |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.3 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.2 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.1 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0 |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
1	5	10	15	20 |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Degree of a node |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
66 |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Figure 6: Simulation Results (averaged over 100 runs). |XML| xmlLoc_4 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
0	5	10	15	20	25	30	35	40	45	50 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Number of Packet-dropping Nodes |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
(a) Success ratio (N = 300, x = 0 — 50) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0	10	20	30	40	50	60	70	80	90	100 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Number of Packet-dropping Nodes |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
(b) Success ratio (N = 600, x = 0 — 100) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
100 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
100 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
10 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
10 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
90 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
90 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
( 300 nodes ) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
80 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
70 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
60 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
50 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
40 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
30 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
20 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
80  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
70  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
60  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
50  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
40  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
30  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
20 |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
( 600 nodes ) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0	5	10	15	20	25	30	35	40	45	50 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Number of Packet-Dropping Nodes |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0	10	20	30	40	50	60	70	80	90	100 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Number of Packet-dropping Nodes |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
(c) The number of relaying nodes with N = 300 |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
(d) The number of relaying nodes with N = 600 |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
( 300 nodes ) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.6  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.5  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.4 |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
1 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.9 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.8 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.7 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.3 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.2 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.1 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
1  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.9  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.8  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.7  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.6  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.5  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.4  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.3  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.2  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0.1  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
0 |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
( 600 nodes ) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Single Path Forwarding	with NWS |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Single Path Forwarding	with NWS |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Single Path Forwarding	with NWS |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
Single Path Forwarding	with NWS |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
We use the typical TinyOS beaconing [17] with a little  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
modification as a base routing protocol in our simulations.  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
We add a hop count value in a beacon message9. To have  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
multiple potential next-hops, when receiving a beacon with  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the same or better hop count than the parent node’s, each  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node marks the node sending the beacon as a potential next-  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
hop. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Each simulation experiment is conducted using 100 differ- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ent network topologies, and each result is averaged over 100  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
runs of different network topologies. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
4.5.2 Simulation Results |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In the presence of compromised node dropping all the re- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
laying packets, we measure the success ratio (i.e. the per- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
centage of the packets that successfully reach the base sta- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
tion from the source) and the number of relaying nodes by  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the primitive single-path forwarding and with NWS in a  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network of size N, with N = 300 and 600. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
9The base station initiates the beacon-broadcasting, which  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
floods through the network, in order to set up a routing tree. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Figure 6(a) shows the success ratio in face of x packet-  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
dropping nodes (varying x=0 to 50) in a 300-sensor-node  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network with the approximate degree d = 10. Although  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the success ratio gently decreases with x, it keeps up above  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
0.8 even with x = 30, with the help of NWS. This ten- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
dency of decreasing success ratio can be attributed to the  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
degree d = 10 (3.6 sub-watch nodes on average) as well as  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
an increasing number of packet-dropping nodes. Due to the  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
strategically-placement of compromised nodes in our sim- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ulations, as x increases on, it is likely that a forwarding  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
node’s all potential sub-watch nodes themselves are packet-  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
dropping nodes. Figure 6(c) shows the number of nodes  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
that relay the packet from the source to the base station  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
in the same experiments. Since the source is located about  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
18 hops away from the base station, the number of relaying  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes only with the single-path forwarding remains at 18.  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
With NWS, the number of relaying nodes increases with x,  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
in order to bypass an increasing number of packet-dropping  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes. In face of such nodes, our scheme converts single-  |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
path forwarding into multipath data forwarding, with the |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
67 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
help of sub-watch nodes around such packet-dropping nodes.  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Utilizing a cache for recently-received packets can suppress  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the same copy within a certain timeout, which reduces the  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
number of relaying nodes. |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Figure 6(b) shows the success ratio in a 600-sensor-node  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
network with the approximate degree d = 20 with x packet-  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
dropping nodes (varying x=0 to 100). Unlike that with N =  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
300, the success ratio stays constantly at around 0.99 even  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
with x = 100, with the help of NWS. This tendency of high  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
success ratio can be mainly attributed to the degree d = 20  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
(7.6 sub-watch nodes on average in the lower bound case),  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
which is found to be high enough to bypass a large number  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of packet-dropping nodes. Figure 6(d) shows the number  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of relaying nodes from the source to the base station in the  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
same experiments. With NWS, the increase in the number  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of relaying nodes with x is more conspicuous than that with  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
N = 300, since more than twice as many as sub-watch nodes  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
help forward the packets so that it can bypass a large number  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
of packet-dropping nodes anyway. |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In the simulation results, we note that our forwarding  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme dynamically adjusts its forwarding style, depending  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
on the number of packet-dropping nodes en-route to the base  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
station. As in Figures 6(c) and 6(d), while there exist none  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
or a small number of packet-dropping nodes on the way, our  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
scheme works almost like the single-path forwarding with  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the help of a few additional relaying nodes. On the other  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
hand, when confronting a large number of packet-dropping  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes, our scheme makes full use of the help from additional  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
relaying nodes, in order to successfully deliver the packet to  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
the base station at any cost to the best efforts. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
5. CONCLUSIONS AND FUTURE WORK |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
In this paper we focus on defending against compromised  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nodes’ dropping of legitimate reports. We have presented  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
a resilient packet-forwarding scheme using Neighbor Watch  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
System (NWS) against maliciously packet-dropping nodes in  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
sensor networks. In face of such nodes, NWS is specifically  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
designed for hop-by-hop reliable delivery, and the prompt  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
reaction of the conversion from single-path to multipath for- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
warding augments the robustness in our scheme so that the  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
packet successfully reach the base station. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
In future work, we plan on further improving NLV to de- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
fend against the man-in-the-middle attacks, collusion among  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
compromised nodes. Such attacks can be prevented by using  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
a master key derived with not only a node ID but also its  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
geographic information. We will also seek to address O(d 2)  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
storage requirement for the neighbors’ neighbor lists. Fi- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
nally, we would like to perform an intensive experimental  |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
evaluation to compare our scheme with other reliable deliv- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
ery protocols [10, 29, 42]. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
6. ACKNOWLEDGMENTS |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
This work was supported by grant No.R01-2006-000-10073-  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
0 from the Basic Research Program of the Korea Science and  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Engineering Foundation. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
7. REFERENCES |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
[1] R. Anderson, H. Chan, and A. Perrig, Key Infection:  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Smart Trust for Smart Dust, IEEE ICNP 2004 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[2] Burton H. Bloom, Space/Time Trade-offs in Hash  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Coding with Allowable Errors, Communication of the  |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
ACM, vol. 13, 422-426, 1970 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[3] B. Carbunar, I. Ioannidis, and C. Nita-Rotaru,  |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
JANUS: Towards Robust and Malicious Resilient  |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Routing in Hybrid Wireless Networks, ACM workshop  |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
on Wireless security (WiSe’04), Oct. 2004 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[4] H. Chan, A. Perrig, and D. Song, Random Key  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Predistribution Schemes for Sensor Networks, IEEE  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Symposium on Security and Privacy, pp. 197-213, May  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
2003. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[5] B. Deb, S. Bhatnagar, and B. Nath, ReInForM:  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Reliable Information Forwarding Using Multiple Paths  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
in Sensor Networks, IEEE Local Computer Networks  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
(LCN 2003), pp. 406-415, Oct. 2003. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[6] J. Deng, R. Han, and S. Mishra, A Performance  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Evaluation of Intrusion- Tolerant Routing in Wireless  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Sensor Networks, 2nd International Workshop on  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Information Processing in Sensor Networks (IPSN 03),  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
pp. 349-364, Apr. 2003. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[7] J. Deng, R. Han, and S. Mishra, Intrusion Tolerance  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
and Anti-Traffic Analysis Strategies for Wireless  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Sensor Networks, IEEE International Conference on  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Dependable Systems and Networks (DSN), pp.  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
594-603, 2004. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[8] J. Deng, R. Han, and S. Mishra, Defending against  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Path-based DoS Attacks in Wireless Sensor Networks,  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
ACM Workshop on Security of Ad-Hoc and Sensor  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Networks (SASN’05) , Nov, 2005. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[9] K. Fall and K. Varadhan (editors), NS notes and  |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
documentation, The VINT project, LBL, Feb 2000,  |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
http://www.isi.edu/nsnam/ns/ |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[10] D. Ganesan, R. Govindan, S. Shenker, and D. Estrin,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Highly Resilient, Energy-Efficient Multipath Routing  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
in Wireless Sensor Networks, Computing and  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Communications Review (MC2R) Vol 1., pp. 11-25,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
2002. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[11] V. D. Gligor, Security of Emergent Properties in  |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Ad-Hoc Networks, International Workshop on Security  |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Protocols, Apr. 2004. |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[12] O. Goldreich, S. Goldwasser, and S. Micali, How to  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Construct Random Functions, Journal of the ACM,  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Vol. 33, No. 4, 210-217, 1986 |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[13] L. Eschenauer and V. D. Gligor, A Key-Management  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Scheme for Distributed Sensor Networks, 9th ACM  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Conference on Computer and Communication  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Security (CCS), pp. 41-47, Nov. 2002. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[14] C. Hartung, J. Balasalle, and R. Han, Node  |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Compromise in Sensor Networks: The Need for Secure  |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Systems, Technical Report CU-CS-990-05, |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Department of Computer Science University of  |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Colorado at Boulder, Jan. 2005 |XML| xmlLoc_5 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
[15] T. He, S. Krishnamurthy, J. A. Stankovic, T. F.  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Abdelzaher, L. Luo, R. Stoleru, T. Yan, L. Gu, J. Hui,  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
and B. Krogh, An Energy-Efficient Surveillance  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
System Using Wireless Sensor Networks, ACM  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
MobiSys’04, June, 2004 |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[16] W.R. Heinzelman, J. Kulik, H. Balakrishnan, Adaptive  |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Protocols for Information Dissemination in Wireless  |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Sensor Networks, ACM MobiCom99, pp. 174.185,  |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
1999. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[17] J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. Culler, and  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
K. Pister, System Architecture Directions for  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Networked Sensors, ACU ASPLOS IX, November  |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
2000. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
68 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
[18] X. Hong, M. Gerla, W. Hanbiao, and L. Clare, Load  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Balanced, Energy-Aware Communications for Mars  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Sensor Networks, IEEE Aerospace Conference, vol.3,  |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
1109-1115, 2002. |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[19] Y.-C. Hu, D. B. Johnson, and A. Perrig, SEAD:  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Secure Efficient Distance Vector Routing for Mobile  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Wireless Ad Hoc Networks, IEEE Workshop on Mobile  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Computing Systems and Applications, pp. 3-13, Jun.  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
2002. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[20] Y.-C. Hu, A. Perrig, and D. B. Johnson, Efficient  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Security Mechanisms for Routing Protocols, NDSS  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
2003, pp. 57-73, Feb. 2003. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[21] C. Intanagonwiwat, R. Govindan and D. Estrin,  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Directed Diffusion: A Scalable and Robust  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Communication Paradigm for Sensor Networks,  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
MobiCom’00, Aug. 2000. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[22] D. Johnson, D.A. Maltz, and J. Broch, The Dynamic  |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Source Routing Protocol for Mobile Ad Hoc Networks  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
(Internet-Draft), Mobile Ad-hoc Network (MANET)  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Working Group, IETF, Oct. 1999. |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[23] C. Karlof and D. Wagner, Secure Routing in Wireless  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Sensor Networks: Attacks and Countermeasures, The  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
First IEEE International Workshop on Sensor Network  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Protocols and Applications, pp. 113-127, May 2003 |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[24] C. Karlof, N. Sastry, and D. Wagner, TinySec: A Link  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Layer Security Architecture for Wireless Sensor  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Networks, ACM SensSys’04, pp. 162-175, Nov. 2004. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[25] I. Khalil, S. Bagchi, and C. Nina-Rotaru, DICAS:  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Detection, Diagnosis and Isolation of Control Attacks  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
in Sensor Networks, IEEE SecureComm 2005, pp. 89 -  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
100, Sep. 2005 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[26] Y. Liu and W. K.G. Seah, A Priority-Based  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Multi-Path Routing Protocol for Sensor Networks,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
15th IEEE International Symposium on Volume 1, 216  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
-220, 2004 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[27] S.-B. Lee and Y.-H. Choi, A Secure Alternate Path  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Routing in Sensor Networks, Computer  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Communications (2006), |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
doi:10.1016 /j . comcom.2006.08.006. |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
[28] S. Marti, T.J. Giuli, K. Lai, and M. Baker, Mitigating  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Routing Misbehavior in Mobile Ad Hoc Networks,  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
ACM/IEEE International Conference on Mobile  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Computing and Networking, pp. 255-265, 2000 |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[29] H. Morcos, I. Matta, and A. Bestavros, M2 RC:  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Multiplicative-Increase/Additive-Decrease Multipath  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Routing Control for Wireless Sensor Networks, ACM  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
SIGBED Review, Vol. 2, Jan 2005. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[30] J. Newsome, E. Shi, D. Song, and A. Perrig, The Sybil  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Attack in Sensor Networks: Analysis and Defenses,  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
IEEE IPSN’04, pp. 259-268, Apr. 2004. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[31] B. Parno, A. Perrig, and V. D. Gligor, Distributed  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Detection of Node Replication Attacks in Sensor  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Networks, the 2005 IEEE Symposium on Security and  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Privacy, pp. 49-63, May 2005. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[32] A. Perrig, R. Szewczyk, V. Wen, D. Culler, and  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
J. Tygar, SPINS: Security Protocols for Sensor  |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
Networks, ACM MobiCom’01, pp. 189-199, 2001. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
[33] A. Perrig, J. Stankovic, and D. Wagner, Security in  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Wireless Sensor Networks, Communications of the  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
ACM, 47(6), Special Issue on Wireless sensor  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
networks, pp.53- 57, Jun. 2004 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[34] B. Przydatek, D. Song, and A. Perrig, SIA: Secure  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Information Aggregation in Sensor Networks, 1st  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
International Conference on Embedded Networked  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Sensor Systems, 255-256, 2003 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[35] E. Shi and A. Perrig, Designing Secure Sensor  |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Networks, Wireless Communications, IEEE Volume  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
11, Issue 6, pp. 38-43, Dec. 2004. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[36] D. Tian and N.D. Georganas, Energy Efficient  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Routing with Guaranteed Delivery in Wireless Sensor  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Networks, IEEE Wireless Communications and  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Networking (WCNC 2003), IEEE Volume 3, 1923 -  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
1929, March 2003 |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[37] A. Woo, T. Tong, and D. Culler, Taming the  |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Underlying Challenges of Reliable Multhop Routing in  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Sensor Networks, ACM SenSys03, Nov, 2003 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[38] A. Wood and J. Stankovic, Denial of Service in Sensor  |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Networks, IEEE Computer, Vol.35, 54-62, Oct. 2002 |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[39] H.Yang, F. Ye, Y. Yuan, S. Lu and W. Arbough,  |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Toward Resilient Security in Wireless Sensor  |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Networks, ACM MobiHoc’05, 34-45, May 2005 |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[40] Y. Yang, X. Wang, S. Zhu, and G. Cao SDAP: A  |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Secure Hop-by-Hop Data Aggregation Protocol for  |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Sensor Networks, ACM MobiHoc’06 May 2006 |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[41] F. Ye, H. Luo, S. Lu and L. Zhang, Statictial En-route  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Filtering of Injected False Data in Sensor Networks,  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
IEEE INFOCOM, 2004 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
[42] F. Ye, G. Zhong, S. Lu and L. Zhang, GRAdient  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Broadcast: A Robust Data Delivery Protocol for Large  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Scale Sensor Networks, ACM Wireless Networks  |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
(WINET), March 2005 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[43] Y. Yu, R. Govindan, and D. Estrin, Geographical and  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Energy Aware Routing: a recursive data dissemination  |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
protocol for wireless sensor networks, UCLA |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes
Computer Science Department Technical Report  |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
UCLA/CSD-TR-01-0023, May 2001. |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes
[44] W. Zhang and G. Cao, Group Rekeying for Filtering  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
False Data in Sensor Networks: A Predistribution and  |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Local Collaboration-Based Approach, IEEE  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
INFOCOM’05. Vol. 1, 503-514, March 2005 |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[45] G. Zhou, T. He, S. Krishnamurthy, and J. A.  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Stankovic, Impact of radio irregularity on wireless  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
sensor networks, the 2nd International Conference on  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Mobile Systems, Applications, and Services  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
(MobiSys04), June, 2004 |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[46] S. Zhu, S. Setia, and S. Jajodia, LEAP: Efficient  |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Security Mechanisms for Large-Scale Distributed  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Sensor Networks, The 10th ACM Conference on  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
Computer and Communications Security (CCS ’03),  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
62-72, 2003 |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no
[47] S.Zhu, S. Setia, S. Jajodia, and P. Ning, An  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Interleaved Hop-by-Hop Authentication Scheme for  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Filtering False Data in Sensor Networks, IEEE  |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
Symposium on Security and Privacy, 2004 |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no
69 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no
