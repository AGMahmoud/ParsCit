title ||| An Intensional Approach to the Specification of Test Cases |XML| xmlLoc_0 xmlAlign_left xmlBold_yes xmlItalic_no xmlFontSize_largest0 xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_header
title ||| for Database Applications |XML| xmlLoc_0 xmlAlign_centered xmlBold_yes xmlItalic_no xmlFontSize_largest0 xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_header
author ||| David Willmor |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_header
affiliation ||| School of Computer Science |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_header
affiliation ||| University of Manchester |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_header
address ||| Oxford Road, Manchester, UK |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_header
email ||| d.willmor@cs.manchester.ac.uk |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_header
email ||| ABSTRACT |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_same
bodyText ||| When testing database applications, in addition to creating |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| in-memory fixtures it is also necessary to create an initial |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database state that is appropriate for each test case. Cur- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| rent approaches either require exact database states to be |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| specified in advance, or else generate a single initial state |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| (under guidance from the user) that is intended to be suit- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| able for execution of all test cases. The first method allows |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| large test suites to be executed in batch, but requires con- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| siderable programmer effort to create the test cases (and |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to maintain them). The second method requires less pro- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| grammer effort, but increases the likelihood that test cases |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| will fail in non-fault situations, due to unexpected changes |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to the content of the database. In this paper, we propose a |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| new approach in which the database states required for test- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ing are specified intensionally, as constrained queries, that |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| can be used to prepare the database for testing automati- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cally. This technique overcomes the limitations of the other |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| approaches, and does not appear to impose significant per- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| formance overheads. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| Categories and Subject Descriptors |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
category ||| D.2.5 [Software Engineering]: Testing and Debugging— |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
category ||| Testing tools |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| General Terms |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
keyword ||| Experimentation, Verification |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
sectionHeader ||| Keywords |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
keyword ||| databases, software testing, database testing |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
sectionHeader ||| 1. INTRODUCTION |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| Modern information systems are typically organised as |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| collections of independent application programs that com- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| municate with one another by means of a central database. |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The database records the state of the organisation that the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
copyright ||| Permission to make digital or hard copies of all or part of this work for |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
copyright ||| personal or classroom use is granted without fee provided that copies are |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
copyright ||| not made or distributed for profit or commercial advantage and that copies |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
copyright ||| bear this notice and the full citation on the first page. To copy otherwise, to |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
copyright ||| republish, to post on servers or to redistribute to lists, requires prior specific |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
copyright ||| permission and/or a fee. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
note ||| ICSE’06, May 20–28, 2006, Shanghai, China. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
copyright ||| Copyright 2006 ACM 1-59593-085-X/06/0005 ...$5.00. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
author ||| Suzanne M. Embury |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
affiliation ||| School of Computer Science |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
affiliation ||| University of Manchester |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
address ||| Oxford Road, Manchester, UK |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
email ||| s.m.embury@cs.manchester.ac.uk |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_largest-1 xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| information system supports, while the application programs |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| implement the business processes that manipulate the state. |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| To take a simple but ubiquitous example, a database sys- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tem might record details of customers, products and sales, |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| while the application programs associated with it handle op- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| erations such as new product purchases and update of the |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| product catalogue, as well as supporting decision making |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by generating reports regarding the most profitable product |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| lines, names and addresses of loss-making customers, etc. |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In order to test such application programs, it is necessary |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| to create test fixtures that simulate the presence of the rest |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the information system. Fixtures for traditional test cases |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| typically consist of in-memory objects and data structures |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| that provide the inputs to the program being tested. This |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| kind of fixture is also needed when testing database appli- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cations (especially when performing unit testing); however, |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| since it is unrealistic (and often incorrect) to execute test |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cases against an empty database, we need to create addi- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tional fixture elements within the database itself. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Current practice in the software industry is to maintain |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| one or more test databases that can be used for testing in- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| dividual programs. These databases can be artificially gen- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| erated (e.g., using tools such as DBMonster1 and DataFac- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tory2) or they may be subsets of the live database, taken |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| as a snapshot at some recent point in time. Copies of the |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| live data sets have the advantage that they are more likely |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to be representative of the patterns of data encountered in |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| practice, while artificial data sets have the advantage that |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| they can be made to embody specific characteristics (such |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| as particular data skew patterns or volumes), which may be |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| useful for load and stress testing. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Both approaches, however, suffer from several disadvan- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| tages. The most significant problem occurs when none of |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the available test databases are suitable starting points for a |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| particular test case. For example, suppose a particular test |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| case executes a program which purges inactive customers, |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with the aim of verifying that the business rule forbidding |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| deletion of customers with negative balances is correctly en- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| forced. If none of the test databases contains any inactive |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| customers with negative balances, then the test case can- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| not be executed successfully. For a one-off test run, testing |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| personnel can choose a database that is close to what is re- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| quired, and manually update it so that it is suitable for use |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with the test case. But if a complete test suite is to be exe- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cuted (possibly including test cases which themselves make |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| modifications to the database state) then in the worst case |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 1http://DBMonster.kernelpanic.pl |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
footnote ||| 2http://www.quest.com/datafactory |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 102 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| this manual intervention will be required in between every |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| test case execution. This is clearly undesirable if test suites |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| are large or time-consuming to execute, or if the test suite |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| is to be run in batch (as in the case of overnight regression |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| testing, for example). |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Current research in testing for database systems proposes |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| two approaches to this problem. One of these is to include |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| within the test case description a full (extensional) specifica- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tion of the database state against which it is to be run (and |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the database state that should be produced if the test has |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| executed successfully) [13, 14]. This solution is exemplified |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by DBUnit3, an extension of the JUnit testing framework4 |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| that is designed for testing database applications written in |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Java. Each DBUnit test case is accompanied by an XML |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| file describing the data set required for the test. Before each |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test run, DBUnit clears the database state and inserts the |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| data described by the XML file. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This approach has the advantage of simplicity, but it places |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| a considerable burden on testing personnel, especially when |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| complex database states are required. It is also inefficient, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| since the database must be continually destroyed and recre- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ated between tests, even when significant parts of the database |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| might have been reused by the succeeding tests. Moreover, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| maintenance of a large suite of such tests is extremely chal- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| lenging, since any small change to the database schema may |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| require corresponding changes to many test cases. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The second approach that has been explored in the liter- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| ature is more efficient in that it requires the creation of only |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| one database state per test suite (rather than one per test |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| case). It is exemplified by the AGENDA database testing |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| toolkit [6, 7], which can automatically generate a database |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| state given information about the schema, some data gen- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| eration functions for individual attributes and some user- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| selected heuristics describing the kind of database state re- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| quired. The AGENDA tool also generates test cases from a |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| simple analysis of the program being verified. The user must |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| then add preconditions to each test case that are checked |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| just before it is executed and that will prevent a case from |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| being executed against an inappropriate database state. This |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| approach successfully relieves the user of the need to specify |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| complete database states in full detail, but at a cost. The |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| user must accept that some of the test cases may not be |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| executed because the database state fails the precondition, |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| even when it would require only a small change to bring the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database into a suitable state for the test. Since only one |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database state is created per test suite, this problem of failed |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tests is likely to become more severe as the size of the test |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| suite grows. There is also a potential inefficiency involved |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| in generating test descriptions and inputs, and in creating |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the additional log tables and constraints/triggers needed by |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the AGENDA tool, for test cases that are not in fact going |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to be executed. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Ideally, we would prefer to be able to combine the advan- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| tages of both these approaches, to give a form of database |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test case that is quick and natural to specify, and which |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| maximises the number of cases within the suite that can be |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| executed while minimising the number of full test databases |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| that need to be maintained. Our thesis is that this can |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be achieved by allowing testing personnel to describe the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database states involved in their test cases intensionally, in |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 3http://www.dbunit.org |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
footnote ||| 4http://www.junit.org |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the form of declarative conditions that the input database |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| must satisfy, and by providing a testing harness that can |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| automatically adjust the input database so that the test |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| conditions are satisfied [19]. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In this paper, we present a language for specifying such |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| intensional database tests, and describe its semantics and |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| operational behaviour (Section 2). We present an algorithm |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| for automatically modifying database states so that test pre- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| conditions are satisfied (Section 3), thus ensuring that all |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test cases can be executed without requiring any human |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| intervention. We further describe how we have extended the |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| JUnit testing framework to allow intensional database tests |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to be specified and executed in practice (Section 4). Finally, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| we present the results of an evaluation of the performance |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the techniques (Section 5) and conclude (Section 6). |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| 2. SPECIFYING INTENSIONAL TESTS |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| A conventional test case is typically modelled as a triple |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| < p, i, o >, which denotes a test that executes program p |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with inputs (e.g., parameters) denoted by i. If no faults are |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| encountered during the test execution, the output that will |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be produced is o. In the case of test cases for database ap- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| plications, we must add two further elements—the specifica- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tion of the database state against which p is to be executed, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| and some statement of the database state that should result |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| from the execution of p if it is operating correctly according |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to its specification. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| For example, consider the example program mentioned |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| in Section 1 that prunes inactive customer details from the |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database. For this test case, we require a database state that |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| contains at least one inactive customer. This could easily |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be stated as a predicate logic condition over the database, |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| assuming the obvious mapping between stored relations and |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| predicates, e.g.: |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| (3custNo, lastOrderOn, a, b, c) |XML| xmlLoc_4 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
construct ||| customer(custNo, a, b, c, lastOrderOn) n |XML| xmlLoc_4 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| lastOrderOn < today — 90 |XML| xmlLoc_4 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The program in question does not access any parts of the |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| database other than the customer table. Therefore, we do |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| not care what values the other tables contain and need not |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| mention them in the intensional specification of the test. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This approach works equally well for observing the results |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| of the test. For example, when testing the customer pruning |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| behaviour, we might require that no inactive customer with |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| a non-negative balance should exist in the database after |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the test: |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| -((3custNum, lastOrderDate, a, b, c) |XML| xmlLoc_6 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
construct ||| customer(custNum, a, bal, c, lastOrderDate) n |XML| xmlLoc_6 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
construct ||| lastOrderDate < today — 90 n bal > 0) |XML| xmlLoc_6 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Effectively, the test case describes a set of valid (i.e., fault- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| free) state transition for the database, as a classic pre/post- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| condition pair. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This first-order-logic style of database specification does |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| not work so well when we consider the testing problem in |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| more depth, however. The problem is that we need to do |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| more than test the input database for compliance with the |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| requirements of the test case; we also need to extract in- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| formation from it to be used to instantiate other elements |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 103 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| of the test case. For example, suppose we wish to test a |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| program that deletes details of individual customers. Such |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| programs typically require some input from the user, identi- |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| fying the specific customer record that is to be deleted (e.g., |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by supplying the relevant customer code as a parameter). |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This could be achieved by requiring the tester to embed the |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| customer code into the test case elements, as literal values. |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Alternatively, we could search for a suitable customer that |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| already exists in the database, using a standard database |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| query, and use the values from that in specifying the inputs |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| for the test case. This would minimise the amount of work |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| required to prepare the database for test execution (since we |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| would be using data already present in the database), and it |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| would also mean that test cases can be written very quickly, |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| since the user does not need to specify every last detail of |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the data to be used. |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Under this approach, the specification of the input database |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| state now has a dual role: it must state the condition that |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| determines whether the database state is suitable for execu- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tion of the test case and it must also return bindings for the |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| free variables that appear in the remaining components of |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the test case. For the latter purpose, we would prefer to use |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| a straightforward query language, while for the former we |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| require the ability to place conditions on the data. With a |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| simple extension of a standard query language such as SQL, |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| we can combine both these purposes in a single statement. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| For example, the following statement: |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| ANY :cn GENERATED BY |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
construct ||| SELECT custNo FROM customer |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
construct ||| WHERE lastOrderDate < today() - 90 |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
construct ||| AND balance < 0 |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| retrieves the customer code of some record that meets the |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| given conditions (an inactive customer with negative bal- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ance) from the database, and binds it to the variable : cn. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| It also places a cardinality constraint on the result of the |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| query, that at least one such binding must exist (implied by |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the use of the keyword ANY). |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The variable : cn can then be used to specify other ele- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| ments of the test case. The obvious usage in this example is |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| in specifying the inputs to the program being tested, but it |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| can also be used in describing the expected outputs of the |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| program. In this example test case, the correct behaviour |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the DeleteCustomer program is to reject the deletion |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of : cn, since customers with a negative balance cannot be |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| purged from the database. We might therefore give the fol- |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| lowing specification of the desired output database state: |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| AT LEAST 1 :cn2 GENERATED BY |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
construct ||| SELECT custNo FROM customer |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| WHERE custNo = :cn |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Of course, not all test cases are best specified in terms of |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| values retrieved from the database. For example, suppose |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| that we wish to write test cases for a program that adds new |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| customers to the database. The inputs to this program are |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the details of the new customer, and the precondition for one |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| particular test case states that no customer should exist that |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| has the same customer code as that of the customer being |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| created. We cannot retrieve the customer details from the |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database in this case, as they have not yet been stored in it. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Again, we could force the user to include the required values |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| as literals in the test case, but ideally we would like to give |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| <CONDITION>::= <TYPE> <BINDINGLIST> |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| GENERATED BY <SELECT> |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| <TYPE>::= ANY I NO I AT LEAST <i> I |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| AT MOST <i> EXACTLY <i> | |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| ALL I FIRST |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| <i>::= {0-9} |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| <BINDINGLIST> |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| ::=<BINDING> { ‘,’ <BINDINGLIST> } |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| <BINDING>::= {A-Z I a-z} |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| <SELECT> ::= ... |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figureCaption ||| Figure 1: Simplified BNF Grammar for SQL Exten- |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figureCaption ||| sions |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| more support to the process of test case generation. One |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| way to achieve this is to allow user-defined data generator |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| functions to be incorporated within queries as though they |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| were relations. For example, the following expression states |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| our requirements for this test case, while also binding the |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| variables needed for input to the program: |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| ANY :cn, :name, :addr, :bal GENERATED BY |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
construct ||| SELECT gc.custno, gc.name, gc.addr, 0 |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| FROM genCustomerDetails() AS gc |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| WHERE gc.custno NOT IN ( |XML| xmlLoc_3 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
construct ||| SELECT custno |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
construct ||| FROM customer |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| WHERE balance > 0) |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Here, the data generator function getCustomerDetails ( ) |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| is used as if it were a normal relation, whereas in fact the |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| results it returns are computed on the fly. In fact, several |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the main commercial database management systems al- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ready allow user-defined functions to be embedded in queries |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| in this way, so this does not require a further extension of |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| SQL. Figure 1 shows the minimal extensions that are needed |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to support all the kinds of constrained query shown above |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| using the SQL99 standard [17]. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
subsectionHeader ||| 2.1 Test Case Semantics |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| Clearly, the semantics of these intensional database test |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| cases is more complex than for traditional extensional tests. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| However, we can define their semantics formally in terms |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of a mapping from intensional tests to sets of equivalent |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| extensional database test cases. We first present a formal |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| definition of the structure of our intensional test cases: |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| DefInItIOn 1. An intensional database test case is a quin- |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
construct ||| tuple < p, i, DBi, o, DBo >, where: |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| •	p is the program to be executed in the test, |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| •	i is a tuple of n variables and literals that describes the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| inputs to be given to program p, where n is the number |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| of parameters expected by p, |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| •	DBi is a set of constrained queries that together specify |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| the initial database state. |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| •	o is a tuple of m variables and literal that describes the |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| expected outputs from the program p. |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| •	DBo is a set of constrained queries that together specify |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| the conditions that must hold in the database state after |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| execution of p if no fault has been encountered. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 104 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| A constrained query has the form < Q, min, max, vars >, |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| where Q is a standard relational algebra query, min and |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| max describe the constraints on the cardinality of the query |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| result set, and vars is the list of variables bound by the |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| query result. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| A database test case is well-formed for use with a partic- |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| ular database schema Σ iff: |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 for every variable v that occurs free in i, DBi, o and |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| DBo, there exists a query in DBi that provides a bind- |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| ing for v, |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 for every query < q, n, m, vs > in DBi U DBo, q is a |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| well-formed query over Σ that returns k-tuples, where |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| IvsI = k, and |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 there are no circular variable dependencies amongst |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| the queries in DBi. |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We can now define a semantics for the intensional database |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| test cases as follows. Every intensional test case is equivalent |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to a set of extensional test cases. An extensional test case |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| defines a specific test run, in terms of actual inputs and |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| outputs, rather than expressions denoting sets of inputs and |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| outputs. The set of all possible extensional test cases is |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| given by: |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| PxGnxDBxGxDB |XML| xmlLoc_3 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| where P is the set of all programs, G is the set of all lit- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| erals, Gn is the set of all n-tuples formed from G and DB |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| is the set of all database states (relative to all schemas)5. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The components of each extensional test are the program |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to be tested, the input values, the initial database state, |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the expected output and the expected final database state, |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| respectively. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| An intensional test case is effectively a shorthand expres- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| sion for a set of extensional test cases that are all derived |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| from the same equivalence partition of the test case inputs. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| An intensional database test < p, i, DBi, o, DBo >, where |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| DBi = {< qi, ni, mi, vi >} and DBo = {< qo, no, mo, vo >}, |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| is equivalent to the following set of extensional tests: |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| {< p, i[vi/v], dbi, o[vi/v], dbo > I |XML| xmlLoc_5 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_right xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
equation ||| dbi E DB n |XML| xmlLoc_5 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| (ni <_ Iqi(dbi)I <_ mi) n |XML| xmlLoc_5 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| v E qi(dbi) n |XML| xmlLoc_5 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| dbo E DB n |XML| xmlLoc_5 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| (no <_ I (qo [vi /v])(dbo)I <_ mo)} |XML| xmlLoc_6 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We use the notation exp[01/02] to express the substitution of |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| the values in 01 by the corresponding values in 02 whereever |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| they occur in exp. Therefore, this expression denotes the set |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of extensional tests where the input database satisfies the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| constraints imposed by the initial constrained query, and |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| where the bindings from execution of that query (here ex- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| pressed as the tuple of variables v) are substituted into the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 5For simplicity of presentation, we assume that all programs |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
footnote ||| require the same number of inputs (n). In practice, n can |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| be the largest number of inputs required by any program, |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| and the unused values can be filled with nulls. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| expressions defining the inputs, expected output and ex- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| pected final database state before they too are evaluated 6. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The idea underlying this notion of an intensional test is |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| that when any of its corresponding extensional sets are ex- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ecuted, the intensional test is itself deemed to have been |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| executed. Thus, the use of intensional tests allows much |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| greater freedom at test execution time, since we may choose |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| any of the possible extensional tests, depending on which is |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| closest to our starting environment. In the next section, we |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| will consider the practical ramifications of this approach to |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| testing, and describe how the semantics just described can |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be implemented in practice. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| 3. DATABASE PREPARATION |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| The execution of an intensional database test case con- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| sists of three distinct phases: 1) preparation of the environ- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ment for test execution; 2) execution of the test with the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| prepared inputs; and 3) capture and storage of the results, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| for later analysis. Since all the work of finding bindings |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| for the variables in the test case specification is done in the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| preparation phase, the final two phases are straightforward |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| and differ little from standard testing procedures. When |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| program execution is complete, the constrained query that |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| determines whether the test has been successful or not is |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| evaluated against the database, and the output from the |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| program is checked against what is expected. In the case |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of test failure, the details of the actual extensional test that |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| was executed are recorded, for diagnosis purposes. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The first phase, however, is more complex. If we were |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| content to execute only those test cases which happen to |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be suitable for use with the initial database state, then the |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| preparation phase would simply be a matter of executing |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the input constrained queries against the database and, if |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| they are all successful, using the bindings thus produced |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to instantiate the remaining components of the test case. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| However, thanks to the declarative nature of our test case |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| specifications, the testing framework can be pro-active in |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cases where the given database is not suitable for use by |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the test case, and can automatically generate a sequence of |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| updates that will cause the constrained queries to produce |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the required number of bindings. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In fact, this problem is similar (though not identical) to |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| one that has been studied by the database and artificial in- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| telligence communities for many years. It is known variously |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| as the view update problem [9], the knowledge base update |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| problem [12], and the transaction repair problem [10]. Many |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database systems have the capability to define views on top |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the basic database. A view is a kind of virtual relation. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| To the user, it appears to be a normal relation, but it con- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tains no stored data. Instead, the contents of the view are |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| defined by a expression over other relations, and attempts |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to retrieve data from the view are converted into queries |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| over these relations. To take a simple example for illustra- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tion, we might create a view called Debtors which appears |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to be a relation of the same name containing all customers |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with a negative balance. Attempts to retrieve Debtors is |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 6For simplicity of presentation, we assume here that there |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
footnote ||| is only one query in each of DBi and DBo. In practice, |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| it may be necessary to include several queries, each pro- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| ducing different bindings and imposing different cardinality |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| constraints. In this case, the constraints must be conjoined, |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| and the full set of bindings can be retrieved by performing |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| a natural join of all the queries, with join condition true. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 105 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| converted into a query against the customer table with an |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| added constraint on the balance. |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| If views are truly to act as normal relations then it should |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| be possible to update them as well query them. But what |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| does it mean to update a virtual relation? In this case, the |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| view update must be converted into a sequence of updates |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| on the stored relations that will cause the desired change in |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the contents of the view itself. This is a non-trivial problem |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| for realistic view languages, and becomes even more difficult |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| when we move into the context of knowledge bases, where |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| virtual relations can be defined using rules over other rela- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tions, and when we add integrity constraints that must be |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| maintained by all updates [1, 2, 3, 4, 5, 8, 11]. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Only in very narrow circumstances does a view update |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| have a single translation into real updates [15, 18]. Various |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| heuristics for selecting from amongst the possible transla- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tions have been proposed (of which the most common is to |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| choose the update that results in the smallest change to the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| existing data set [2]), but in real applications user input is |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| needed in order to identify the translation that corresponds |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| most closely to the real world state that the database should |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| reflect [10]. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In the case of intensional database tests, we have a query |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| (the constrained query that describes our requirements for |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the test) that does not produce the correct number of an- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| swers when executed against the test database. We need to |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| find a sequence of updates to the base data that will cause |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| our query to produce the number of answers we need. How- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ever, in this case, there is no requirement to find the set of |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| updates that matches the state of reality — any sensible up- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| date that satisfies the query conditions will be acceptable. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This simplifies the problem considerably, removing the need |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| for complex search procedures and for any user input. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
subsectionHeader ||| 3.1 The Preparation Algorithm |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| One of the advantages of using a query-based language |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| for test specification (as opposed to a predicate calculus- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| based language) is that we can make use of a very common |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| and easy-to-analyse internal form for (relational) database |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| queries, called relational algebra. This form provides a small |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| number of operations on relations that can be combined to |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| form complex queries. For example, the three most basic |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| (and useful) relational algebra operators are: |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 The projection operator, πAttsR, which creates a re- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| lation from R by deleting all attributes not in Atts. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| For example, π[Country]Customer produces a relation |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| that contains just the countries that appear in the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| Customer relation. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_same
listItem ||| 9 The selection operator, QcR, which creates a relation |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
listItem ||| that contains all the rows from relation R that satisfy |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| the condition c. For example, Qbal<0 Customer returns |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| a relation containing details of all customers with neg- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| ative balances. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 The join operator, R ✶c S, which creates a relation |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
listItem ||| containing rows from the cross product of R and S that |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| satisfy the join condition c. The query Debtor ✶dNo=WNo |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| Inactive returns details of all debtors who are also in- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| active. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Since the result of each relational algebra operator is itself |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| a relation, together they form a closed algebra. This means |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| that we can form arbitrarily complex queries by applying |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| operators to the results of other operators. For example, a |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| query which retrieves the customer number of all customers |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with a negative balance would be written as: |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| π[custNo] (Qbalance<0 Customer) |XML| xmlLoc_0 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| A common way to visualise such expressions is as a tree of |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| operators. The tree for the above query is shown in Figure 2. |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| Figure 2: Relational Algebra Tree for Negative Bal- |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figureCaption ||| ance Query. |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Our algorithm for preparing a database for testing is based |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| around this notion of a relational algebra tree. We take the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cardinality constraints from the test specification, and push |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| them down through the nodes of the input database query |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tree, collecting up additional conditions as we go. When we |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| reach a leaf node (i.e. a base relation), we make updates |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to the database so that the pushed-down constraints are |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| satisfied for that relation. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| At each stage, we collect up the different kinds of con- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| straint and push them further down into the tree. These |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| constraint types are: |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 Min and Max, the upper and lower bounds on the de- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| sired cardinality of the result set. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 SelC, the selection conditions on the relations that we |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| are interested in. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 UAtts, the collection of attributes that are used in the |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| constrained query, and that must be populated in any |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| new data that we insert. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We also build up a collection of queries that describe the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| data that has been prepared for testing so far, as we progress |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| through the tree. We call these queries “bindings” (Bgs), |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| since they give us values for the variables that occur within |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the selection and join conditions. At each stage, the bindings |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| should contain one query for each leaf node that has so far |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| been prepared. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| It is easiest to see how this works by considering a simple |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| example, such as that shown in Figure 2. Let us assume we |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| have a constrained query that requires at least one customer |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with negative balance to exist, and that our database does |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| not currently contain any such customers. We begin at the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| root node of the tree, with only the cardinality constraints |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| extracted from the test specification: |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| Min = 1, Max = null, SelC = true, |XML| xmlLoc_6 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
equation ||| UAtts = 0, Bgs = 0 |XML| xmlLoc_7 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The top node is a projection operator. Projection does not |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| affect the cardinality of the result set, nor impose any condi- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tions, but it does tell us something about the attributes used |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 106 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figureCaption ||| Figure 3: Relational Algebra Tree Showing Multiple |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figureCaption ||| Joins |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by the query. We therefore add the projection attributes to |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| UAtts and push the constraints down to the next node: |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| Min = 1, Max = null, SelC = true, |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
equation ||| UAtts = {custNo}, Bgs = 0 |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Next we must deal with the selection node. Selection nodes |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| reduce the cardinality of their input, so we need to push |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| down the selection conditions to ensure that any updates |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| we may make affect the correct tuples. We also need to add |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| any attributes appearing in the selection condition to UAtts: |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| Min = 1, Max = null, SelC = balance < 0, |XML| xmlLoc_3 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
equation ||| UAtts = {custNo, balance}, Bgs = 0 |XML| xmlLoc_3 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The final node is the leaf node, representing the Customer |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| relation. We construct a query from the conditions on that |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| relation and execute it, to find out how many answers are |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| currently in the database. In this case, there are none, so |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| we need to insert a new Customer record with at least |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the custNo and balance attributes populated, and with |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| a negative balance. If there are any integrity constraints |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| on this relation, then we need to make sure they are also |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| satisfied by the new data. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We use the DBMonster data generator mentioned earlier |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| to create the new data. It allows generation functions to |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be specified for attributes, and additional constraints to be |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| placed on them. It will also maintain primary key, foreign |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| key, non-null and domain constraints if configured appro- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| priately using the information present in the pushed-down |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| constraints. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Of course, this is a very simple example. In general, we |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| can expect to have to deal with more complicated queries |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| involving several joins, such as that shown in Figure 3. This |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| relational algebra tree is equivalent to the following con- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| strained query: |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| ANY :orderNo, :productNo GENERATED BY |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
construct ||| SELECT o.orderno, p.productno |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| FROM Order o, Orderdetail d, Product p |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
construct ||| WHERE o.orderno = d.orderno AND |XML| xmlLoc_6 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| d.productno = p.productno AND |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
construct ||| p.price > 50 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| which requires that at least one order must exist that in- |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| volves the purchase of at least one product that costs more |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| than £50. Joins complicate the process of preparing the |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| database, because they introduce dependencies between the |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| updates that take place at different leaf nodes. For example, |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| imagine that we have processed the tree shown in Figure 3 as |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| far as the leaf node representing the OrderDetail relation. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Join operators further constrain the selection condition (by |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| conjoining in their join condition), but add no other con- |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| straints. So, by the time we reach this leaf node, SelC will |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| have been set to: |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
equation ||| o.orderno = d.orderno A d.productno = p.productno |XML| xmlLoc_1 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| We need to find out whether a suitable OrderDetail record |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| exists within the database. However, in order to do this, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| we need to know something about what preparation actions |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| were performed when the Product leaf node was processed. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Maybe there were already plenty of £50-plus products in |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the catalogue, or maybe there were none and one had to |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be created. How is this information passed through to the |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| OrderDetail node so that the correct tuple can be identi- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| fied or created? |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In the current version of our algorithm, we have chosen |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| to use the database itself to communicate these values. If |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| there are many suitable Product records, then we can find |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| one by querying the database directly once again. If a new |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| product had to be created, then it will now be present in |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the database, so we can still retrieve it by querying. The |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| information needed to construct these queries is present in |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the selection conditions that have been considered during |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the processing of the relational algebra tree up to this point. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| For example, in order to search for an OrderDetail tuple |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| that is connected to a suitable Product, we need to issue |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the following query: |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| SELECT d.* FROM OrderDetail d, Product p |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
construct ||| WHERE d.productno = p.productno AND |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
construct ||| p.price > 50 |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This query cannot be constructed from only the constraints |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| pushed-down from the parent nodes of the leaf node; instead, |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| we need to collect up the constraints imposed by all nodes |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| visited before the current node, so that they are available for |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| query formation. This is done using the Bgs data structure |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| mentioned earlier. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Figure 4 presents the complete algorithm, showing the be- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| haviour required for each different type of operator. The al- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| gorithm is presented as a side-effecting function which takes |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the constrained query that is to be satisfied by the database, |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| and a set of initial conditions that state the required cardi- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| nality bounds and initialise SelC to true, UAtts to 0 and Bgs |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to 0. The function returns a set of bindings, but these are |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| discarded. The main task of the algorithm is carried out |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by the side-effecting updates that occur when leaf nodes are |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| processed. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| 4. DOT-UNIT TESTING FRAMEWORK |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| The intensional database test language and accompanying |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| preparation algorithm have been implemented within a test- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ing tool, called DOT- Unit. This tool is part of a larger Data- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Oriented Testing7 framework that is under development at |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the University of Manchester [20]. DOT-Unit has been im- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| plemented as an extension to the JUnit testing framework |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 7http://www.cs.man.ac.uk/—willmord/dot/ |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
page ||| 107 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| Projection operator |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| prepare(irattsQ, Min, Max, UAtts, SelC, Bgs) |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| = prepare(Q, Min, Max, UAtts U Atts, SelC, Bgs) |XML| xmlLoc_0 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_right xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
figure ||| Selection operator |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| prepare(acQ, Min, Max, UAtts, SelC, Bgs) |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| = prepare(Q, Min, Max, UAtts, SelC n c, Bgs) |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| Join operator |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| prepare(Q1 ✶jc Q2, Min, Max, UAtts, SelC, Bgs) |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| = prepare(Q2, Min, Max, UAtts, SelC n jc, |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| prepare(Q1, Min, Max, UAtts, SelC, Bgs)) |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| Relation (leaf node) |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| prepare(Rasv, Min, Max, UAtts, SelC, Bgs) |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| Q = bindingQuery(v, SelC, Bgs) |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| Execute Q to produce result set RS |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| if IRSI < Min then |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| Invoke DBMonster to create (Min - IRSI) more |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| instances of R that satisfy the conditions in Q |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| else if IRSI > Max then |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| Delete the first (IRSI - Max) tuples in RS |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| else |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| No preparation updates needed |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| return (Bgs U binding(v, Q)) |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figureCaption ||| Figure 4: The Database Preparation Algorithm |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| for the unit testing of Java applications [16]. We have sub- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| classed the standard JUnit TestCase class, to create a ded- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| icated DatabaseTestCase class for specifying and man- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| aging intensional database tests. DatabaseTestCase pro- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| vides facilities for specifying pre-conditions on database state, |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| generating and manipulating the bindings that are produced |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by such pre-conditions, and evaluating post-conditions on |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the database state after the test has been completed. The |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| standard JUnit methods for determining the results of test |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| execution on the in-memory fixture can also be used. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| Figure 5 shows an example DatabaseTestCase that in- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figureCaption ||| cludes two individual tests. The first verifies that when a |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| customer with a non-negative balance is deleted, all cus- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| tomers with that customer number really do disappear from |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| the database. The second uses a data generation function to |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| propose attribute values for a new customer record (includ- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| ing a unique customer number), and checks that after the |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| program has executed only one customer with the generated |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| customer number exists. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We use a prefixed colon to indicate variables that are |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| shared amongst the test components — a notation that will |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be familiar to many database programmers, since it is com- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| monly used in various forms of embedded SQL. The shared |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| variables acquire their values when the test harness evalu- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ates the precondition (and performs any necessary database |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| preparation steps). These values can then be accessed us- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ing the binding method, and can be used in arbitrarily |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| complex assert conditions, as well as in instantiating the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| post-condition query. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| One of the main advantages of using the JUnit framework |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| as the basis for the implementation of DOT-Unit is that it |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| allows us to integrate our tool seamlessly into existing de- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| velopment environments, such as Eclipse8. Thus, DOT-Unit |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tests are executed in exactly the same way as a standard JU- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| nit test case, and the results are displayed using the same |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| interface components. This allows testing of database and |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| non-database components to be interleaved in a convenient |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| and natural manner. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 8http://www.eclipse.org |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
sectionHeader ||| 5. EVALUATION |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| The practicality of this intensional test case approach de- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| pends largely on the performance overhead imposed by the |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database preparation algorithm. If the time required to ex- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ecute each individual test case is significantly higher using |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| our approach than with DBUnit, say, then fewer tests will |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| be able to be executed in the time available and the benefits |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of faster test development and fewer spurious test failures |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| will be negated. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| To gain a handle on the degree of performance overhead |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| to be expected from DOT-Unit, we made use of an exist- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ing extensional DB test suite that we created for earlier |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| work [20]. This suite was designed for mp3cd browser9, an |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| open-source Java/JDBC program that stories information |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| about mp3 files in a MySQL 5.0 database10. The schema |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the database consists of 6 relations with 22 attributes, 7 |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| primary key constraints and 6 foreign key constraints. We |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| created an equivalent intensional test suite, consisting of 20 |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test cases, from the extensional suite by converting each test |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| case into DOT-Unit pre- and post-conditions. We also re- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| placed each hard-coded test parameter in the original tests |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| into constrained query bindings. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We wanted to investigate two specific aspects of the per- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| formance of DOT-Unit. First, we wanted to compare its |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| performance with that of DBUnit over the equivalent test |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cases as the database size grows. Second, we wanted to gain |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| some idea of what aspects of DB preparation and testing |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| were dominating the performance of DOT-Unit. The re- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| sults of the experiments we performed are presented below. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| All experiments were run on a Pentium-M 2.0GHz machine, |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with 1Gb RAM, running Ubuntu Linux. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
subsectionHeader ||| 5.1 Comparison with DBUnit |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| At first sight, the extensional approach, as exemplified |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| by DBUnit, would seem to be the more efficient method |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the two, as the testing harness does not need to spend |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| any time figuring out what updates need to be made prior |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to each test—it only needs to execute them. This does |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
footnote ||| 9http://mp3cdbrowser.sourceforge.net/mp3cd/ |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
footnote ||| 10http://www.mysql.com |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 108 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| public class ProgramTest extends DatabaseTestCase { |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figure ||| public void testDeleteCustomer() { |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| preCondition("ANY :cn GENERATED BY SELECT custNo FROM customer WHERE balance > 0;"); |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| Program p = new Program(); |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| p.deleteCustomer(binding(":cn")); |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| postCondition("NO :cn2 GENERATED BY SELECT custno FROM customer WHERE custNo = :cn;"); |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| } |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| public void testNewCustomer() { |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| preCondition("ANY :cn, :name, :addr GENERATED BY SELECT gc.custNo, gc.name, gc.addr FROM |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| genCustomerDetails() AS gc WHERE gc.custNo NOT IN (SELECT custNo FROM customer);"); |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figure ||| Program p = new Program(); |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| boolean b = p.newCustomer(binding(":cn"), binding(":name"), binding(":addr")); |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| assertTrue(b); |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| postCondition("EXACTLY 1 :cn, :name, :addr GENERATED BY SELECT custno, name, addr |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| FROM customer;"); |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| } |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
figure ||| } |XML| xmlLoc_1 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_right xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
figureCaption ||| Figure 5: Example DOT-Unit Test Case |XML| xmlLoc_2 xmlAlign_centered xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_centered xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| not happen by accident, but because a human programmer |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| has spent time earlier, deciding exactly what the database |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| should look like for each test case. However, when writing |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| DBUnit tests, it is common to try to reuse database de- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| scriptions for multiple test cases where possible, to reduce |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the amount of programming and maintenance time. In this |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| case, some redundant updates will be made before each test |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| case - updates that our extensional approach will not bother |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to make. It is also the case that DBUnit makes its updates |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| blindly, whether they are needed or not, whereas the inten- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| sional approach will be able to reuse much of the existing |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database state for each new test case. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Given this, it seems likely that the performance of DBUnit |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| will be better when the database state required for each |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test case is relatively small, but that the situation will be |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| reversed when the database state grows much larger. In |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| order to gauge the point at which this change occurs, we |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ran our two test suites (extensional and intensional) with |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| databases of varying sizes, and measured the execution time |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| taken to execute the whole test suite. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In each case, we generated initial database states of vary- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| ing sizes at random - either populating the database directly |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| (for the intensional test cases) or generating XML descrip- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tions of the required state (for the extensional test cases). |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| The results are shown in Figure 6. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| Figure 6: Comparison of Approaches as DB Size |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
figureCaption ||| Increases |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| To our surprise, although the performance of DOT-Unit was |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| initially worse than that of DBUnit, it overtook its com- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| petitor at a comparatively small database size of around 20 |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tuples per relation. Obviously, this experiment is a little |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| unfair to DBUnit, since programmers are unlikely to create |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database descriptions consisting of 1000s of tuples per re- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| lation. However, tests of this scale will be needed at some |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| point in the development cycle, in order to verify the be- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| haviour of the system on more realistic data sets. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| In order to assess the behaviour of DOT-Unit more pre- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| cisely, consider the graph in Figure 7, which shows the re- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| sults at small databases sizes in more detail. It can be ob- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| served that the performance of DOT-Unit first improves and |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| then begins to degrade again at a database size of around |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| 50 tuples per relation. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| Figure 7: Detailed Comparison of Approaches |XML| xmlLoc_6 xmlAlign_right xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_right xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| One possible explanation for this initial improvement in per- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| formance is that, as the database size rises, so does the |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| probability that the data needed for the test case is al- |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ready present in the database. For the very small states, |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| a lot of preparation work is required to create the needed |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| data, whereas less work is needed for a more fully populated |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database. As the database size increases further, however, |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the costs of making the queries needed to test the precondi- |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tions and formulate the preparation updates rises, pushing |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| up the time required for the entire preparation step. This |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 109 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| behaviour may be a peculiarity of the particular test suite |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| used, of course, and further, more extensive studies will be |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| required in order to completely characterise the performance |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of the DOT-Unit test harness. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| From these initial results, however, DOT-Unit appears to |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| scale well relative to database size, and the execution times |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| are of the same order of magnitude as those resulting from |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| DBUnit. This suggests that the intensional approach may |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| provide a good compromise between saving expensive pro- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| grammer time in developing new test cases and expenditure |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of cheaper processing time in executing the test cases. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
subsectionHeader ||| 5.2 Effect of Constraint Complexity |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| A further concern was the effect of increasing constraint |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| complexity on the performance of DOT-Unit test cases. How |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| much additional overhead is added for conditions involving |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| a higher number of selection conditions and (most impor- |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tantly) joins? In order to assess this, we grouped the test |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cases into three groups, according to their complexity: |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 A: queries with one or more selections and no joins, |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| 9 B: queries with one or more selections and a join be- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
listItem ||| tween two relations, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 C: queries with one or more selections and joins be- |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| tween three relations. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| This gave a test suite with 5 test cases in each of these |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| categories, which we executed against a randomly generated |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database state with 500 tuples per relation that does not |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| satisfy any of the test case pre-conditions. Figure 8 shows |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the results obtained for the three complexity categories. We |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| measured the average time taken to execute the test cases |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| in each category, including a breakdown of where the time |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| is spent in each case: |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 Test: the time required to execute the procedural as- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| pects of the test case; |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 Query: the time required to execute the query aspect |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| of the test case condition; |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
listItem ||| 9 Prepare the time required to execute the preparation |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
listItem ||| aspect of the test case condition. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| While the overall time required to execute the test cases rises |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| as the complexity rises (unsurprisingly), the relative propor- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tions of time spent in the various phases remains roughly the |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| same. The preparation phase seems to account for slightly |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| more than half of the time in each case, indicating that sig- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| nificant improvements could be achieved with a less-naive |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| preparation algorithm. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| 6. CONCLUSIONS |XML| xmlLoc_6 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_larger xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| We have presented a new approach to the specification |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| of test cases for database systems that attempts to reduce |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the amount of manual intervention required in between test |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| case runs while also minimising the number of spurious test |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| failures due to inappropriate input database states. The ap- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| proach has the further advantage that it sits naturally on top |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| of test data sets taken from live databases, and this allows |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| testing to be carried out using realistic data sets without re- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| quiring significant programmer effort to tailor the data set to |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the test cases. In effect, the intensional approach we have |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
figureCaption ||| Figure 8: The Affect of Changing Constraint Com- |XML| xmlLoc_1 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
figureCaption ||| plexity |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| described allows software developers to trade programmer |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| time for test execution time |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Our experience has indicated that intensional test cases |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
bodyText ||| are quick and natural to write for anyone who is familiar |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with SQL and database programming, although a study |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with an independent testing team would be necessary be- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| fore we can make any strong claims in this regard. How- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ever, compared with what is involved in writing pure JDBC |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database test cases and DBUnit test cases, we found that |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the self-contained nature of the intensional test cases was a |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| definite advantage. Writing DBUnit test cases requires the |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| programmer to continually check that the test case is com- |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| patible with the database description. Moreover, since it is |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| common to try to reuse database descriptions for multiple |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test cases by combining their requirements into one database |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| state, it becomes very easy to break one test case by chang- |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ing the database description in order to ready it for another. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| These problems do not arise with intensional testing, since |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| all the information about the test case is present in a single |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| file (the Java class file). |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| We designed this first version of the preparation algorithm |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| for simplicity and correctness rather than efficiency, and as |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| such it performs rather stupidly in many cases. We are cur- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| rently exploring options for improving the algorithm, includ- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ing more intelligent selection of the order in which the rela- |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tional algebra tree is traversed, alternating between passing |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| query bindings and passing literal value bindings as is most |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| efficient, and making use of modifications to existing tuples |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| as well as simply adding and deleting tuples (both of which |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| are comparatively expensive operations). The complexity of |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the conditions we can handle is at present limited by the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| capabilities of DBMonster, and can be expanded by devel- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| opment of a custom data generation facility. We also need |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to expand the range of queries that can be handled, beyond |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| simple select-project-join queries. For example, standard |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| SQL also allows aggregation and ordering within queries— |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| both of which offer challenges in terms of automatic prepa- |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ration. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| A further problem with our current algorithm is that it |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| may sometimes fail to find a solution to the database prepa- |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ration problem, even though one exists. This is due to the |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| fact that updates are made at leaf nodes before the full set of |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| constraints on those nodes has been encountered. It should |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_smaller xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 110 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| be possible to address the problem with more sophisticated |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| querying techniques (this is an example of a fairly standard |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| constrained search problem, after all), although this will add |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| to the performance overhead. A thorough study of the trade- |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| offs between spurious failures and more intelligent searching |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| will need to be carried out before any concrete recommen- |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| dations can be made. |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Finally, we note that where it is important to test large |XML| xmlLoc_0 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| numbers of frame constraints (i.e. aspects of the original |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database state that are not affected by the execution of the |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| program under test), it may be easier to express the test case |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| using DBUnit, rather than cluttering up the intensional test |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| with many such constraints. |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| Our work presents a number of possible avenues for future |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
bodyText ||| work beyond the improvements mentioned above, of which |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| the most urgent is the question of ordering of test cases |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| within suites. This ordering can be in terms of reducing the |XML| xmlLoc_1 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| cost of the modifications to database state or to maximise |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| fault coverage. There is also the question of whether the |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| modifications to database state should always persist be- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tween test cases or under certain conditions discarded. For |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| example, a test case may specify that a relation be empty |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| and to satisfy the condition the content is discarded. How- |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| ever, this relation may be required by later test cases and so |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by discarding its contents we increase the divide between the |XML| xmlLoc_2 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| test state and the real world. This could be accomplished |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| by either embedding the modifications inside of a transac- |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| tion which can then be aborted or by using a hypothetical |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| database engine. |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| 7. ACKNOWLEDGMENTS |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| We thank Leonardo Mariani and the anonymous reviewers |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
bodyText ||| for comments on earlier drafts of this paper. David Willmor |XML| xmlLoc_3 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| is supported by a research studentship from the UK Engi- |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
bodyText ||| neering and Physical Sciences Research Council. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
sectionHeader ||| 8. REFERENCES |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_largest-2 xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
reference ||| [1] M. Arenas, L. E. Bertossi, and J. Chomicki. |XML| xmlLoc_4 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
reference ||| Consistent query answers in inconsistent databases. In |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| Proceedings of the 18th ACM |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| SIGACT-SIGMOD-SIGART Symposium on Principles |XML| xmlLoc_4 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| of Database Systems (PODS), pages 68–79. ACM |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Press, 1999. |XML| xmlLoc_5 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [2] L. E. Bertossi and J. Chomicki. Query answering in |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| inconsistent databases. In J. Chomicki, R. van der |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Meyden, and G. Saake, editors, Logics for Emerging |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Applications of Databases, pages 43–83. Springer, |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 2003. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [3] P. Bohannon, M. Flaster, W. Fan, and R. Rastogi. A |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| cost-based model and effective heuristic for repairing |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| constraints by value modification. In Proceedings of |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| the SIGMOD Conference, pages 143–154. ACM, 2005. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [4] L. Bravo and L. E. Bertossi. Logic programs for |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| consistently querying data integration systems. In |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| G. Gottlob and T. Walsh, editors, Proceedings of the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 18th International Joint Conference on Artificial |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Intelligence (IJCAI), pages 10–15. Morgan Kaufmann, |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| August 2003. |XML| xmlLoc_7 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [5] A. Cali, D. Lembo, and R. Rosati. On the decidability |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| and complexity of query answering over inconsistent |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| and incomplete databases. In Proceedings of the 22nd |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| ACM SIGACT-SIGMOD-SIGART Symposium on |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Principles of Database Systems (PODS), pages |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| 260–271. ACM, June 2003. |XML| xmlLoc_0 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [6] D. Chays, S. Dan, P. G. Frankl, F. I. Vokolos, and |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| E. J. Weber. A framework for testing database |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| applications. In Proceedings of the International |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Symposium on Software Testing and Analysis |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| (ISSTA), pages 147–157, August 2000. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [7] D. Chays, Y. Deng, P. G. Frankl, S. Dan, F. I. |XML| xmlLoc_0 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| Vokolos, and E. J. Weyuker. An AGENDA for testing |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| relational database applications. Software Testing, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Verification and Reliability, 14(1):17–44, 2004. |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [8] J. Chomicki and J. Marcinkowski. On the |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| computational complexity of minimal-change integrity |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| maintenance in relational databases. In L. E. Bertossi, |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| A. Hunter, and T. Schaub, editors, Inconsistency |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Tolerance, volume 3300 of Lecture Notes in Computer |XML| xmlLoc_1 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Science, pages 119–150. Springer, 2005. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [9] S. S. Cosmadakis and C. H. Papadimitriou. Updates |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| of relational views. Journal of the ACM, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 31(4):742–760, 1984. |XML| xmlLoc_2 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_left xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| [10] S. M. Embury, S. M. Brandt, J. S. Robinson, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| I. Sutherland, F. A. Bisby, W. A. Gray, A. C. Jones, |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| and R. J. White. Adapting integrity enforcement |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| techniques for data reconciliation. Information |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Systems, 26(8):657–689, 2001. |XML| xmlLoc_2 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [11] G. Greco, S. Greco, and E. Zumpano. A logical |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| framework for querying and repairing inconsistent |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| databases. IEEE Transactions on Knowledge and |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Data Engineering, 15(6):1389–1408, 2003. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [12] A. Guessoum and J. W. Lloyd. Updating knowledge |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| bases. New Generation Computing, 8(1):71–89, 1990. |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [13] F. Haftmann, D. Kossmann, and A. Kreutz. Efficient |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| regression tests for database applications. In |XML| xmlLoc_3 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Proceedings of the 2nd Biennial Conference on |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Innovative Data Systems Research (CIDR), pages |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 95–106. Online Proceedings, January 2005. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [14] G. M. Kapfhammer and M. L. Soffa. A family of test |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| adequacy criteria for database-driven applications. In |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Proceedings of the 11th ACM SIGSOFT Symposium |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| on Foundations of Software Engineering, pages |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 98–107. ACM, September 2003. |XML| xmlLoc_4 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [15] R. Langerak. View updates in relational databases |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| with an independent scheme. ACM Transactions on |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Database Systems (TODS), 15(1):40–66, 1990. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [16] P. Louridas. Junit: Unit testing and coding in |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| tandem. IEEE Software, 22(4):12 – 15, July-Aug 2005. |XML| xmlLoc_5 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [17] J. Melton and A. R. Simon. SQL:1999 Understanding |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| Relational Language Components. Morgan Kaufmann, |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 2002. |XML| xmlLoc_5 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [18] H. Shu. Using constraint satisfaction for view update. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_none xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| Journal of Intelligent Information Systems, |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 15(2):147–173, 2000. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [19] D. Willmor and S. M. Embury. Exploring test |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_new
reference ||| adequacy for database systems. In Proceedings of the |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| 3rd UK Software Testing Research Workshop |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| (UKTest), pages 123–133. The University of Sheffield, |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| September 2005. |XML| xmlLoc_6 xmlAlign_none xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_yes xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| [20] D. Willmor and S. M. Embury. A safe regression test |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_justified xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_new xmlPara_new
reference ||| selection technique for database–driven applications. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| In Proceedings of the 21st International Conference on |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Software Maintenance (ICSM), pages 421–430. IEEE |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
reference ||| Computer Society, September 2005. |XML| xmlLoc_7 xmlAlign_justified xmlBold_no xmlItalic_no xmlFontSize_common xmlDd_no xmlCell_no xmlBullet_no xmlA_same xmlF_same xmlSF_same xmlSFBI_same xmlSFBIA_same xmlPara_same
page ||| 111 |XML| xmlLoc_7 xmlAlign_left xmlBold_no xmlItalic_no xmlFontSize_none xmlDd_yes xmlCell_no xmlBullet_no xmlA_left xmlF_new xmlSF_new xmlSFBI_new xmlSFBIA_new xmlPara_new
