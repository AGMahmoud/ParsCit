A Resilient Packet-Forwarding Scheme against Maliciously
Packet-Dropping Nodes in Sensor Networks
Suk-Bok Lee and Yoon-Hwa Choi
Department of Computer Engineering
Hongik University
121-791 Seoul, Korea
{sblee, yhchoi}@cs.hongik.ac.kr
ABSTRACT
This paper focuses on defending against compromised nodes’ +L+ dropping of legitimate reports and investigates the misbe- +L+ havior of a maliciously packet-dropping node in sensor net- +L+ works. We present a resilient packet-forwarding scheme us- +L+ ing Neighbor Watch System (NWS), specifically designed +L+ for hop-by-hop reliable delivery in face of malicious nodes +L+ that drop relaying packets, as well as faulty nodes that +L+ fail to relay packets. Unlike previous work with multipath +L+ data forwarding, our scheme basically employs single-path +L+ data forwarding, which consumes less power than multipath +L+ schemes. As the packet is forwarded along the single-path +L+ toward the base station, our scheme, however, converts into +L+ multipath data forwarding at the location where NWS de- +L+ tects relaying nodes’ misbehavior. Simulation experiments +L+ show that, with the help of NWS, our forwarding scheme +L+ achieves a high success ratio in face of a large number of +L+ packet-dropping nodes, and effectively adjusts its forwarding +L+ style, depending on the number of packet-dropping nodes +L+ en-route to the base station.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General— +L+ Security and protection
General Terms
Security, Algorithm, Reliability
Keywords
Sensor Network Security, Reliable Delivery, Packet-dropping +L+ Attacks, Secure Routing
1. INTRODUCTION
Wireless sensor networks consist of hundreds or even thou- +L+ sands of small devices each with sensing, processing, and
Permission to make digital or hard copies of all or part of this work for +L+ personal or classroom use is granted without fee provided that copies are +L+ not made or distributed for profit or commercial advantage and that copies +L+ bear this notice and the full citation on the first page. To copy otherwise, to +L+ republish, to post on servers or to redistribute to lists, requires prior specific +L+ permission and/or a fee.
SASN’06, October 30, 2006, Alexandria, Virginia, USA.
Copyright 2006 ACM 1-59593-554-1/06/0010 ...$5.00.
communicating capabilities to monitor the real-world envi- +L+ ronment. They are envisioned to play an important role +L+ in a wide variety of areas ranging from critical military- +L+ surveillance applications to forest fire monitoring and the +L+ building security monitoring in the near future. In such a +L+ network, a large number of sensor nodes are distributed to +L+ monitor a vast field where the operational conditions are +L+ harsh or even hostile. To operate in such environments, se- +L+ curity is an important aspect for sensor networks and secu- +L+ rity mechanisms should be provided against various attacks +L+ such as node capture, physical tampering, eavesdropping, +L+ denial of service, etc [23, 33, 38].
Previous research efforts against outsider attacks in key- +L+ management schemes [4, 13, 32] and secure node-to-node +L+ communication mechanisms [24, 32] in sensor networks are +L+ well-defined. Those security protections, however, break +L+ down when even a single legitimate node is compromised. +L+ It turns out to be relatively easy to compromise a legiti- +L+ mate node [14], which is to extract all the security infor- +L+ mation from the captured node and to make malicious code +L+ running for the attacker’s purpose.
Even a small number of compromised nodes can pose +L+ severe security threats on the entire part of the network, +L+ launching several attacks such as dropping legitimate re- +L+ ports, injecting bogus sensing reports, advertising inconsis- +L+ tent routing information, eavesdropping in-network commu- +L+ nication using exposed keys, etc. Such disruption by the +L+ insider attacks can be devastating unless proper security +L+ countermeasures against each type of attacks are provided. +L+ In reality, detecting all of the compromised nodes in the +L+ network is not always possible, so we should pursue grace- +L+ ful degradation [35], with a small number of compromised +L+ nodes. The fundamental principle for defense against the +L+ insider attacks is to restrict the security impact of a node +L+ compromise as close to the vicinity of the compromised node +L+ as possible.
When the attacker compromises a legitimate node, it may +L+ first try to replicate the captured node indefinitely with the +L+ same ID and spread them over the network. Against such +L+ attacks, a distributed detection mechanism (based on emer- +L+ gent properties [11]) has been proposed by Parno et al. [31]. +L+ In addition, Newsome et al. [30] have presented the tech- +L+ niques that prevent the adversary from arbitrarily creating +L+ new IDs for nodes.
Using cryptographic information obtained from a cap- +L+ tured node, attackers can establish pairwise keys with any +L+ legitimate nodes in order to eavesdrop communication any-
59
where in the network. Localized key-establishment scheme +L+ by Zhu et al. [46] is a good solution against such an in- +L+ sider attack. Since the scheme does not allow a cloned node +L+ (by inside-attackers) to establish pairwise keys with any le- +L+ gitimate nodes except the neighbors of the compromised +L+ nodes, the cryptographic keys extracted from the compro- +L+ mised node are of no use for attackers.
Compromised nodes can also inject false sensing reports +L+ to the network (i.e. report fabrication attacks [39]), which +L+ causes false alarms at the base station or the aggregation +L+ result to far deviate from the true measurement. Proposed +L+ en-route filtering mechanisms [8, 39, 41, 44, 47] that de- +L+ tect and drop such false reports effectively limit the impact +L+ of this type of attacks. Also, proposed secure aggregation +L+ protocols [34, 40] have addressed the problem of false data +L+ injection, and they ensure that the aggregated result is a +L+ good approximation to the true value in the presence of a +L+ small number of compromised nodes.
Advertising inconsistent routing information by compro- +L+ mised nodes can disrupt the whole network topology. Hu et +L+ al. [19, 20] have proposed SEAD, a secure ad-hoc network +L+ routing protocol that uses efficient one-way hash functions +L+ to prevent any inside attackers from injecting inconsistent +L+ route updates. A few secure routing protocols [6, 27] in sen- +L+ sor networks have been proposed to detect and exclude the +L+ compromised nodes injecting inconsistent route updates.
Compromised nodes also can silently drop legitimate re- +L+ ports (i.e. selective forwarding attacks [23]), instead of for- +L+ warding them to the next-hop toward the base station. Since +L+ data reports are delivered over multihop wireless paths to +L+ the base station, even a small number of strategically-placed +L+ packet-dropping nodes can deteriorate the network through- +L+ put significantly. In order to bypass such nodes, most work +L+ on secure routing and reliable delivery in sensor networks re- +L+ lies on multipath forwarding scheme [5, 6, 7, 10], or interleaved- +L+ mesh forwarding scheme [26, 29, 39, 42].
Among the insider attacks described above, this paper fo- +L+ cuses on defense against compromised nodes’ dropping of le- +L+ gitimate reports and we present a resilient packet-forwarding +L+ scheme using Neighbor Watch System (NWS) against ma- +L+ liciously packet-dropping nodes in sensor networks. We in- +L+ vestigate the misbehavior of a maliciously packet-dropping +L+ node and show that an acknowledgement (ACK) that its +L+ packets were correctly received at the next-hop node does +L+ not guarantee reliable delivery from the security perspective.
NWS is specifically designed for hop-by-hop reliable de- +L+ livery in face of malicious nodes that drop relaying packets, +L+ as well as faulty nodes that fail to relay packets. Unlike pre- +L+ vious work [10, 29, 42] with multipath data forwarding, our +L+ scheme basically employs single-path data forwarding, which +L+ consumes less power than multipath schemes. As the packet +L+ is forwarded along the single-path toward the base station, +L+ our scheme, however, converts into multipath data forward- +L+ ing at the location where NWS detects relaying nodes’ mis- +L+ behavior.
NWS exploits the dense deployment of large-scale static +L+ sensor networks and the broadcast nature of communication +L+ pattern to overhear neighbors’ communication for free.
The contribution of this paper is two-fold. First, we in- +L+ vestigate the misbehavior of a maliciously packet-dropping +L+ node and propose a resilient packet-forwarding scheme, which +L+ basically employs single-path data forwarding, in face of +L+ such nodes, as well as faulty nodes. Second, our scheme +L+ can work with any existing routing protocols. Since it is +L+ designed not for securing specific protocols but for universal +L+ protocols, it can be applied to any existing routing protocols +L+ as a security complement.
The rest of paper is organized as follows. Background is +L+ given in Section 2. We present our resilient packet-forwarding +L+ scheme in Section 3. An evaluation of the scheme is given +L+ and discussed in Section 4. We present conclusions and fu- +L+ ture work in Section 5.
2. BACKGROUND +L+ 2.1 Network Model
Sensor networks typically comprise one or multiple base +L+ stations and hundreds or thousands of inexpensive, small, +L+ static, and resource-constrained nodes scattered over a wide +L+ area. An inexpensive sensor node cannot afford tamper- +L+ resistant packaging. We assume that a large number of sen- +L+ sor nodes are deployed in high density over a vast field, such +L+ that the expected degree of a node is high; each sensor has +L+ multiple neighbors within its communication range. Sensing +L+ data or aggregated data are sent along the multihop route +L+ to the base station. We assume that each sensor node has +L+ a constant transmission range, and communication links are +L+ bidirectional.
Our sensor network model employs a key-establishment +L+ scheme that extends the one in LEAP [46] where the im- +L+ pact of a node compromise is localized in the immediate +L+ neighborhood of the compromised node, and our scheme is +L+ based on it. To evolve from LEAP, we will describe it briefly +L+ in Section 2.4.
2.2 Threat Model
The attacks launched from outsiders hardly cause much +L+ damage to the network, since the rouge node, which does not +L+ possesses the legitimate credentials (e.g. the predistributed +L+ key ring from the key pool [13]), fails to participate in the +L+ network. On the other hand, there may be multiple attacks +L+ from insiders (e.g. dropping legitimate reports, injecting +L+ false sensing reports, advertising inconsistent route infor- +L+ mation, and eavesdropping in-network communication us- +L+ ing exposed keys, etc), and the combination of such attacks +L+ can lead to disruption of the whole network. Thus, proper +L+ security countermeasures (specifically designed to protect +L+ against each type of the attacks) should be provided.
Among them, in this paper, we focus on defending against +L+ compromised nodes’ dropping of legitimate reports; Other +L+ attacks mentioned above are effectively dealt with by several +L+ proposed schemes as described in the previous section.
We consider a packet-dropping node as not merely a faulty +L+ node, but also an arbitrarily malicious node. Some previous +L+ work [3, 29, 36] on reliable delivery uses an acknowledge- +L+ ment (ACK) that its packets were correctly received at the +L+ next-hop node, in order to find out unreliable links. How- +L+ ever, in the presence of maliciously packet-dropping nodes, +L+ simply receiving ACK from a next-hop node does not guar- +L+ antee that the packet will be really forwarded by the next- +L+ hop node. For example, node u forwards a packet to com- +L+ promised node v, and node u waits for ACK from node v. +L+ Node v sends back ACK to node u, and then node v silently +L+ drops the packet. This simple example shows that receiving +L+ ACK is not enough for reliable delivery in face of maliciously +L+ packet-dropping nodes.
60
For more reliability, we should check whether the next- +L+ hop node really forwards the relaying packet to its proper +L+ next-hop node. Fortunately, due to the broadcast nature of +L+ communication pattern in sensor networks, we can overhear +L+ neighbors’ communication for free (for now per-link encryp- +L+ tion is ignored). After forwarding a packet to next-hop node
v and buffering recently-sent packets, by listening in on node +L+ v’s traffic, we can tell whether node v really transmits the +L+ packet. Watchdog [28] mechanism (extension to DSR [22]), +L+ implicit ACK in M2 RC [29], and local monitoring in DI- +L+ CAS [25] detect misbehaving nodes in this way. However, +L+ this kind of simple overhearing schemes does not guarantee +L+ reliable delivery, either.
With arbitrarily malicious nodes, we should be assured +L+ that the node, to which the next-hop node forwards the +L+ relaying packet, is really a neighbor of the next-hop node. +L+ For example, node u forwards a packet to compromised node
v, and node u listens in on node v’s traffic to compare each +L+ overheard packet with the packet in the buffer. Node v +L+ transmits the relaying packet whose intended next-hop id +L+ marked with any id in the network such as x that is not a +L+ neighbor of v. Then node u overhears this packet from node
v, and considers it forwarded correctly despite the fact that +L+ none actually receives the packet. The packet is eventually +L+ dropped without being detected. We refer to this attack as +L+ blind letter attack.
We consider packet-dropping attacks to be addressed in +L+ this paper as ones ranging from the naive case (e.g. a faulty +L+ node) to the most malicious one (e.g. a node launching +L+ blind letter attack). We focus on developing a solution to +L+ such attacks.
2.3 Notation
We use the following notation throughout the paper:
•	u, v are principals, such as communicating nodes.
•	R.. is a random number generated by u.
•	fK is a family of pseudo-random function [12].
•MAC(K, M1 |M2) denotes the message authentication +L+ code (MAC) of message - concatenation of M1 and M2, +L+ with MAC key K.
2.4 Key-Establishment Scheme in LEAP
LEAP supports the establishment of four types of keys for +L+ each sensor node - an individual key shared with the base +L+ station, a pairwise key shared with its neighbor, a cluster +L+ key shared with its surrounding neighbors, and a group key +L+ shared by all the nodes in the networks.
It assumes that the time interval Test for a newly deployed +L+ sensor node to complete the neighbor discovery phase (e.g. +L+ tens of seconds) is smaller than the time interval T.i. that is +L+ necessary for the attacker to compromise a legitimate node +L+ (i.e. T�i. &gt; Test). Some existing work [1, 39] has made +L+ similar assumptions, which are believed to be reasonable.
The four steps for a newly added node u to establish a +L+ pairwise key with each of its neighbors are as follows:
1. KEY PRE-dIStRIbUtIOn. Each node u is loaded with +L+ a common initial key KI, and derives its master key
K.. = fKI (u). +L+ 2. NEIghbOR DISCOVERY. Once deployed, node u sets +L+ up a timer to fire after time T�i., broadcasts its id, +L+ and waits for each neighbor v’s ACK. The ACK from +L+ v is authenticated using the master key K, of node v. +L+ Since node u knows KI, it can derive K, = fKI (v).
u−→∗: u,R...
v−→u: v, MAC(K,, R.. |v).
3. PAIRWISE KEY EStAblIShmEnt. Node u computes its +L+ pairwise key with v, K..,, as K.., = fKv (u). Node v +L+ also computes K.., in the same way. K.., serves as +L+ their pairwise key.
4. KEY ERASURE. When its timer expires, node u erases +L+ KI and all the master keys of its neighbors. Every +L+ node, however, keeps its own master key, in order to +L+ establish pairwise keys with later-deployed nodes.
Once erasing KI, a node will not be able to establish a +L+ pairwise key with any other nodes that have also erased KI. +L+ Without KI, a cloned node (by an attacker compromising a +L+ legitimate node after T.i.) fails to establish pairwise keys +L+ with any nodes except the neighbors of the compromised +L+ node. In such a way, LEAP localizes the security impact of +L+ a node compromise.
3. A RESILIENT PACKET-FORWARDING +L+ SCHEME USING NEIGHBOR WATCH SYS- +L+ TEM
In this section, we present our resilient packet-forwarding +L+ scheme using Neighbor Watch System (NWS). NWS works +L+ with the information provided by Neighbor List Verification +L+ (NLV) to be described in Section 3.2.
3.1 Neighbor Watch System
Our scheme seeks to achieve hop-by-hop reliable delivery +L+ in face of maliciously packet-dropping nodes, basically em- +L+ ploying single-path forwarding. To the best of our knowl- +L+ edge, proposed works so far rely on multipath forwarding +L+ or diffusion-based forwarding, exploiting a large number of +L+ nodes in order to deliver a single packet. ACK-based tech- +L+ nique is not a proper solution at all as explained in the +L+ previous section.
With NWS, we can check whether the next-hop node re- +L+ ally forwards the relaying packet to the actual neighbor of +L+ the next-hop node. The basic idea of our scheme is as fol- +L+ lows:
1. Neighbor List Verification. After deployment, dur- +L+ ing neighbor discovery phase, every node u gets to +L+ know of not only its immediate neighbors, but also the +L+ neighbors’ respective neighbor lists (i.e. u’s neighbors’ +L+ neighbor lists). The lists are verified using Neighbor +L+ List Verification to be described in Section 3.2. Every +L+ node stores its neighbors’ neighbor lists in the neighbor +L+ table.
2. Packet Forwarding to Next-hop. If node u has +L+ a packet to be relayed, it buffers the packet and for- +L+ wards the packet (encrypted with cluster key of node +L+ u so that neighbors of node u can overhear it) to its +L+ next-hop node v. As in LEAP, a cluster key is a key +L+ shared by a node and all its neighbors, for passive par- +L+ ticipation.
61
Figure 1: Neighbor Watch System. Sub-watch +L+ nodes w and y, as well as primary-watch node u lis- +L+ ten in on v’s traffic.
3. Designation of Watch Nodes. Overhearing the +L+ packet from node u to node v, among neighbors of +L+ node u, the nodes that are also neighbors of node v (in +L+ Figure 1, nodes w and y) are designated as sub-watch +L+ nodes and store the packet in the buffer. Other nodes +L+ (that are not neighbors of node v) discard the packet. +L+ Node u itself is a primary-watch node. A primary- +L+ watch node knows which nodes are sub-watch nodes, +L+ since every node has the knowledge of not only its +L+ neighbors but also their respective neighbor lists.
4. Neighbor Watch by Sub-Watch Node. Sub-watch +L+ nodes w and y listen in on node v’s traffic to compare +L+ each overheard packet with the packet in the buffer. +L+ To defend against blind letter attack, each of them +L+ also checks whether the packet’s intended next-hop is +L+ a verified neighbor of node v, by looking up the neigh- +L+ bor table. If all correct, the packet in the buffer is +L+ removed and the role of the sub-watch node is over. +L+ If the packet has remained in the buffer for longer +L+ than a certain timeout, sub-watch nodes w and y for- +L+ ward the packet (encrypted with their respective clus- +L+ ter keys) to their respective next-hop nodes other than +L+ node v. Then the role of a sub-watch node is over (each +L+ of them is now designated as a primary-watch node for +L+ the packet it has forwarded).
5. Neighbor Watch by Primary-Watch Node. Primary- +L+ watch node u does the same job as sub-watch nodes.
The only difference, however, is that it listens in on
not only node v’s traffic, but also sub-watch nodes w’s
and y’s. If the packet is correctly forwarded on by at
least one of them (nodes v, w, or y), primary-watch
node u removes the packet in the buffer and the role
of the primary-watch node is over.
Otherwise, after a certain timeout, primary-watch node +L+ u forwards the packet (encrypted with its cluster key) +L+ to its next-hop other than node v.
As the packet is forwarded on, this procedure (except for +L+ Neighbor List Verification) of NWS is performed at each +L+ hop so that hop-by-hop reliable delivery can be achieved +L+ with mainly depending on single-path forwarding. On the +L+ other hand, in the previous approaches [29, 39, 42], when +L+ forwarding a packet, a node broadcasts the packet with no +L+ designated next-hop, and all neighbors with smaller costs&apos;
&apos;The cost at a node is the minimum energy overhead to
Figure 2: An example of our packet-forwarding +L+ scheme. Only the nodes that relay the packet are +L+ presented. With the help of sub-watch nodes (grey +L+ ones), our scheme bypasses two packet-dropping +L+ nodes en-route to the base station.
or within a specific geographic region continue forwarding +L+ the packet anyway. For example, in Figure 1, if nodes v, +L+ w, and y have smaller costs than node u in the previous +L+ approaches, they all forward2 the packet from node u. In +L+ our scheme, however, sub-watch nodes w and y are just on +L+ watch in designated next-hop node v, instead of uncondi- +L+ tionally forwarding the packet. If no packet-dropping occurs +L+ en-route to the base station, the packet may be forwarded +L+ along single-path all the way through.
However, a packet-dropping triggers the multipath for- +L+ warding for the dropped packet. If the designated next-hop +L+ node v in Figure 1 has not forwarded the relaying packet to +L+ its certified neighbor by a certain timeout, sub-watch nodes +L+ w and y forward the packet to their respective next-hop. +L+ At the point, the packet is sent over multiple paths. Since +L+ the location where the packet-dropping occurs is likely in +L+ an unreliable region, this prompt reaction of the conver- +L+ sion to multipath forwarding augments the robustness in our +L+ scheme. The degree of multipath depends on the number of +L+ the sub-watch nodes. Figure 2 shows an example of our +L+ packet-forwarding scheme, bypassing two packet-dropping +L+ nodes en-route to the base station. If a node utilizes a cache +L+ [16, 21] for recently-received packets, it can suppress the +L+ same copy of previously-received one within a certain time- +L+ out, as nodes u and v in Figure 2.
Our scheme requires that a relaying packet should be en- +L+ crypted with a cluster key of a forwarding node, in order +L+ that all its neighbors can decrypt and overhear it. In fact, +L+ per-link encryption provides better robustness to a node +L+ compromise, since a compromised node can decrypt only +L+ the packets addressed to it. Thus, there exists a tradeoff +L+ between resiliency against packet-dropping and robustness +L+ to a node compromise. However, encryption with a cluster +L+ key provides an intermediate level of robustness to a node +L+ compromise [24] (a compromised node can overhear only +L+ its immediate neighborhood), and also supports local broad- +L+ cast (i.e. resiliency against packet-dropping), so that we can +L+ achieve graceful degradation in face of compromised nodes.
forward a packet from this node to the base station.
2It is the broadcast transmission with no designated next- +L+ hop, and, if needed, the packet should be encrypted with a +L+ cluster key in order for all neighbors to overhear it.
u
y
v
w
Base +L+ Station
v
u
62
To make our scheme work (against blind letter attack), we +L+ must address the problem of how a node proves that it re- +L+ ally has the claimed neighbors. It is the identical problem of +L+ how a node verifies the existence of its neighbors’ neighbors. +L+ Apparently, a node has the knowledge of its direct neigh- +L+ bors by neighbor discovery and pairwise key establishment +L+ phases. However, in the case of two-hop away neighbors, +L+ as in Figure 1, malicious node v can inform its neighbor u +L+ that it also has neighbor node x (any possible id in the net- +L+ work) which in fact is not a neighbor of node v. Node u has +L+ to believe it, since node x is not a direct neighbor of node +L+ u, and only the node v itself knows its actual surrounding +L+ neighbors. Then, how do we verify the neighbors’ neigh- +L+ bors? The answer to this critical question is described in +L+ the next subsection.
3.2 Neighbor List Verification
To verify neighbors’ neighbors, we present Neighbor List +L+ Verification (NLV) which extends the pairwise key estab- +L+ lishment in LEAP. During neighbor discovery in LEAP, two +L+ messages are exchanged between neighbors to identify each +L+ other. On the other hand, NLV adopts three-way handshak- +L+ ing neighbor discovery, in order to identify not only com- +L+ municating parties but also their respective neighbors.
NLV has two cases of neighbor discovery. One is that +L+ neighbor discovery between two nodes that are both still +L+ within the initial Tmin3 (referred as pure nodes). The other +L+ is that neighbor discovery between a newly-deployed node +L+ within the initial Tmin and an existing node over the initial +L+ Tmin (referred as an adult node).
Neighbor Discovery between Pure Nodes. Neighbor +L+ list verification process between pure nodes is quite simple. +L+ If a pure node broadcasts its neighbor list before the elapse of +L+ its initial Tmin, we can accept the list as verifiable. Thus, the +L+ key point here is to keep track of each other’s Tmin, and to +L+ make sure that both broadcast their respective neighbor lists +L+ before their respective Tmin. The following shows the three- +L+ way handshaking neighbor discovery between pure node u +L+ and v:
u----+*: u,Ru.
v ----+u : �v, Tv, �Rv ,  MAC(Kv, Ru J Ku JMv).
M„
u----+v: u,Tu , MAC(Kuv, RvJMu).
M.
where Tv and Tu are the amount of time remaining until +L+ Tmin of v and Tmin of u, respectively. Once deployed, node
u sets up a timer to fire after time Tmin. Then, it broadcasts +L+ its id, and waits for each neighbor v’s ACK. The ACK from +L+ every neighbor v is authenticated using the master key Kv of +L+ node v. Since node u knows KI4, it can derive Kv = fKI (v). +L+ The ACK from node v contains Tv, the amount of time +L+ remaining until Tmin of node v. If Tv is a non-zero value, +L+ node v claims to be a pure node. Ku in MAC proves node
v to be a pure node, since pure node v should know KI +L+ and derive Ku = fKI (u). Node u records ˇTv (Tv added
3Tmin is the time interval, necessary for the attacker to com- +L+ promise a legitimate node as in LEAP [46].
4Each node u is loaded with a common initial key KI, and +L+ derives its master key Ku = fKI (u). After time Tmin, node +L+ u erases KI and all the master keys of its neighbors.
Figure 3: Neighbor Discovery between Pure node x +L+ and Adult node u. Grey and white nodes represent +L+ adult and pure nodes, respectively.
to the current time of node u) in the entry for node v in +L+ the neighbor table. Node u computes its pairwise key with
v, Kuv = fK„ (u).5 Node u also generates MAC(Kv, v Ju) +L+ (which means that v certifies u as an immediate neighbor), +L+ and stores it as a certificate.
The ACK from node u also contains Tu, the amount of +L+ time remaining until Tmin of u. This ACK is authenticated +L+ using their pairwise key Kuv, which proves node u a pure +L+ node and u’s identity. Node v then records ˇTu (Tu added +L+ to the current time of v) in the entry for u in the neighbor +L+ table. It also generates MAC(Ku, uJv) and stores it as a +L+ certificate. Then, the three-way handshaking is done.
Every pure node u broadcasts its neighbor list just prior +L+ to Tmin of u. Each receiving neighbor v checks whether the +L+ receiving time at v is prior to ˇTu in the neighbor table. If +L+ yes, the neighbor list of u is now certified by each neighbor v.
Neighbor Discovery between A Pure Node and An +L+ Adult node. After most nodes have completed bootstrap- +L+ ping phase, new nodes can be added in the network. Con- +L+ sider Figure 3. The issue here is how adult node u can as- +L+ sure its existing neighbors (v and w) of the existence of its +L+ newly-added neighbor x. This is a different situation from +L+ the above neighbor list verification case between two pure +L+ nodes. Thus, the messages exchanged during the three-way +L+ handshaking are somewhat different in this case. The fol- +L+ lowing shows the three-way handshaking neighbor discovery +L+ between pure node x and adult node u:
x----+ * :	x, Rx.
, MAC(Kxu, Ru JMx).
Newly-added node x sets up a timer to fire after time Tmin. +L+ Then, it broadcasts its id, and waits for each neighbor u’s
5Node v also computes Kuv in the same way. Kuv serves as +L+ their pairwise key.
r
t
z
v
w
u
x
q
certificate ��	�
certificate ��	�
u----+ x : u, Tu, Ru, v,	MAC(Kv, vJu), w, MAC(Kw, wJu)
	�	��	�
M.
, MAC(Ku, Rx JMu).
x----+u:	certificate ��	�	one—time cert. �	one—time cert.
			^ �
MAC(Kx, xJu), v, MAC(Kv, xJu), w, MAC(Kw, xJu)
�	��	�
Ms
x, Tx,
63
ACK. The ACK from every neighbor u is authenticated us- +L+ ing the master key Ku of node u. Since node x knows KI, +L+ it can derive Ku = fKI (u). The ACK from node u contains +L+ Tu, the amount of time remaining until Tmin of u. If Tu is +L+ zero, node u is an adult node that may already have mul- +L+ tiple neighbors as in Figure 3. Node u reports its certified +L+ neighbor list (v and w) to x by including their respective +L+ certificates in the ACK. Node x verifies u’s neighbor list by +L+ examining each certificate, since x can generate any certifi- +L+ cate with KI. If all correct, x computes its pairwise key with +L+ u, Kxu = fKu (x). Node x also generates MAC(Ku, ujx) and +L+ stores it as a certificate.
The ACK from x also contains Tx, the amount of time +L+ remaining until Tmin of x. This ACK is authenticated using +L+ their pairwise key Kxu, which proves node x a pure node +L+ and x’s identity. Node u then records ˇTx (Tx added to the +L+ current time of u) in the entry for x in the neighbor table. +L+ Since adult node u cannot generate MAC(Kx, xju) by itself, +L+ pure node x provides the certificate for u in the ACK. Node
x also provides one-time certificates6 for each of u’s certified +L+ neighbors (v and w). Then, the three-way handshaking is +L+ done.
After that, adult node u broadcasts one-time certificates +L+ (from newly-discovered pure node x), in order to assure u’s +L+ existing neighbors (v and w) of the discovery of new neighbor
x. The packet containing one-time certificates is as follows:
Mu
, MAC(Kcu, Mu).
where x is a new neighbor of u, KAu is a local broadcast au- +L+ thentication key in u’s one-way key chain, Kcu is the cluster +L+ key of u. Each receiving neighbor v of u verifies u’s new +L+ neighbor x by examining the one-time certificate designated +L+ for v, MAC(Kv, xju)6. If ok, node x is now certified by each +L+ neighbor v of u. Then, one-time certificates can be erased, +L+ since they are of no use any more.
Broadcast authentication only with symmetric keys such +L+ as cluster key Kcu fails to prevent an impersonation attack, +L+ since every neighbor of u shares the cluster key of u. Thus, +L+ we employ the reverse disclosure of one-way key chain KAu +L+ as in LEAP.
Just prior to Tmin of x, pure node x broadcasts its neigh- +L+ bor list. Each receiving neighbor u of x checks whether the +L+ receiving time at u is prior to ˇTx in the neighbor table. If +L+ yes, the neighbor list of x is now certified by each neighbor u.
In summary, through the proposed three-way handshak- +L+ ing neighbor discovery process, pure node u identifies each +L+ immediate neighbor v and v’s certified neighbor list (if v is +L+ an adult node), and keeps track of Tmin of v. Just prior +L+ to Tmin of u, node u broadcasts its direct neighbor list so +L+ that every neighbor of u accepts the list as verifiable. Then, +L+ node u becomes an adult node. After that, if newly-added +L+ node x initiates neighbor discovery with adult node u, node
u identifies pure node x, keeps track of Tmin of x, provides +L+ u’s certified neighbor list to x, and, in return, takes one-time +L+ certificates from x. Node u then broadcasts these one-time
6One-time certificate, for instance MAC(Kv, xju), assures
v that x is an immediate neighbor of u. It is generated by +L+ pure node x with master key of v.
Table 1: An example of the Neighbor Table of u.
Neighbor ID	Certificate	Verified Neighbor List
v	MAC(Kv, v ju)	u, w, t
w	MAC(Kw, wju)	u, v, z
x	MAC(Kx, xju)	u, r, q
certificates, in order to assure u’s existing neighbors of the +L+ discovery of new neighbor x. Thus, every time adult node u +L+ discovers newly-added node x through three-way handshak- +L+ ing, node u informs (by broadcasting) its existing neighbors +L+ of the discovery of new neighbor x. Also, whenever receiv- +L+ ing neighbor list information from pure neighbor x, node u +L+ checks whether the receiving time at u is prior to ˇTx in the +L+ neighbor table. If yes, u now accepts the neighbor list of x +L+ as verifiable.
Through the above neighbor list verification in the boot- +L+ strapping phase, every node gets the knowledge of its neigh- +L+ bors’ certified neighbors. Our Neighbor Watch System makes +L+ use of this information to prevent blind letter attack. With +L+ this knowledge, watch nodes are able to check whether the +L+ relaying packet’s intended next-hop is a verified neighbor of +L+ the forwarding node.
3.3 Neighbor Table Maintenance
The information obtained through neighbor list verifica- +L+ tion (e.g. its direct neighbors, corresponding certificates, +L+ neighbors’ neighbor lists, etc) is stored in the neighbor table +L+ of each node. Table 1 shows an example of the neighbor +L+ table of node u. In densely-deployed sensor networks, the +L+ expected degree of a node is high. However, in this example, +L+ for simplicity, node u has only three neighbors v, w, and x +L+ as in Figure 3.
The entries in the neighbor table are accessed and main- +L+ tained with immediate neighbor IDs. For example, if node +L+ u overhears the packet sent from w to v, node u begins to +L+ listen in on v’s traffic as a sub-watch node (since the neigh- +L+ bor table of u has both v’s and w’s entries in it). Unless v +L+ forwards the packet to a node of the Verified Neighbor List +L+ in v’s entry by a certain timeout, sub-watch node u will for- +L+ ward the packet to its next-hop other than v; many existing +L+ routing protocols [5, 18, 21, 27, 37, 43] enable each node to +L+ maintain multiple potential next-hop. Once forwarding the +L+ packet, sub-watch node u becomes a primary-watch node +L+ and begins to listen in on its next-hop’s traffic as described +L+ above.
If newly-added node y initiates the three-way handshaking +L+ with u, node u provides its neighbor list to y by sending +L+ certificates in the neighbor table. Node u, in return from +L+ node y, takes the certificate for y and one-time certificates +L+ for u’s existing neighbors. Then, node u stores the certificate +L+ in the new entry for y. However, node u does not store the +L+ one-time certificates but broadcasts them to its neighbors. +L+ If new neighbor y broadcasts its neighbor list within Tmin, +L+ node u stores the list in the entry for y.
If node u is compromised, not only cryptographic key +L+ information but also certificates in the neighbor table are +L+ exposed. However, the attacker cannot misuse these cer- +L+ tificates for other purposes. Since a certificate only attests +L+ neighborship between two specific nodes, it cannot be ap- +L+ plied to any other nodes. In fact, it can be made even public. +L+ However, colluding nodes can deceive a pure node anyway,
one—time cert.	one—time cert.
� �	�
MAC(Kv, xju), w, MAC(Kw, xju), KAu
�	��	�
u____+ * :	u, x, v,
�
64
by fabricating a bogus certificate. We will describe this lim- +L+ itation in Section 4.4.
4. EVALUATION
In this section, we evaluate the communication and stor- +L+ age cost, and analyze the security of our resilient forwarding +L+ scheme (Neighbor Watch System) as well as Neighbor List +L+ Verification. We then present the simulation results of our +L+ forwarding scheme.
4.1 Communication Cost
Unlike the previously proposed diffusion-based reliable- +L+ forwarding schemes [21, 29, 39, 42] that exploit a large num- +L+ ber of nodes to deliver a single packet, our scheme requires +L+ only the designated next-hop node to relay the packet, un- +L+ der the supervision of watch nodes. We note that, like over- +L+ hearing by watch nodes in our scheme, those diffusion-based +L+ schemes require each node to listen to all its neighbors, since +L+ they forward a packet by broadcasting with no designated +L+ next-hop. With a smaller number of relaying nodes, our +L+ scheme makes a report successfully reach the base station. +L+ Thus, the average communication cost of our forwarding +L+ scheme for delivery of a single packet is smaller than those +L+ of the previous schemes.
Our neighbor list verification during the bootstrapping +L+ phase requires the three-way handshaking neighbor discov- +L+ ery. Unlike the neighbor discovery between two pure nodes, +L+ the size of the messages exchanged between a pure and an +L+ adult node varies with the degree of the adult node. A large +L+ number of certificates caused by the high degree can be over- +L+ burdensome to a single TinyOS packet which provides 29 +L+ bytes for data. Considering 8-byte certificates and a 4-byte7 +L+ message authentication code (MAC), the adult node is able +L+ to include at most two neighbors’ information in a single +L+ TinyOS packet. Thus, when the entire neighbor list cannot +L+ be accommodated within a single packet, the node should +L+ allot the list to several packets and send them serially. In a +L+ network of size N with the expected degree d of each node, +L+ the average number of packets invoked by a newly-added +L+ node per each node is nearly (d — 1)2/2(N — 1).
Therefore, as node density d grows, the total number +L+ of packets transmitted from adult nodes to a newly-added +L+ node increases. However, neighbor discovery between a pure +L+ and an adult node occurs much less than between two pure +L+ nodes, since most neighbor discoveries throughout the net- +L+ work are between two pure nodes in the early stage of the +L+ network. Neighbor discovery between a pure and an adult +L+ node occurs generally when a new node is added to the net- +L+ work.
4.2 Storage Overhead
In LEAP, each node keeps four types of keys and a man- +L+ ageable length of hash chain, which is found to be scalable. +L+ In our scheme, each node needs to additionally store its di- +L+ rect neighbors’ certificates and their respective neighbor lists +L+ as in Table 1. Thus, for a network of the expected degree +L+ d and the byte size l of node ID, the additional storage re- +L+ quirement for each node is d • (8 + ld) bytes.
Although our storage requirement for these neighbor lists +L+ is O(d 2), for a reasonable degree d, memory overhead does
74-byte MAC is found to be not detrimental in sensor net- +L+ works as in TinySec [24] which employs 4-byte MAC.
Figure 4: Examples of critical area C1 and C2.
not exceed 1 KB (a Berkeley MICA2 Mote with 128 KB +L+ flash memory and 4 KB SRAM). For example, when d = 20 +L+ and l = 2, a node needs 960 bytes of memory to store such +L+ information.
If node density of a network is so high that the required +L+ space for those neighbor lists significantly increases and the +L+ storage utilization becomes an issue, we can employ a storage- +L+ reduction technique such as Bloom filter [2]. For example, +L+ when d = 30 and l = 2, a node requires 2,040 bytes of addi- +L+ tional space mainly for the neighbor lists. Instead of storing +L+ neighbors’ neighbor lists, applying each of the neighbor lists +L+ (480 bits) to a Bloom filter (of 5 hash functions mapping to +L+ a 256 bit vector), a node needs the reduced space of 1,200 +L+ bytes for such information (with the false positive probabil- +L+ ity = 0.02).
4.3 Resilience to Packet-Dropping Attacks
In face of maliciously packet-dropping nodes, the higher +L+ degree of multipath we provide, the more resiliency our +L+ scheme achieves against such attacks. The average degree +L+ of multipath depends on the number of sub-watch nodes +L+ around a packet-dropping node. Sub-watch nodes should +L+ be located in the region within the communication range of +L+ both forwarding node u and designated next-hop v. We re- +L+ fer to such a region as critical area. As in Figure 4, if nodes +L+ u and v are located farther away, the size of critical area C2 +L+ gets smaller than that of C1, and the probability (p.) that +L+ at least one sub-watch node exists in the critical area goes +L+ down. The probability (p.) is
p. = 1 — (1 — c)d-1,
where c is the ratio of the critical area size to the node’s com- +L+ munication range, and the expected degree d of the node.
To determine the appropriate degree d, we set the smallest +L+ critical area C2 in Figure 4 as a lower bound case (c = 0.4). +L+ Figure 5 shows that, even in the lower bound critical area, +L+ with d = 6 and d = 10, probability p. is above 0.9 and above +L+ 0.99, respectively.
Since, in a network of degree d, the probability that there +L+ exist m sub-watch nodes in the critical area of the ratio c is
p(m) = �d — m J 1) cm(1 — c)d-m-1
the expected number of sub-watch nodes, m, in the critical +L+ area is given by
E[m] = (d — 1)c.
Thus, in the lower bound (c = 0.4) critical area, when d = +L+ 10, 15, 20, the number of sub-watch nodes (i.e. the degree +L+ of multipath) is 3.6, 5.6, 7.6 on average, respectively. This
u	v	?	u	v	?
C1	C2
,
65
Figure 5: Probability (p.) that at least one sub- +L+ watch node exists in the lower bound (c = 0.4) criti- +L+ cal area.
shows that the higher degree of each node has, our scheme +L+ has the higher degree of multipath and resiliency against +L+ packet-dropping nodes.
4.4 The Security of Neighbor List Verification
Our Neighbor List Verification(NLV) keeps the nice prop- +L+ erties of LEAP. Adult nodes fail to establish pairwise keys +L+ with any adult nodes in arbitrary locations, so that the im- +L+ pact of a node compromise is localized. NLV performs the +L+ three-way handshaking neighbor discovery, instead of two- +L+ message exchange in LEAP. The three-way handshaking en- +L+ ables each node to verify not only its direct neighbors but +L+ also their respective neighbor lists.
Moreover, this this three-way handshaking can be a po- +L+ tential solution to deal with irregularity of radio range [15, +L+ 37, 45]. In reality, due to the noise and some environmen- +L+ tal factors, radio range of each node is not exactly circu- +L+ lar. So, communication links among nodes are asymmetric; +L+ node u can hear node v which is unable to hear u. With +L+ two-message exchange, only the node initiating the neigh- +L+ bor discovery is assured of the link’s bidirectionality. By the +L+ three-way handshaking, both of neighbors can be assured of +L+ their symmetric connectivity.
With NLV, only the verified lists are stored and utilized +L+ for our packet-forwarding scheme. NLV verifies the neighbor +L+ list of an adult node with certificates. These certificates +L+ merely attest neighborship between two specific nodes. Even +L+ if a node is compromised, the attacker fails to abuse the +L+ certificates of the captured node for other purpose.
However, collusion among compromised nodes can fab- +L+ ricate bogus certificates in order to deceive a newly-added +L+ node. For example, consider two colluding nodes u and v at +L+ the different locations. When compromised node u discovers +L+ newly-added node x, node u provides x with u’s neighbor +L+ list (maliciously including v in it). Even though node v is +L+ not an actual neighbor of u, colluding node v can generate
the bogus certificate for u, MAC(K,, v1u). Then, x falsely
believes that v is a direct neighbor of u. This attack, how- +L+ ever, affects only the one newly-added node x. Thus, when +L+ compromised node u tries to launch the blind letter attack 8,
8Compromised node u transmits the relaying packet with its
other surrounding adult neighbors of u can still detect it +L+ anyway.
The more serious case is that colluding nodes exploit a +L+ newly-added node to generate bogus one-time certificates. +L+ For example, consider two colluding nodes u and v that +L+ share all their secret information as well as all their certifi- +L+ cates. When newly-added node x initiates the three-way +L+ handshaking with u, compromised node u pretends to be +L+ v and provides x with v’ neighbor list. Then, x in return +L+ provides u with one-time certificates for each neighbor of +L+ v; these one-time certificates falsely attest that v has new +L+ neighbor x. Node u sends this information to v over the +L+ covert channel. Then, v broadcasts these one-time certifi- +L+ cates, and neighbors of v falsely believe that x is a direct +L+ neighbor of v.
Unfortunately, we do not provide a proper countermea- +L+ sure to defend against this type of man-in-the-middle at- +L+ tacks. However, we point out that this type of attacks has +L+ to be launched in the passive manner. The adversary has +L+ to get the chance of discovery of a newly-added node. In +L+ other words, compromised nodes wait for the initiation of +L+ the three-way handshaking from a newly-added node. Since +L+ the attacker does not know where the new nodes will be +L+ added, it has to compromise a sufficient number of legiti- +L+ mate nodes in order to increase the probability of discovery +L+ of newly-added nodes.
As an active defense against such man-in-the-middle at- +L+ tacks, we can apply a node replication detection mechanism +L+ such as Randomized or Line-Selected Multicast [31], which +L+ revokes the same ID node at the different location claims. +L+ To successfully launch such man-in-the-middle attacks, two +L+ colluding nodes should pretend to be each other so that each +L+ of them claims to be at two different locations with the same +L+ ID. Location-binding key-assignment scheme by Yang et al. +L+ [39] with a little modification also can be a good solution +L+ to such attacks. Since it binds secret keys with nodes’ geo- +L+ graphic locations, the key bound to the particular location +L+ cannot be used at any arbitrary locations. Adopting this, +L+ NLV can check whether the claimed neighbors are really lo- +L+ cated within geographically two hops away.
4.5 Simulations
To further evaluate the performance of our resilient for- +L+ warding scheme, we run simulations of our scheme in the +L+ presence of packet-dropping nodes on a network simulator, +L+ ns-2 [9].
4.5.1 Simulation Model
In our simulations, we deploy N sensor nodes uniformly at +L+ random within 500 x 500m2 target field, with N = 300 and +L+ 600. Each sensor node has a constant transmission range of +L+ 30m, so that the degree of each node is approximately 10 +L+ (N = 300) and 20 (N = 600) on average. We position a base +L+ station and a source node in opposite corners of the field, at +L+ a fixed point (50, 50) and (450, 450), respectively. They are +L+ located approximately 18 hops away from each other.
We distribute compromised nodes over an inner square +L+ area with 200m each side (from 150m to 350m of each side +L+ of the 500 x 500m2 target area). Thus, compromised nodes +L+ are strategically-placed in between the base station and the +L+ source node. In the simulations, those compromised nodes +L+ drop all the relaying packets.
next-hop id as v, so that x considers it forwarded correctly.
1
0.9
0.8
0.7
0.6 +L+ 0.5 +L+ 0.4
0.3
0.2
0.1
0
1	5	10	15	20
Degree of a node
66
Figure 6: Simulation Results (averaged over 100 runs).
0	5	10	15	20	25	30	35	40	45	50
Number of Packet-dropping Nodes
(a) Success ratio (N = 300, x = 0 — 50)
0	10	20	30	40	50	60	70	80	90	100
Number of Packet-dropping Nodes
(b) Success ratio (N = 600, x = 0 — 100)
100
100
10
10
0
0
90
90
( 300 nodes )
80
70
60
50
40
30
20
80 +L+ 70 +L+ 60 +L+ 50 +L+ 40 +L+ 30 +L+ 20
( 600 nodes )
0	5	10	15	20	25	30	35	40	45	50
Number of Packet-Dropping Nodes
0	10	20	30	40	50	60	70	80	90	100
Number of Packet-dropping Nodes
(c) The number of relaying nodes with N = 300
(d) The number of relaying nodes with N = 600
( 300 nodes )
0.6 +L+ 0.5 +L+ 0.4
1
0.9
0.8
0.7
0.3
0.2
0.1
0
1 +L+ 0.9 +L+ 0.8 +L+ 0.7 +L+ 0.6 +L+ 0.5 +L+ 0.4 +L+ 0.3 +L+ 0.2 +L+ 0.1 +L+ 0
( 600 nodes )
Single Path Forwarding	with NWS
Single Path Forwarding	with NWS
Single Path Forwarding	with NWS
Single Path Forwarding	with NWS
We use the typical TinyOS beaconing [17] with a little +L+ modification as a base routing protocol in our simulations. +L+ We add a hop count value in a beacon message9. To have +L+ multiple potential next-hops, when receiving a beacon with +L+ the same or better hop count than the parent node’s, each +L+ node marks the node sending the beacon as a potential next- +L+ hop.
Each simulation experiment is conducted using 100 differ- +L+ ent network topologies, and each result is averaged over 100 +L+ runs of different network topologies.
4.5.2 Simulation Results
In the presence of compromised node dropping all the re- +L+ laying packets, we measure the success ratio (i.e. the per- +L+ centage of the packets that successfully reach the base sta- +L+ tion from the source) and the number of relaying nodes by +L+ the primitive single-path forwarding and with NWS in a +L+ network of size N, with N = 300 and 600.
9The base station initiates the beacon-broadcasting, which +L+ floods through the network, in order to set up a routing tree.
Figure 6(a) shows the success ratio in face of x packet- +L+ dropping nodes (varying x=0 to 50) in a 300-sensor-node +L+ network with the approximate degree d = 10. Although +L+ the success ratio gently decreases with x, it keeps up above +L+ 0.8 even with x = 30, with the help of NWS. This ten- +L+ dency of decreasing success ratio can be attributed to the +L+ degree d = 10 (3.6 sub-watch nodes on average) as well as +L+ an increasing number of packet-dropping nodes. Due to the +L+ strategically-placement of compromised nodes in our sim- +L+ ulations, as x increases on, it is likely that a forwarding +L+ node’s all potential sub-watch nodes themselves are packet- +L+ dropping nodes. Figure 6(c) shows the number of nodes +L+ that relay the packet from the source to the base station +L+ in the same experiments. Since the source is located about +L+ 18 hops away from the base station, the number of relaying +L+ nodes only with the single-path forwarding remains at 18. +L+ With NWS, the number of relaying nodes increases with x, +L+ in order to bypass an increasing number of packet-dropping +L+ nodes. In face of such nodes, our scheme converts single- +L+ path forwarding into multipath data forwarding, with the
67
help of sub-watch nodes around such packet-dropping nodes. +L+ Utilizing a cache for recently-received packets can suppress +L+ the same copy within a certain timeout, which reduces the +L+ number of relaying nodes.
Figure 6(b) shows the success ratio in a 600-sensor-node +L+ network with the approximate degree d = 20 with x packet- +L+ dropping nodes (varying x=0 to 100). Unlike that with N = +L+ 300, the success ratio stays constantly at around 0.99 even +L+ with x = 100, with the help of NWS. This tendency of high +L+ success ratio can be mainly attributed to the degree d = 20 +L+ (7.6 sub-watch nodes on average in the lower bound case), +L+ which is found to be high enough to bypass a large number +L+ of packet-dropping nodes. Figure 6(d) shows the number +L+ of relaying nodes from the source to the base station in the +L+ same experiments. With NWS, the increase in the number +L+ of relaying nodes with x is more conspicuous than that with +L+ N = 300, since more than twice as many as sub-watch nodes +L+ help forward the packets so that it can bypass a large number +L+ of packet-dropping nodes anyway.
In the simulation results, we note that our forwarding +L+ scheme dynamically adjusts its forwarding style, depending +L+ on the number of packet-dropping nodes en-route to the base +L+ station. As in Figures 6(c) and 6(d), while there exist none +L+ or a small number of packet-dropping nodes on the way, our +L+ scheme works almost like the single-path forwarding with +L+ the help of a few additional relaying nodes. On the other +L+ hand, when confronting a large number of packet-dropping +L+ nodes, our scheme makes full use of the help from additional +L+ relaying nodes, in order to successfully deliver the packet to +L+ the base station at any cost to the best efforts.
5. CONCLUSIONS AND FUTURE WORK
In this paper we focus on defending against compromised +L+ nodes’ dropping of legitimate reports. We have presented +L+ a resilient packet-forwarding scheme using Neighbor Watch +L+ System (NWS) against maliciously packet-dropping nodes in +L+ sensor networks. In face of such nodes, NWS is specifically +L+ designed for hop-by-hop reliable delivery, and the prompt +L+ reaction of the conversion from single-path to multipath for- +L+ warding augments the robustness in our scheme so that the +L+ packet successfully reach the base station.
In future work, we plan on further improving NLV to de- +L+ fend against the man-in-the-middle attacks, collusion among +L+ compromised nodes. Such attacks can be prevented by using +L+ a master key derived with not only a node ID but also its +L+ geographic information. We will also seek to address O(d 2) +L+ storage requirement for the neighbors’ neighbor lists. Fi- +L+ nally, we would like to perform an intensive experimental +L+ evaluation to compare our scheme with other reliable deliv- +L+ ery protocols [10, 29, 42].
6. ACKNOWLEDGMENTS
This work was supported by grant No.R01-2006-000-10073- +L+ 0 from the Basic Research Program of the Korea Science and +L+ Engineering Foundation.
7. REFERENCES
[1] R. Anderson, H. Chan, and A. Perrig, Key Infection: +L+ Smart Trust for Smart Dust, IEEE ICNP 2004
[2] Burton H. Bloom, Space/Time Trade-offs in Hash +L+ Coding with Allowable Errors, Communication of the +L+ ACM, vol. 13, 422-426, 1970
[3] B. Carbunar, I. Ioannidis, and C. Nita-Rotaru, +L+ JANUS: Towards Robust and Malicious Resilient +L+ Routing in Hybrid Wireless Networks, ACM workshop +L+ on Wireless security (WiSe’04), Oct. 2004
[4] H. Chan, A. Perrig, and D. Song, Random Key +L+ Predistribution Schemes for Sensor Networks, IEEE +L+ Symposium on Security and Privacy, pp. 197-213, May +L+ 2003.
[5] B. Deb, S. Bhatnagar, and B. Nath, ReInForM: +L+ Reliable Information Forwarding Using Multiple Paths +L+ in Sensor Networks, IEEE Local Computer Networks +L+ (LCN 2003), pp. 406-415, Oct. 2003.
[6] J. Deng, R. Han, and S. Mishra, A Performance +L+ Evaluation of Intrusion- Tolerant Routing in Wireless +L+ Sensor Networks, 2nd International Workshop on +L+ Information Processing in Sensor Networks (IPSN 03), +L+ pp. 349-364, Apr. 2003.
[7] J. Deng, R. Han, and S. Mishra, Intrusion Tolerance +L+ and Anti-Traffic Analysis Strategies for Wireless +L+ Sensor Networks, IEEE International Conference on +L+ Dependable Systems and Networks (DSN), pp. +L+ 594-603, 2004.
[8] J. Deng, R. Han, and S. Mishra, Defending against +L+ Path-based DoS Attacks in Wireless Sensor Networks, +L+ ACM Workshop on Security of Ad-Hoc and Sensor +L+ Networks (SASN’05) , Nov, 2005.
[9] K. Fall and K. Varadhan (editors), NS notes and +L+ documentation, The VINT project, LBL, Feb 2000, +L+ http://www.isi.edu/nsnam/ns/
[10] D. Ganesan, R. Govindan, S. Shenker, and D. Estrin, +L+ Highly Resilient, Energy-Efficient Multipath Routing +L+ in Wireless Sensor Networks, Computing and +L+ Communications Review (MC2R) Vol 1., pp. 11-25, +L+ 2002.
[11] V. D. Gligor, Security of Emergent Properties in +L+ Ad-Hoc Networks, International Workshop on Security +L+ Protocols, Apr. 2004.
[12] O. Goldreich, S. Goldwasser, and S. Micali, How to +L+ Construct Random Functions, Journal of the ACM, +L+ Vol. 33, No. 4, 210-217, 1986
[13] L. Eschenauer and V. D. Gligor, A Key-Management +L+ Scheme for Distributed Sensor Networks, 9th ACM +L+ Conference on Computer and Communication +L+ Security (CCS), pp. 41-47, Nov. 2002.
[14] C. Hartung, J. Balasalle, and R. Han, Node +L+ Compromise in Sensor Networks: The Need for Secure +L+ Systems, Technical Report CU-CS-990-05,
Department of Computer Science University of +L+ Colorado at Boulder, Jan. 2005
[15] T. He, S. Krishnamurthy, J. A. Stankovic, T. F. +L+ Abdelzaher, L. Luo, R. Stoleru, T. Yan, L. Gu, J. Hui, +L+ and B. Krogh, An Energy-Efficient Surveillance +L+ System Using Wireless Sensor Networks, ACM +L+ MobiSys’04, June, 2004
[16] W.R. Heinzelman, J. Kulik, H. Balakrishnan, Adaptive +L+ Protocols for Information Dissemination in Wireless +L+ Sensor Networks, ACM MobiCom99, pp. 174.185, +L+ 1999.
[17] J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. Culler, and +L+ K. Pister, System Architecture Directions for +L+ Networked Sensors, ACU ASPLOS IX, November +L+ 2000.
68
[18] X. Hong, M. Gerla, W. Hanbiao, and L. Clare, Load +L+ Balanced, Energy-Aware Communications for Mars +L+ Sensor Networks, IEEE Aerospace Conference, vol.3, +L+ 1109-1115, 2002.
[19] Y.-C. Hu, D. B. Johnson, and A. Perrig, SEAD: +L+ Secure Efficient Distance Vector Routing for Mobile +L+ Wireless Ad Hoc Networks, IEEE Workshop on Mobile +L+ Computing Systems and Applications, pp. 3-13, Jun. +L+ 2002.
[20] Y.-C. Hu, A. Perrig, and D. B. Johnson, Efficient +L+ Security Mechanisms for Routing Protocols, NDSS +L+ 2003, pp. 57-73, Feb. 2003.
[21] C. Intanagonwiwat, R. Govindan and D. Estrin, +L+ Directed Diffusion: A Scalable and Robust +L+ Communication Paradigm for Sensor Networks, +L+ MobiCom’00, Aug. 2000.
[22] D. Johnson, D.A. Maltz, and J. Broch, The Dynamic +L+ Source Routing Protocol for Mobile Ad Hoc Networks +L+ (Internet-Draft), Mobile Ad-hoc Network (MANET) +L+ Working Group, IETF, Oct. 1999.
[23] C. Karlof and D. Wagner, Secure Routing in Wireless +L+ Sensor Networks: Attacks and Countermeasures, The +L+ First IEEE International Workshop on Sensor Network +L+ Protocols and Applications, pp. 113-127, May 2003
[24] C. Karlof, N. Sastry, and D. Wagner, TinySec: A Link +L+ Layer Security Architecture for Wireless Sensor +L+ Networks, ACM SensSys’04, pp. 162-175, Nov. 2004.
[25] I. Khalil, S. Bagchi, and C. Nina-Rotaru, DICAS: +L+ Detection, Diagnosis and Isolation of Control Attacks +L+ in Sensor Networks, IEEE SecureComm 2005, pp. 89 - +L+ 100, Sep. 2005
[26] Y. Liu and W. K.G. Seah, A Priority-Based +L+ Multi-Path Routing Protocol for Sensor Networks, +L+ 15th IEEE International Symposium on Volume 1, 216 +L+ -220, 2004
[27] S.-B. Lee and Y.-H. Choi, A Secure Alternate Path +L+ Routing in Sensor Networks, Computer +L+ Communications (2006),
doi:10.1016 /j . comcom.2006.08.006.
[28] S. Marti, T.J. Giuli, K. Lai, and M. Baker, Mitigating +L+ Routing Misbehavior in Mobile Ad Hoc Networks, +L+ ACM/IEEE International Conference on Mobile +L+ Computing and Networking, pp. 255-265, 2000
[29] H. Morcos, I. Matta, and A. Bestavros, M2 RC: +L+ Multiplicative-Increase/Additive-Decrease Multipath +L+ Routing Control for Wireless Sensor Networks, ACM +L+ SIGBED Review, Vol. 2, Jan 2005.
[30] J. Newsome, E. Shi, D. Song, and A. Perrig, The Sybil +L+ Attack in Sensor Networks: Analysis and Defenses, +L+ IEEE IPSN’04, pp. 259-268, Apr. 2004.
[31] B. Parno, A. Perrig, and V. D. Gligor, Distributed +L+ Detection of Node Replication Attacks in Sensor +L+ Networks, the 2005 IEEE Symposium on Security and +L+ Privacy, pp. 49-63, May 2005.
[32] A. Perrig, R. Szewczyk, V. Wen, D. Culler, and +L+ J. Tygar, SPINS: Security Protocols for Sensor +L+ Networks, ACM MobiCom’01, pp. 189-199, 2001.
[33] A. Perrig, J. Stankovic, and D. Wagner, Security in +L+ Wireless Sensor Networks, Communications of the +L+ ACM, 47(6), Special Issue on Wireless sensor +L+ networks, pp.53- 57, Jun. 2004
[34] B. Przydatek, D. Song, and A. Perrig, SIA: Secure +L+ Information Aggregation in Sensor Networks, 1st +L+ International Conference on Embedded Networked +L+ Sensor Systems, 255-256, 2003
[35] E. Shi and A. Perrig, Designing Secure Sensor +L+ Networks, Wireless Communications, IEEE Volume +L+ 11, Issue 6, pp. 38-43, Dec. 2004.
[36] D. Tian and N.D. Georganas, Energy Efficient +L+ Routing with Guaranteed Delivery in Wireless Sensor +L+ Networks, IEEE Wireless Communications and +L+ Networking (WCNC 2003), IEEE Volume 3, 1923 - +L+ 1929, March 2003
[37] A. Woo, T. Tong, and D. Culler, Taming the +L+ Underlying Challenges of Reliable Multhop Routing in +L+ Sensor Networks, ACM SenSys03, Nov, 2003
[38] A. Wood and J. Stankovic, Denial of Service in Sensor +L+ Networks, IEEE Computer, Vol.35, 54-62, Oct. 2002
[39] H.Yang, F. Ye, Y. Yuan, S. Lu and W. Arbough, +L+ Toward Resilient Security in Wireless Sensor +L+ Networks, ACM MobiHoc’05, 34-45, May 2005
[40] Y. Yang, X. Wang, S. Zhu, and G. Cao SDAP: A +L+ Secure Hop-by-Hop Data Aggregation Protocol for +L+ Sensor Networks, ACM MobiHoc’06 May 2006
[41] F. Ye, H. Luo, S. Lu and L. Zhang, Statictial En-route +L+ Filtering of Injected False Data in Sensor Networks, +L+ IEEE INFOCOM, 2004
[42] F. Ye, G. Zhong, S. Lu and L. Zhang, GRAdient +L+ Broadcast: A Robust Data Delivery Protocol for Large +L+ Scale Sensor Networks, ACM Wireless Networks +L+ (WINET), March 2005
[43] Y. Yu, R. Govindan, and D. Estrin, Geographical and +L+ Energy Aware Routing: a recursive data dissemination +L+ protocol for wireless sensor networks, UCLA
Computer Science Department Technical Report +L+ UCLA/CSD-TR-01-0023, May 2001.
[44] W. Zhang and G. Cao, Group Rekeying for Filtering +L+ False Data in Sensor Networks: A Predistribution and +L+ Local Collaboration-Based Approach, IEEE +L+ INFOCOM’05. Vol. 1, 503-514, March 2005
[45] G. Zhou, T. He, S. Krishnamurthy, and J. A. +L+ Stankovic, Impact of radio irregularity on wireless +L+ sensor networks, the 2nd International Conference on +L+ Mobile Systems, Applications, and Services +L+ (MobiSys04), June, 2004
[46] S. Zhu, S. Setia, and S. Jajodia, LEAP: Efficient +L+ Security Mechanisms for Large-Scale Distributed +L+ Sensor Networks, The 10th ACM Conference on +L+ Computer and Communications Security (CCS ’03), +L+ 62-72, 2003
[47] S.Zhu, S. Setia, S. Jajodia, and P. Ning, An +L+ Interleaved Hop-by-Hop Authentication Scheme for +L+ Filtering False Data in Sensor Networks, IEEE +L+ Symposium on Security and Privacy, 2004
69
