CHI 2008 Proceedings · Am I Safe	April 5-10, 2008 · Florence, Italy
users’ only concern; they must make security related 
decisions in context, such as knowing whether a new 
software version will break compatibility with other tools. 
For example, Windows XP SP2—while providing 
important security features—broke the functionality of a 
number of network-based tools [21]. Simply installing such 
updates automatically without considering the context of 
other software in use can often lead to such problems.
Figure 2: TALC Control window displaying the
website with patch information.
IMPLEMENTATION
TALC uses a modular implementation, with well-defined 
communication interfaces between modules to facilitate 
easy addition and replacement of components. This is 
exposed in the form of an API that allows developers to 
write pluggable modules for TALC. For example, these 
APIs have been used to create the software vulnerability 
detection system described in this paper, but can be 
extended to provide functionality beyond software patch 
management. The extensible nature of TALC is intended to 
be used to visualize and control a large set of security tools 
through a framework similar to the one described by 
Dourish and Redmiles in [9]. For example, information 
sources, sensors and aggregators can be created and 
plugged into TALC, allowing it to be extended to new 
visualizations and to detect new security threats. Our long-
term goal is for TALC to ultimately serve as an integrated 
security suite along the lines of Internet Security suites 
from Symantec, McAfee and an advanced form of the 
Windows Security Center [20].
The TALC system is composed of four modules, 
Information Source Module, Correlation Module, 
Visualization Module and Control Module linked together 
by a Communication Manager that allows modules to pass 
messages to each other. Each module exposes hooks and 
registers callback functions with the other modules for 
communication. The Information Source module detects 
events from the host and the network and processes them 
into XML data that can be exchanged with other modules. 
For example, the software vulne rability detection features
described in this paper are implemented as a custom 
Information Source module, which generates data by using 
Hijackthis [19] (a tool that scans the registry for references 
to installed programs) and a series of other system scans 
(such as programs on the Start Menu, or on the user’s 
desktop) to identify installed software.
The Correlation module interprets this information by 
aggregating the data from the different Information 
Sources. For the software vulnerability detection 
incarnation of TALC, the Correlation module correlates the 
information from the system scans with data pulled from 
the NVD. The Correlator performs a version match with the 
list of vulnerable software from the NVD database, 
ascertains the severity of the threat (Mild, Medium or 
Severe), and records the website indicated by the NVD to 
contain information necessary to resolve the vulnerability. 
This is fed to the Visualization and Control modules.
The Visualization module is responsible for information 
presentation. As described earlier, our current visualization 
module presents software vulnerabilities as graffiti 
rendered onto the user’s desktop. Other visualizations are 
possible; for example, one visualization we have explored 
renders vulnerabilities as pieces of garbage piling up along 
the bottom of the user’s screen; one could also create 
visualization modules that use standard pop-up dialog 
boxes to notify the user of threats.
Finally, the Control module provides the means by which 
the user can act upon the information presented by the 
Visualization module. In our current system the Control 
module opens up websites that lets the user download a 
patch to fix the software vulnerability. The Control module 
can be easily extended to give a user control of different 
security software such as their firewall.
EVALUATION
We performed a deployment-based study of TALC to 
determine its efficacy in providing better awareness of 
software vulnerabilities, and in incenting users to rectify 
those vulnerabilities. Our study structure consisted of a 
two-week deployment period during which TALC was in 
operation on users’ primary machines. Logging features in 
TALC reported on users’ use of the system so that we 
could collect quantitative data on their actions. We also 
collected data from pre- and post-study questionnaires to 
get qualitative data about users’ perceptions of the 
software.
Participants were recruited from a non-university context. 
After consent was obtained (but before any other 
participation in the study), users were sent a link to an 
online questionnaire that tested them on their awareness of 
computer security concepts and threats, as well as their 
expertise in general computer usage.
Once users completed the pre-test questionnaire they were 
emailed a link to the installation file and they were asked to 
download and install TALC. Our participants ran a 
specially instrumented version of TALC on their personal
1059
