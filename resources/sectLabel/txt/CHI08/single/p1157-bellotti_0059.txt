CHI 2008 Proceedings · On the Move	April 5-10, 2008 · Florence, Italy
many cases, users quickly switched the list to show only 
items related to their current activity. They changed activity 
type an average of 5.1 times per outing, mostly to Eat (1.8 
times per outing) and Buy (1.4), and to a lesser degree to 
Do (0.7), See (0.5), and Read (0.1). They switched it back 
to Any mode an average of 0.7 times per outing.
We observed that even when Magitti did accurately reflect 
the user’s current activity, people still filtered the list to Eat 
or Buy, etc. They seemed to do so because, with only four 
recommendations visible at a time, they wanted all of the 
items to be relevant to their activity. It wasn’t helpful to see 
recommendations for other activity types interspersed in the 
list. This useful finding suggests that Magitti should have 
the courage of its convictions and show only items related 
to its predicted activity. If it is wrong, people seem to find it 
easy to switch to a different activity. And each time they 
do, Magitti learns more about their activity patterns, 
enabling it to improve its predictions for them.
Context-Aware Recommendations
When asked how often the recommendations were relevant 
and of interest, users gave Magitti an average rating of 3.8 
(1=rarely, 5=almost always), a little less than “usually.” As 
one person put it, “Most of the time, the list contained a mix 
of useful and not so useful recommendations.”
Given that Magitti had only a few outings in which to learn 
from people’s behavior, that we had a small set of ratings 
for collaborative filtering, and that not all of the intelligence 
in Magitti was fully online, we took this as a good start. 
However, during the shadowing sessions we noted several 
factors that affected people’s confidence in the system.
Omission: The most common problem occurred when 
someone walked near a place they liked and did not see it in 
the list, or at least in the top screen or two. When this 
happened, people either concluded “the list did not 
represent what downtown has to offer,” i.e., that our content 
was incomplete, or, more often, that the system didn’t know 
their tastes well enough. This echoes the findings of others 
who found that small omissions or inaccuracies reduced 
people’s trust in the system [9, 14, 35, 38].
Distance: As designed, Magitti used distance from the user 
as just one of several factors affecting recommendations – it 
sometimes showed a “better” recommendation around the 
corner higher in the list than a “lesser” one next door. The 
thought was that people would want to choose from the best 
options near them, but instead they seemed to expect that 
the closest places would be at the top of the list. Similarly, 
people remarked on recommendations that were too far 
away. Even if an item were close as the crow flies, people 
considered it a poor recommendation if it required driving.
Although people wanted distance to be a strong if not the 
primary factor in making recommendations, doing so could 
lead to other problems. The See and Do venues for 
activities were much further apart than those for Eat and 
Buy. So when users asked for See or Do recommendations
and had limited the distance setting, they got few or no 
recommendations, which again led them to think the system 
content was incomplete.
These findings highlight a need for a recommender to be 
sensitive to venue density, taking into account whether a 
user is browsing along the street or searching for the best 
place to go, and whether they are in a vehicle. COMPASS 
[38] zooms out its map if the user is traveling quickly, but 
does not filter content based on speed.
First Item: We observed that people put more weight on 
the first item recommended than we expected. If it was 
reasonable, they considered the recommendations good, 
even if some of the others were inappropriate. One person 
searched for “home furnishings,” and Magitti listed 
Williams-Sonoma (a furnishings chain store) first and 
McDonald’s second (likely because of a hit on “home” in a 
review or user comment). Still, the user discounted the 
second item because the first one was on target. 
Conversely, if the first item didn’t make sense, people were 
more skeptical of the rest of the list.
Guide vs. Recommender: Surprisingly, people lost 
relatively less confidence when Magitti recommended a 
place that turned out to be closed (this should never have 
happened, but our data about the hours of operation were 
occasionally incorrect). They were disappointed but they 
didn’t seem to judge Magitti as harshly, apparently because 
they didn’t expect it to take hours of operation into account. 
Also, although more may have noticed it, only one person 
mentioned the problem that Magitti continued to 
recommend a place they had just visited.
It appears that some users were treating Magitti as a 
location-based information guide rather than a 
recommender, expecting it to offer information about the 
closest places but not expecting it to know about hours of 
operation. Others, though, did expect it to behave more like 
an expert advisor. In one case, for example, a participant 
went to lunch with a friend, choosing a Vietnamese Pho 
restaurant. After lunch, they happened upon a nicer looking 
Pho place. It didn’t appear in the list, but they found it by 
searching. Sure enough, it was rated four stars to the other 
one’s three stars. His companion griped, “It would have 
been good if Magitti had let us know that there was another 
similar but nicer restaurant right around the corner.”
Transparency: We noticed that many users spent a fair 
amount of effort speculating on how Magitti decided which 
activities and venues to list. Magitti used a complex set of 
algorithms based on many factors (location, time, 
preferences, similar users’ opinions, prior behavior), and 
the lack of transparency of the algorithm sometimes 
confused or even frustrated users. This suggests that Magitti 
could be improved by offering more cues to help users 
develop an appropriate user model of its behavior and by 
allowing users to turn context filtering on and off as 
desired.
1164
