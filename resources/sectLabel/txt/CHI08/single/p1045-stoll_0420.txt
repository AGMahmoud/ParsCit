CHI 2008 Proceedings · Am I Safe	April 5-10, 2008 · Florence, Italy
Figure 4: expanded remote system tile
As with processes, remote system tiles also allow semantic 
zooming. When the mouse hovers over a tile, it expands to 
reveal the domain, owner, and more precise geographic 
location associated with the remote system; the information 
is obtained via a reverse DNS lookup and query of a WHOIS 
database of domain registrations (Figure 4).
Connection Requests
When an attempt is made to establish a new incoming or 
outgoing connection, the firewall component of the Sesame 
backend intercepts the request and Sesame asks the user for 
permission. Sesame represents the connection attempt by 
showing a double headed arrow between the local process 
and remote system tile, but the arrow is solid only on the side 
initiating the request, with the other end of the arrow dotted 
(Figure 5). There is a gap between the two ends of the arrow 
to suggest that they could be, but are not yet, connected. To 
make the user’s options more clear, the buttons where the 
user can accept or forbid the request appear at this 
solid/dotted junction. In order to draw the user’s attention to 
the choice, the red border around the buttons flashes for 
several seconds after Sesame is invoked. To ensure that users 
see the process associated with the connection request, a 
border flashes around it as well.
Like current firewalls, Sesame allows the user to set policies 
for allowing or denying connections; but unlike most fire- 
walls, we try to make changes affecting future policy 
obvious by representing policies concretely, and visually 
associating them with the objects to which they apply. When 
the user selects the ‘accept’ or ‘forbid’ buttons, a policy 
dialog box is shown animating out of the relevant process 
cube and expanding to full size on screen. The user can 
select from four policy choices, allowing or denying connec-
tions on a one time basis or indefinitely, and with respect to 
any remote computer or just those associated with a particu-
lar domain. Once the user confirms their policy choice, the 
selected policy (represented as a card) is animated to disap-
pear directly into the associated process, conveying that the 
policy is ‘inside’ that cube and is later accessible from it.
Usage Scenarios
To demonstrate how Sesame might be used, we include two
Figure 5: Remote computer requesting connection to local
process.
usage scenarios in which we show similar situations, one 
where the appropriate action is to allow a connection so that 
the user can continue with her task; and one where the 
appropriate action is to deny it in order to fend off an attack. 
In the first, the user is asked to answer an explicit question 
by Sesame about whether to allow access to a remote system. 
In the second, the user invokes Sesame herself to try to 
decide whether a website is fraudulent.
Scenario 1: Should I allow this connection?
In the first scenario, the user is browsing a web page contain-
ing an embedded video. Upon selecting the ‘Play’ button in 
the embedded video player, Sesame brings up a dialog box 
indicating a remote computer is trying to initiate communica-
tion with a local process, and the user is directed to click a 
button in the dialog box to open Sesame. When clicked, the 
user’s screen rotates to reveal that the process, to which the 
remote system is trying to connect, is the same process that is 
running her web browser. Noting the temporal coincidence 
between selecting the ‘Play’ button and the appearance of the 
dialog box, she suspects that the new connection is needed to 
allow the video to play. Unsure if watching the video is 
worth the risk of letting a remote system connect to her 
computer, she hovers over the remote system and observes 
that it is owned by the same company associated with the 
website—a company she is familiar with and feels reasona-
bly comfortable trusting. She clicks the ‘Allow’ button to 
permit the connection to proceed. However, as she does not 
feel comfortable giving the company free reign to connect to 
her computer, she assigns a permission card allowing the 
connection just once. The yellow connection arrow now 
becomes completely solid and the user clicks the ‘Exit and 
Return to Windows’ button which rotates her desktop back 
to its normal position and the video plays as expected.
Scenario 2: Is this a phishing site?
In the second scenario, we begin with a user who is directed 
to a website claiming to be affiliated with their bank. When 
the site asks for personal information, the user becomes 
suspicious and invokes Sesame. Sesame shows the rotated 
desktop allowing the user to see which process is connected 
to their web browser window. They notice that the same 
process is connected to one remote computer. The small map 
shows that the remote computer is located in an unfamiliar 
geography and the name of the owner of the remote com-
puter seems unrelated to the user’s bank. Still uncertain, the 
user moves their mouse to the remote computer to find out 
more information. When the mouse hovers over the remote 
system, it zooms to show it is associated with an unknown 
domain, and located at an address in a distant country. The 
user becomes concerned that they may not really have visited 
their bank’s website, and therefore closes their browser and 
calls the bank.
IMPLEMENTATION
Sesame is implemented in C++ and runs on unmodified 
Microsoft Windows XP. All screenshots in this paper were 
taken from live execution of the system. The front-end
1050
