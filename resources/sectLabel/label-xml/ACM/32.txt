title ||| An expressive aspect language for system applications |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_begin xmlFontSize_largest0 xmlFontSizeChange_begin xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
title ||| with Arachne |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest0 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
author ||| R´emi Douence, Thomas Fritz, Nicolas Loriant, |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
author ||| Jean-Marc Menaud, Marc S´egura-Devillechaise, Mario S¨udholt |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
affiliation ||| OBASCO project |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
affiliation ||| ´Ecole des Mines de Nantes/INRIA |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
address ||| 4 rue Alfred Kastler |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
address ||| 44307 Nantes Cedex 3, France |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
email ||| {douence,tfritz,nloriant,jmenaud,msegura,sudholt}@emn.fr |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
sectionHeader ||| ABSTRACT |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
bodyText ||| C applications, in particular those using operating system |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
bodyText ||| level services, frequently comprise multiple crosscutting con- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| cerns: network protocols and security are typical examples |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| of such concerns. While these concerns can partially be ad- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| dressed during design and implementation of an application, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| they frequently become an issue at runtime, e.g., to avoid |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| server downtime. A deployed network protocol might not be |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| efficient enough and may thus need to be replaced. Buffer |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| overflows might be discovered that imply critical breaches in |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| the security model of an application. A prefetching strategy |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| may be required to enhance performance. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| While aspect-oriented programming seems attractive in |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
bodyText ||| this context, none of the current aspect systems is expres- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| sive and efficient enough to address such concerns. This |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| paper presents a new aspect system to provide a solution to |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| this problem. While efficiency considerations have played |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| an important part in the design of the aspect language, the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| language allows aspects to be expressed more concisely than |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| previous approaches. In particular, it allows aspect pro- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| grammers to quantify over sequences of execution points as |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| well as over accesses through variable aliases. We show how |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| the former can be used to modularize the replacement of net- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| work protocols and the latter to prevent buffer overflows. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| We also present an implementation of the language as an |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| extension of Arachne, a dynamic weaver for C applications. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| Finally, we present performance evaluations supporting that |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| Arachne is fast enough to extend high performance applica- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
bodyText ||| tions, such as the Squid web cache. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
sectionHeader ||| Keywords |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
keyword ||| aspect language, sequence pointcut, dynamic weaving, sys- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
keyword ||| tem applications |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
copyright ||| Permission to make digital or hard copies of all or part of this work for |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
copyright ||| personal or classroom use is granted without fee provided that copies are |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
copyright ||| not made or distributed for profit or commercial advantage and that copies |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
copyright ||| bear this notice and the full citation on the first page. To copy otherwise, to |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
copyright ||| republish, to post on servers or to redistribute to lists, requires prior specific |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
copyright ||| permission and/or a fee. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_header
note ||| AOSD 05 Chicago Illinois USA |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
copyright ||| Copyright 2005 ACM 1-59593-042-6/05/03 ...$ 5.00. |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
sectionHeader ||| 1. INTRODUCTION |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_header
bodyText ||| Real-world applications typically comprise multiple cross- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| cutting concerns. This applies, in particular, to C applica- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions using operating system level services. We have exam- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ined three concerns which are typical for this domain in the |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| context of a large application, the open source web cache |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Squid [36]. More concretely, we have considered translation |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of network protocols (which may be necessary for efficiency |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| reasons), insertion of checks for buffer overflows (which are |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| at the heart of many of today’s security issues), and in- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| troduction of prefetching strategies within the cache (which |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| can be used to enhance efficiency of the web cache). We |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| have found that all these concerns are scattered over large |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| portions of the code of Squid. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Hence, the three concerns are crosscutting in the sense |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| of Aspect-Oriented Programming (AOP) [24] and aspects |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| should therefore be a means of choice for their modular- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ization. The concerns have three important characteristics. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| First, they must frequently be applied at runtime, e.g., in |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| order to rapidly fix a buffer overflow and thus prevent secu- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| rity breaches without incurring server downtime. A dynamic |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspect weaver is therefore needed. Second, they expose in- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tricate relationships between execution points, e.g., network |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| protocols are most concisely expressed in terms of sequences |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of execution points, not individual ones. The aspect system |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| must therefore support expressive means for the definition of |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspects, in particular pointcuts. Third, efficiency is crucial |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in the application domain we consider. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| To our knowledge, none of the current aspect systems for |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| C meet these three requirements and is suitable for the mod- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ularization of such concerns. Moreover, requirements for |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| dynamic weaving and efficiency often trade off with expres- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sivity. Squid should be as efficient as possible and therefore |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| exploit any suitable operating system and hardware partic- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ularity. Its code base is therefore difficult to understand and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| manipulate, thus hindering in particular modularization ef- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| forts. It is therefore highly questionable that the considered |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| modularization problems can be solved without aspects. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In this paper we propose a solution to the aspectization of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| such concerns of C applications. More concretely, we provide |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| three main contributions. First, we provide a new expressive |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspect language featuring a construct for quantification over |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sequences of execution points as well as over accesses to lo- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cal aliases of global variables. We show how this aspect lan- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 27 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| guage permits concise expression of the considered concerns |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| as aspects. Second, we present how the aspect language can |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| be implemented efficiently through runtime weaving into bi- |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| nary code. Concretely, this is done by integrating the aspect |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| language into our tool Arachne, a dynamic weaver for C ap- |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| plications. Furthermore, we present how Arachne improves |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| on our previous work µDyner [32]. Finally, we give evidence |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| that our approach meets strong efficiency requirements by |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| showing performance evaluations in the context of Squid. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The paper is structured as follows. Section 2 presents the |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| motivating concerns we identified within Squid. Section 3 |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| shows how to modularize these concerns as aspects and de- |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| fines our aspect language. Section 4 describes its implemen- |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tation within Arachne. Section 5 assesses the performance |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of our implementation. Section 6 describes related work. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Section 7 concludes and suggests futures work. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
sectionHeader ||| 2. MOTIVATIONS |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Legacy C applications involve multiple crosscutting con- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| cerns. Many of them remain challenging, both in terms |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of expressiveness required to handle them properly in an |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspect-oriented language and in terms of constraints posed |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| on the weaver. This section describes three such concerns |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in C applications: switching the network protocol, buffer |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| overflows and prefetching. The network protocol concern is |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| typically scattered through the entire application. It is an |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| issue when administrators discover at runtime that the re- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tained protocol is not efficient enough. Likewise the security |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| threats posed by buffer overflows is a real concrete problem |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| for administrators. While guarding all buffers against over- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| flows might decrease performance considerably, administra- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tors are left with no other option than accepting the trade- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| off between security and performance chosen at application’s |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| design time. Prefetching is another well-known crosscutting |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| concern [12]. Since prefetching aims at increasing perfor- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mance, prefetching aspects make only sense with an efficient |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| weaver. Yet, it is still difficult to modularize these three con- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cerns in today’s aspect-oriented language. In this section, |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| we first describe the context in which the concerns arise be- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| fore showing their crosscutting nature and finally explaining |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the lack in current aspect-oriented languages to handle them |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| properly. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 2.1 TCP to UDP protocol |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| HTTP was essentially designed as a file transfer proto- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| col running on top of TCP, a connection-oriented protocol |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ensuring communication reliability. While the average Web |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| page size does not exceed 8 KB [4], the cost of retrieving |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a Web page is often dominated by data exchanged for con- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| trol purposes of TCP rather than by the page content itself. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| This is not a new problem, many researches have already |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pointed out that TCP is not suitable for short-lived connec- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions. While HTTP 1.1 has introduced persistent connec- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions allowing a client to retrieve multiple pages from the |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| same server through the same TCP connection, the number |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of simultaneous TCP connections is limited by operating |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| systems. Servers have a strong incentive to close HTTP |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| connections as soon as possible. Hence, despite the per- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sistent connection mechanism, many studies conclude that |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| TCP should be replaced by UDP to retrieve short pages [10, |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| 29, 7]. In spite of its performance improvements, the number |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of legacy Web applications has prevented a wide adoption |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of this solution. Typical legacy Web applications have to be |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figureCaption ||| Figure 1: Typical usage of the TCP and UDP APIs. |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| stopped to switch the protocol. The traditional approach |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| to avoid depriving a subnetwork from Internet connectivity |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| while stopping the cache is to swap the application between |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| different machines. This approach is not only expensive in |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| terms of hardware, it complicates the administrative task of |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the Web cache administrator and poses the problem of con- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sistently transferring the runtime state of the application |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| before restarting it. Stopping an e-commerce Web server |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| means a loss of money and many small companies can not |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| afford the cost of redundant servers. For a wide acceptance, |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a HTTP dialect using UDP as transport protocol should |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| thus be deployable on demand at runtime. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In addition, replacing TCP by UDP in an application is |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| relatively difficult. The choice of a transport protocol is |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| usually based on standards believed to be ever-lasting and |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| made at an early design stage. Hence no particular effort is |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| made to localize this design decision in a single piece of code. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| For example, despite a modularization effort, the TCP API |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| provided by the operating system is used directly in 7 of the |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| 104 ” . c” source files of the Squid Web cache. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| As shown in Fig. 1, the TCP API is built around a set of |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| C functions to be invoked sequentially by the application. In |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a properly written program, TCP functions are first used to |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| establish the connection (typically with socket, connect, |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| bind and listen), exchange data through the connection |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| (typically with read and write) and then close it (typically |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| close). UDP uses similar but less functions. UDP applica- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions first direct the operating system to dedicate the appro- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| priate resources to exchange data (typically with socket and |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| bind), then exchange data through these resources (typically |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| with sendto and recvfrom) before releasing them (typically |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| with close). Hence, the problem is not only difficult be- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cause TCP-related function invocations are scattered but |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| because the relative order of each invocation is important in |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| order to map it onto the appropriate UDP function. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| This example is typical of protocol based APIs. When |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| such an API is used in an undisciplined way, it becomes |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| quickly impossible to replace it by another one. Today, |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspect-oriented systems lack an appropriate sequencing con- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| struct in their language. Moreover, many do not provide the |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ability to weave aspects dynamically. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 2.2 Buffer overflows |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| In C, the size of an array is fixed at allocation time. Ac- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| cording to ISO and ANSI standards [2], an invalid array |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| access does not result in an immediate error but leads to |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| an implementation-dependent behavior. Such behavior is |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| increasingly exploited by hackers to circumvent security re- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| TCP Protocol	Time	UDP Protocol |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Server Network Client	Server Network Client |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_yes xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| bind |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| listen |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| accept |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| read |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| write |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| close |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| socket |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| connect |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| write |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| read |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| close |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| socket |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| socket |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| bind |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| recvfrom |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| sendto |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| close |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| socket |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| recvfrom |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| close |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| sendto |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
page ||| 28 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| strictions [37]. It is therefore crucial for C programmers to |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ensure every access to an array to be valid. On the other |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| hand, bound checking code is error prone: it is easy to for- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| get to check an access and even when the access is checked, |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| it is easy to compare the index locating the access with an |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| inappropriate bound. Therefore, researchers have proposed |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to make compilers responsible for enforcing proper array ac- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cess [22, 31]. The problem is that even the most efficient |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| system (CRED [31]) slows down an application up to 130%. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Moreover, most frequently used compilers like gcc do not |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| support bound checking. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Today, administrators discovering a buffer overflow in pro- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| duction software are left with no other option than stopping |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the application and restarting a bug free version. This was |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the solution chosen when a buffer overflow was discovered |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in Squid in [6]. While widely used, this solution suffers from |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| three major drawbacks. First, it does not enforce continuous |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| servicing since the service delivered by the application is not |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| available during the update. Second, this solution entails an |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| important information loss: an administrator has no means |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to learn whether the buffer overflow has been exploited by |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a hacker or not. Third, it misunderstands the performance |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| trade-off, i.e. it is not necessary to check every array access, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| it is only necessary to perform enough checking to discour- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| age hackers. Therefore, bound checking code should only |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| run when an environment becomes hostile [23]. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Bound checking code tends to crosscut the entire applica- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| tion. For example, properly written C functions accepting |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| an array argument commonly take a second argument hold- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ing the array size: the first one allows the function to access |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the array while the second is used to ensure correctness of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| accesses. In Squid, bound checking code can be found in |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| any of the 104 ” . c” files of its source code. On the 57635 |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| lines composing these ” . c” files, at least 485 check bounds. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| This problem fails to be handled properly in current as- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| pect languages as they lack the ability to trigger advices |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| upon access made through the alias of a variable. Again, |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| many aspect-oriented systems offer only static weaving ca- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pabilities preventing the administrator to choose the trade- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| off security/performance suiting his needs. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 2.3 From fetching to prefetching |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Operations like retrieving a file on a local disk or over the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Web can be sped up if the underlying software anticipates |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| user requests and start to fetch documents beforehand. Such |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| prefetching schemes distinguish themselves from each other |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in the way they predict future user requests. These ”ora- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cles” actually prevent a clean encapsulation of prefetching |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in a single module communicating with the rest of the appli- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cation through well-defined interfaces since predictions are |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| based on information meant to be private to other modules. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In addition, it is very likely that there is no universal per- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| fect oracle [19]. A statically linked prefetching module is |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| therefore inappropriate, but prefetching modules along with |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the necessary oracles should be loaded and unloaded on the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| fly. Due to their crosscutting nature, prefetching modules |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| including such oracles are better written with aspects [32]. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Coady et al. have already pointed out the crosscutting |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| nature of prefetching in the FreeBSD OS [12]. In our pre- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| vious work considering the Squid Web cache, we reached a |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| similar conclusion [32]. We have previously shown that this |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| concern can be addressed with cflow-like constructs. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Despite potential performance improvements, prefetching |XML| xmlLoc_7 xmlAlign_right xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| also increases resource consumption (e.g. network prefetch- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ing consumes local storage and bandwidth). When the pres- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sure on resources is too high, prefetching computation com- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| petes for them against regular user requests, and slows down |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| their treatment instead of speeding it up. In such cases, |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| prefetching should therefore be, temporarily, disabled. Squid |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| essentially manages file descriptors, a resource only available |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in a limited quantity. A file descriptor is used between the |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| underlying operating system and applications to describe a |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| network connection or a file on the disk. Squid’s file descrip- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tor management is based on a global variable that tracks the |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| number of file descriptors currently in use. By comparing |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| its value with the maximum number of file descriptors al- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| lowed by the operating system, it is possible to estimate that |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| prefetching should be disabled or resumed. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| For this problem of file descriptor consumption, the cur- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| rent practice of checking if prefetching should be disabled or |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| not within the advice, is a bad practice that impedes both |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| readability and maintainability. A mechanism is needed |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| within the aspect language to restraint the advice execu- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion at times where the pressure on resources is too high. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| This problem were not addressed in our previous work. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
sectionHeader ||| 3. AN EXPRESSIVE ASPECT LANGUAGE |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
sectionHeader ||| FOR SYSTEM PROGRAMMING IN C |XML| xmlLoc_3 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| While AOP seems to be the obvious choice to tackle the |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| crosscutting concerns introduced above, none of the existing |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| AO systems provides explicit support for some of their es- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sential elements, in particular, join point sequences for pro- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tocols, and references to aliases which are local to a function. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In this section we introduce a new aspect language for |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| system programming in C that allows such crosscutting con- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cerns to be expressed concisely. In order to make this point, |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| we first revisit the examples by concisely aspectizing them |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| using our language. (Note that our aspect language is ex- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pressive in the sense of enabling the concise definition of cer- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tain types of aspects, especially compared to other tools for |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| system-level manipulations, but not necessarily more expres- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sive than existing approaches in a language-theoretic sense.) |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| We then define the join point model underlying our language |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| precisely, followed by the definition of its syntax and infor- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mal semantics. Finally, we illustrate how its semantics can |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| be formally defined in terms of a small-step operational se- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mantics using the framework introduced in [14]. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 3.1 Example crosscutting concerns revisited |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| We now revisit the concerns discussed in section 2 in order |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| to show our language in action and give evidence that it |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| allows such concerns to be concisely modularized. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The aspect shown in Fig. 2 translates transport protocols |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| from TCP to UDP. A protocol defines a sequence of func- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion calls, so the top-level operator of this aspect is seq. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The sequence aspect syntactically consists of a list of pairs |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of pointcut and advice (separated by then). In the exam- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ple, the TCP protocol starts with a call to socket() with |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| three constant arguments: AF INET, SOCK STREAM and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| 0. When such a call is matched, the second parameter is |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| replaced by SOCK DGRAM as required by the UDP proto- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| col. The result of this transformed call, the file descriptor, |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| is bound to fd by return(fd). Then the next call to con- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| nect() with the same file descriptor fd as its first parameter |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| is matched. In this case the values of the other parameters |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 29 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| seq( call(int socket(int, int, int)) &amp;&amp; args(AF INET, SOCK STREAM, 0) &amp;&amp; return(fd) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| then socket(AF INET, SOCK DGRAM, 0); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| call(int connect(int, struct socketaddr*, socklen t)) &amp;&amp; args(fd, address, length) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| then returnZero(); // where int returnZero() { return 0; } |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| ( call(size t read(int, void*, size t)) &amp;&amp; args(fd, readBuffer, readLength) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| then recvfrom(fd, readBuffer, readLength, 0, address, length); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| 11call(size t write(int, void*, size t)) &amp;&amp; args(fd, writeBuffer, writeLength) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| then sendto(fd, writeBuffer, writeLength, 0, address, length);) * |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| call(int close(int)) &amp;&amp; args(fd) ; ) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| Figure 2: An Aspect for Switching Transport Protocols, from TCP to UDP |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| seq( call(void * malloc(size t)) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| &amp;&amp; args(allocatedSize) &amp;&amp; return(buffer) ; |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| write(buffer) &amp;&amp; size(writtenSize) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| &amp;&amp; if(writtenSize &gt; allocatedSize) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| then reportOverflow(); * |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| call(void free(void*)) ) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figureCaption ||| Figure 3: An Aspect for Detecting Buffer Overflow |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| are bound to arguments address and length, and the original |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| call is replaced by returnZero(). Indeed, there is no connect |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| step in the UDP protocol. After that, calls to read() and |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| write() (using the ‘or’ on aspects: 11) on the same file de- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| scriptor fd are translated to UDP recvfrom() and sendto(), |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| respectively. Note that sequences of such access are poten- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tially translated (due to use of the repetition operator *). |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Finally, a call to close() on fd terminates the TCP protocol |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| as well as the UDP protocol and thus is not modified (i.e., |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| there is no then clause). This last step is required to free |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the variables used in the sequence (here, fd, address and |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| length). Indeed, this aspect can use numerous (instances of |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| these) variables when it deals with interleaved sequences, as |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| each call to socket() creates a new instance of the sequence. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The aspect shown in Fig. 3 detects buffer overflows. The |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| corresponding sequence starts when the function malloc() |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| returns the buffer address which is then bound to buffer. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Then, each time this address is accessed (through a global |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| variable or a local alias) the size of the data to be written is |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| compared with the size of the initially allocated memory. If |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the former exceeds the latter, an overflow is indicated. The |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sequence ends when the memory is deallocated using free(). |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The aspect in Fig. 4 introduces prefetching in a web cache. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| The first controlf low phrase initializes prefetching when |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| an HTTP response is built (clientBuildReply()) within the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| control flow of a client request (clientSendMoreData()). The |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| until clause stops prefetching when the number of connec- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion becomes too large, a situation where prefetching would |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| effectively degrade performance. The second controlf low |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| phrase analyzes hyperlinks in a page being transmitted (i.e., |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| when comm write mbuf() is called within the control flow |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of clientSendMoreData()). Finally, the last call phrase pre- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| fetches hyperlinks analyzed by the second aspect. It does so |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| by replacing the method call to clientWriteComplete() with |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| retrieveHyperlinks(). Finally, note that the two require |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| clauses at the top of the aspect declare the types of the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| global variables of the base program used in the aspects. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 3.2 Join points |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| A join point model defines the points in the execution |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| of the base program to which pointcuts may refer. In our |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| JP::= callJP(valfunId( −→val)) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| readGlobalJP(varId,val) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| readJP(@, val) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| writeGlobalJP(varId, val, size) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| writeJP(@, val, size) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| controlflowJP(−−−−→ |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| funId, cfEnd) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| controlflowstarJP(−−−−→ |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| funId, cfEnd) |XML| xmlLoc_2 xmlAlign_right xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| cfEnd::= callJP(val funId(−→val)) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1readGlobalJP(varId,val) |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 1writeGlobalJP(varId, val, size) |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| val::= 011121...	//int |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| 1@0 1 @1 1 @2 1 ... // int* |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1... // values of other C types |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figureCaption ||| Figure 5: Join point model |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| case, join points are defined by JP in the grammar shown |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| in Fig. 5. A join point is either: |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	A call of a function callJP(v1 funId(−→v2)) with function |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| name funId, return value vi and a vector of arguments →−v2. |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	A read access which comes in two variants: |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| readGlobalJP(varId,v) denotes reading a global vari- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| able with name varId holding the value v; readJP(@, v) |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| denotes reading a global variable or a local alias with |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| address @ holding the value v. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	Write access which also comes in two variants: |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| writeGlobalJP(varId, v, size) denotes assignment to a global |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| variable with name varId of the value v of size size. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| writeJP(@, v, size) denotes assignment to a global variable |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| or a local alias with address @ of the value v of size size. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	A cflow expression controlflowJP( f Inu d, c), where |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| f Inu d = [funId1, .., funIda] is a stack of function names, and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| c (either a function call or an access to a global variable) oc- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| curs within the body of function funId�. Such a join point |XML| xmlLoc_6 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| requires a call to funId�+1 within the body of funId�. |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| •	A cflow expression controlflowstarJP( f unId, c), where |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| −−−−→ |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| f Inu d = [funId1, .., funIda] is a partial stack of function |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| names, and c (either a function call or an access to a global |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| variable) occurs within the control flow of function funId�. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Such a join point requires a call to funId�+1 within the |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| control flow of (i.e., not necessarily in the body of) funId�. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Two features of this join point model may be surprising |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| at first sight: distinction of accesses to aliases from those to |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| global variables and explicit representation of control flow |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 30 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| require Number Of Fd as int*; |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| require Squid MaxFd as int*; |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| controlflow(call(void clientSendMoreData(void*, char*, size t)), |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| call(HttpReply * clientBuildReply(clientHttpRequest*, char*, size t)) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| &amp;&amp; args( request, buffer, buffer Size )) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| then startPrefetching(request, buffer, bufferSize); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| &amp;&amp; until(writeGlobal(int * Number Of Fd) &amp;&amp; if((*Number Of Fd) * 100/(*Squid MaxFd) ≥ 75) ; ) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| controlflow( call(void clientSendMoreData(void*, char*, size t)), |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| call(void comm write mbuf(int, MemBuf, void*, void*)) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| &amp;&amp; args(fd, mb, handler, handlerData) &amp;&amp; if (! isPre f etch(handler)) ) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| then parseHyperlinks(fd, mb, handler, handlerData); |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| call(void clientWriteComplete(int, char*, size t, int, void*)) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| &amp;&amp; args(fd, buf, size, error, data) &amp;&amp; if(! isPre f etch(handler)) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| then retrieveHyperlinks(fd, buf, size, error, data); |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figureCaption ||| Figure 4: An Aspect for Prefetching |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| expressions. Both are motivated by our quest for efficiency |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| and are grounded in strong implementation constraints in |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the context of dynamic weaving of binary C code: an access |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to a local alias is several magnitudes slower than that to a |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| global variable and matching of control flow join points can |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| be done using an atomic test on the implementation level. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 3.3 Pointcuts |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| We now present a pointcut language (see Fig. 6) that pro- |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| vides constructs to match individual join points. |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Primitive pointcuts are defined by PPrim and comprise |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| three basic pointcuts matching calls, global variable accesses, |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and control flow join points. Primitive pointcuts can also be |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| combined using a logical “or” noted I I. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A call pointcut PCall selects all function call join points |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| −→ |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| callJP(val funId(val)), i.e., all calls to a function matching |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| the signature type funId(t pe), where the arguments of the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| function can be bound to pointcut variables using argument |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| binder args( −−−−−→ |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pattern ) and the return value can be bound to |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
bodyText ||| a pointcut variable using a return clause return( pattern ). |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
bodyText ||| The two constructs args( −−−−−→ |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
bodyText ||| pattern ) and return( pattern ) |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
bodyText ||| can also provide pattern matching by using values (or al- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
bodyText ||| ready bound pointcut variables) in pattern. Pointcuts can |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
bodyText ||| also depend on a boolean condition using the if-constructor. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
bodyText ||| A global access pointcut PAccGlobal selects either all read |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| join points readGlobalJP(varId, val) or all write join points |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| writ eGlobalJP(varId, val, size) on the global base program |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| variable varId. In these cases, the read or written value can |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| be bound to a variable using value(pattern); in addition, the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| size of the written value can be bound with size(varName). |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Pattern matching can also be used for variable access. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A control flow pointcut PCf of the form controlflow( |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| PCallSig1,..., PCallSign, PCfEnd) matches all join points |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of the form controlflowJP(funId1, ..., funIdn, cfEnd), where |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the function identifier in PCallSigi is funIdi. Similarly, a |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| control flow pointcut may match a global variable access |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| for a given stack configuration. The pointcuts of the form |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| controlflowstar(... ) select calls or global variable accesses |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in a stack context allowing for calls that are not directly |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| nested within one another. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Finally, PAcc, an access pointcut for a global variable or |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| all of its local aliases, matches all join points of the form |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| readJP or writeJP. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| Asp::= AspPrim [ &amp;&amp; until( AspPrim) ] |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| IAspSeq [ &amp;&amp; until( AspPrim ) ] |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| AspPrim::= PPrim Advice |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| AspSeq::= seq( AspPrim |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| AspSeqElts |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| AspSeqElt ) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| AspSeqElts ::_ [AspSeqElts] AspSeqElt [ * ] |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| AspSeqElt::= AspPrim |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| IPAcc Advice |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| I(AspSeqElt II AspSeqElt) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| Advice::= [ then funId(pat�) ] ; |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figureCaption ||| Figure 7: Aspect language |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 3.4 Aspect Language |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| The aspect language we propose is defined in Fig. 7. As- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| pects Asp are either primitive AspPrim, or sequences of |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| primitive aspects AspSeq. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A primitive aspect AspPrim combines a primitive point- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| cut with an advice that will be applied to all join points |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| selected by the pointcut. If the primitive pointcut has the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| form p1 II p2, then all variables used in the advice have to |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| be bound in both, p1 and p2. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| An advice (Advice) is a C function call that replaces a join |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| point in the base program execution (similarly to around in |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| AspectJ). It must have the same return type as the join |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| point it replaces: the type of the global variable in case of a |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| read access, void for a write access and the return type of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the function for a call. When the advice is empty (no then |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| clause), the original join point is executed. The original join |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| point can be skipped by calling an empty C function. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A sequence aspect is composed of a sequence of primitive |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| aspects. A sequence starts when the first primitive aspect |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| matches. Then the second primitive aspect becomes active |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| instead of the first one. When it matches, the third aspect |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| becomes active instead of the second one. And so on, until |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the last primitive aspect in the sequence. All but the first |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and last primitive aspects can be repeated zero or multiple |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| times by using *: in this case, the primitive aspect is ac- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 31 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| PPrim	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| PCall	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| PCallSig	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| PIf	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| PAccGlobal	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| PCf	::= |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| 1controlflowstar( PCallSigList, PCfEnd ) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| PCallSigList ::= PCallSig [ , PCallSigList] |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| PCall 1 PAccGlobal |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| PCall |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1PAccGlobal |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| 1PCf |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| 1PPrim11 PPrim |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_body
figure ||| ::= |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| PCallSig [ &amp;&amp; args(−−−−−→ |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| pattern) ] [ &amp;&amp; return( pattern) ] [ &amp;&amp; PIf ] |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| call( type funId(t pe) ) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| if( expr ) [ &amp;&amp; PIf ] |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| readGlobal( type varId) [ &amp;&amp; value( pattern) ] [ &amp;&amp; PIf ] |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1writeGlobal( type varId) [ &amp;&amp; value( pattern) ] [ &amp;&amp; size( pattern) ] [ &amp;&amp; PIf ] |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| ::= |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| ::= |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| ::= |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| ::= |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| controlflow( PCallSigList, PCfEnd ) |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| PCf End	::= |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| PAcc	 |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| pattern	::= |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| var 1 val |XML| xmlLoc_2 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| read( var ) [ &amp;&amp; value(pattern ) ] [ &amp;&amp; PIf ] |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1write( var ) [ &amp;&amp; value( pattern ) ] [ &amp;&amp; size( pattern) ] [ &amp;&amp; PIf ] |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| ::= |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figureCaption ||| Figure 6: Pointcut language |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| A::= A&apos; |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 1A 11 A	; parallelism |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| A&apos;::= µa.A&apos;	; recursive definition (a E Rec) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 1C D I; A	; prefixing |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1C D I; a	; end of sequence (a E Rec) |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1C D I; STOP ; halting aspect |XML| xmlLoc_4 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| 1A&apos; ❑ A&apos;	; choice |XML| xmlLoc_4 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figureCaption ||| Figure 8: Tiny aspect language |XML| xmlLoc_4 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| tive as long as the following one in the sequence does not |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| match. Branching, i.e., a logical ‘or’ between two primitive |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspects, can be introduced in a sequence by the operator 11. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| An element of the sequence can also match a global vari- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| able of the base program and accesses to its local aliases, as |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| soon as its address is known (i.e., a previous primitive point- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cut has already bound its address to a pointcut variable). |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Hence, an aspect matching accesses cannot start a sequence. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Every join point matching the first primitive pointcut of a |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sequence starts a new instance of the sequence. The different |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| instances are matched in parallel. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A primitive or a sequence aspect a can be used in combi- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| nation with an expression until (a1 ), to restrict its scope. In |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| this case, once a join point has been matched by a, the execu- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion of a proceeds as previously described until a1 matches. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| To conclude the presentation of our language, note that it |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| does not include some features, such as named pointcuts as |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| arguments to controlf lows and conjunctive terms, which |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| are not necessary for the examples we considered but which |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| could easily be added. (As an aside, note that such exten- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sions of the pointcut language may affect the computability |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of advanced algorithmic problems, such as whether a point- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cut matches some part of any base program [25].) |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 3.5 Towards a formal semantics for expressive |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-1 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
subsectionHeader ||| aspects |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_largest-1 xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In the previous sections, we have given an informal se- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| mantics of our aspect language. We now illustrate how the |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspect language could be formally defined by translating one |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of the example aspects into formal aspect language by ex- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tension of that used in the formal framework of [14]. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The original formal language must be extended in order to |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| deal with halting aspects, an unbounded number of sequen- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tial aspects and arbitrary join point predicates. The gram- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mar of the extension, our tiny aspect language, is defined in |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Figure 8. In this language, aspect expressions A consists of |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| parallel combinations of aspects, C is a join point predicate |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| (similar to our pointcut language) expressed as a conjunc- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion of a term pattern and possibly an expression from the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| constraint logic programming language CLP(R) [20]. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| An aspect A&apos; is either: |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| •	A recursive definition. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| •	A sequence formed using the prefix operation C D I; X, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| where X is an aspect or a recursion variable and I a piece |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| of code (i.e., an advice). |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	A choice construction A1 ❑ A2 which chooses the first |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| aspect that matches a join point (the other is thrown away). |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| If both match the same join point, A1 is chosen. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	A parallel composition of two aspects A1 11 A2 that |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
listItem ||| cannot occur in choice construction. |XML| xmlLoc_6 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
listItem ||| •	A halting aspect STOP. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| The semantics of the protocol translation aspect (from |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| TCP to UDP) is given in Fig. 9. A sequence can have sev- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| eral instances. This is translated into the language A by the |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| expression a1 11 ... which starts a new sequence a1 once |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the first join point has been matched and continue to match |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the rest of the sequence in progress. The repetition oper- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ator ∗ is translated into recursion on variable the a2. The |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| branching operator 11 is translated into the choice operator |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 32 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| µa1. callJP(fd socket(AF INET,  SOCK  STREAM, 0)) D socket(AF INET, SOCK DGRAM, 0); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| a1 ( callJP(a connect(fd, address, length)) D returnZero(); |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| µa2. callJP(b close(fd)) D skip; STOP  |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| ❑	callJP(c read(fd, readBuffer, readLength)) D recvfrom(fd, readBuffer, readLength, 0, address, length); a2 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| ❑	callJP(d write(fd, writeBuffer, writeLength)) D recvfrom(fd, writeBuffer, writeLength, 0, address, length); a2 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_body
figureCaption ||| Figure 9: Definition of the protocol translation using the tiny aspect language |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ❑. Finally, the last primitive aspect of the sequence occurs |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| as the first aspect of a choice to get priority over the join |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| points read and write because of the *. Note that we use |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pattern matching in A and that an overbar marks the first |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| occurrence of a variable (i.e., its definition not a use). |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Note that formal definitions such as that of the protocol |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| translation aspect precisely define several important issues, |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in particular, when new instances of the sequence aspect are |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| created, and disambiguate of potentially non-deterministic |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| situations, e.g., when two pointcuts of consecutive primitive |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspects in the sequence match at the same time. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
sectionHeader ||| 4. DYNAMIC WEAVING WITH ARACHNE |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Arachne is built around two tools, an aspect compiler and |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| a runtime weaver. The aspect compiler translates the aspect |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| source code into a compiled library that, at weaving time, di- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| rects the weaver to place the hooks in the base program. The |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| hooking mechanisms used in Arachne are based on improved |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| techniques originally developed for µDyner [32]. These tech- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| niques allow to rewrite the binary code of executable files |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| on the fly i.e.without pausing the base program, as long |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| as these files conform to the mapping defined by the Unix |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| standard [35] between the C language and x86 assembly lan- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| guage. Arachne’s implementation is structured as an open |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| framework that allows to experiment with new kinds of join |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| points and pointcut constructs. Another important differ- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ence between Arachne and µDyner is, that µDyner requires |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a compile time preparation of the base program, whereas |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Arachne does not. Hence Arachne is totally transparent for |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the base program while µDyner is not. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 4.1 The Arachne Open Architecture |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| The Arachne open architecture is structured around three |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| main entities: the aspect compiler, the instrumentation ker- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| nel, and the different rewriting strategies. The aspect com- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| piler translates the aspect source code into C before com- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| piling it. Weaving is accomplished through a command line |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tool weave that acts as a front end for the instrumentation |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| kernel. weave relays weaving requests to the instrumen- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tation kernel loaded in the address space of the program |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| through Unix sockets. Upon reception of a weaving request, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the instrumentation kernel selects the appropriate rewriting |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| strategies referred by the aspects to be woven and instru- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ments the base program accordingly. The rewriting strat- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| egy consults the pointcut analysis performed by the aspect |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| compiler to locate the places where the binary code of the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| base program needs to be rewritten. It finally modifies the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| binary code to actually tie the aspects to the base program. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| With this approach, the Arachne core is independent of |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| a particular aspect, of the aspect language, of the particu- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| lar processor architecture, and of a particular base program. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In fact, all dependencies to aspect language implementation |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| are limited to the aspect compiler. All dependencies to the |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| operating system are localized in the instrumentation ker- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| nel and finally all dependencies to the underlying hardware |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| architecture are modularized in the rewriting strategies. |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
subsubsectionHeader ||| 4.1.1 The Arachne aspect compilation process |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| The aspect compilation scheme is relatively straightfor- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ward: it transforms advices into regular C functions. Point- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cuts are rewritten as C code driving hook insertions into |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the base program at weaving time. There are however cases |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| where the sole introduction of hooks is insufficient to deter- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mine whether an advice should be executed. In this case, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the aspect compiler generates functions that complement |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the hooks with dynamic tests on the state of the base pro- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| gram. These dynamic tests are called residues in AspectJ |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and the rewritten instructions within the base program the |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| shadow [16]. Once the aspects have been translated into C, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the Arachne compiler uses a legacy C compiler to generate a |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| dynamically linked library (DLL) for the compiled aspects. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsubsectionHeader ||| 4.1.2 The Arachne weaving process |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| From a user viewpoint, the Arachne weave and deweave |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| command line programs the same syntax than µDyner’s ver- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sion. They both take two arguments. The first identifies the |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| process to weave aspects in or deweave aspects from, and |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the second indicates the aspect DLL. However, Arachne can |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| target potentially any C application running on the machine |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| while µDyner was limited to applications compiled with it |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| running on the machine. When Arachne’s weave receives a |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| request to weave an aspect in a process that does not con- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tain the Arachne instrumentation kernel, it loads the kernel |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in the process address space using standard techniques [11]. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The instrumentation kernel is transparent for the base |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| program as the latter cannot access the resources (mem- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ory and sockets essentially) used by the former. Once in- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| jected, the kernel creates a thread with the Linux system |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| call: clone. This thread handles the different weaving re- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| quests. Compared to the POSIX pthread create function, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the usage of clone allows the instrumentation thread to pre- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| vent the base program to access its sockets. The instrumen- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tation kernel allocates memory by using side effect free allo- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cation routines (through the Linux mmap API). Because the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| allocation routines are side effect free, Arachne’s memory is |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| totally invisible to the base program. It is up to the aspect |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to use Arachne’s memory allocation routines or base pro- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| gram specific allocation functions. This transparency turns |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| out to be crucial in our experiments. Legacy applications |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| such as Squid use dedicated resource management routines |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and expect any piece of code they run to use these routines. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Failures will result in an application crash. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| After loading an aspect, the instrumentation kernel rewrites |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| the binary code of the base program. These rewriting strate- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| gies are not included in the kernel and must be fetched on |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| demand by each loaded aspect. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 4.2 Rewriting strategies |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Rewriting strategies are responsible for transforming the |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| binary code of the base program to effectively tie aspects to |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 33 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figureCaption ||| Figure 10: Generic hook operations. |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| the base program at weaving time. These strategies localize |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Arachne’s main dependencies to the underlying hardware |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| architecture. In general, rewriting strategies need to col- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| lect information about the base program. These information |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| typically consist of the addresses of the different shadows, |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| their size, the symbol (i.e.function or global variable name) |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| they manipulate, their length etc. In order to keep compiled |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspects independent from the base program, this informa- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion is gathered on demand at runtime. The mapping be- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tween a symbol name in the base program source code and |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| its address in memory is inferred from linking information |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| contained in the base program executable. However because |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| these information can be costly to retrieve, Arachne collects |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and stores it into meta-information DLLs. these DLLs be- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| have as a kind of cache and lessen the problem of collecting |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the information required to instrument the base program. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| To implement our aspect language, Arachne provides a set |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of eight rewriting strategies that might eventually use each |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| other. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsubsectionHeader ||| 4.2.1 Strategiesfor call, readGlobal and writeGlobal |XML| xmlLoc_4 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| In Arachne, call, readGlobal and writeGlobal allow an |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| advice to be triggered upon a function call, a read on a |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| global variable or a write respectively. While the implemen- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tation of readGlobal and writeGlobal in Arachne is close |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to the one in µDyner, Arachne implements the strategy for |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| call by rewriting function invocations found in the base |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| program. µDyner instead rewrites the function body of the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| callee. On the Intel architecture, function calls benefit from |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the direct mapping to the x86 call assembly instruction |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| that is used by almost, if not all, compilers. Write and read |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| accesses to global variables are translated into instructions |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| using immediate, hard coded addresses within the binary |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| code of the base program. By comparing these addresses |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| with linking information contained in the base program ex- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ecutable, Arachne can determine where the global variable |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| is being accessed. Therefore those primitive pointcuts do |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| not involve any dynamic tests. The sole rewriting of the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| binary base program code is enough to trigger advice and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| residue1 executions at all appropriate points. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| The size of the x86 call instruction and the size of an x86 |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| jump (jmp) instruction are the same. Since the instruction |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| performing an access to a global variable involves a hard |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| coded address, x86 instructions that read or write a global |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| 1Residues (i.e. dynamic tests on the base program state) are |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
footnote ||| required when these primitive pointcuts are combined with |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| conditional pointcuts or when pattern matching is involved. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| variable have at least the size of a x86 jmp instruction. Hence |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| at weaving time, Arachne rewrites them as a jmp instruction |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to a hook. Hooks are generated on the fly on freshly allo- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cated memory. As shown in figure 10, hooks contain a few |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| assembly instructions that save and restore the appropriate |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| registers before and after an advice (or shadow) execution. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A generic approach is to have hooks save the whole set of |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| registers, then execute the appropriate residue and/or ad- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| vice code before restoring the whole set of registers; finally |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the instructions found at the join point shadow are executed |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to perform the appropriate side effects on the processor reg- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| isters. This is accomplished by relocating the instructions |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| found at the join point shadow. Relocating the instructions |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| makes the rewriting strategies handling read and write ac- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cess to global variable independent from the instruction gen- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| erated by the compiler to perform the access 2. The limited |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| number of x86 instructions used to invoke a function allows |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Arachne’s rewriting strategy to exploit more efficient, relo- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cation free, hooks. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsubsectionHeader ||| 4.2.2 Strategiesfor controlf low and controlflowstar |XML| xmlLoc_2 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Every time a C function is called, the Linux runtime |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| creates an activation record on the call stack [35]. Like |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| µDyner, Arachne’s implementation of the rewriting strat- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| egy for controlf low uses the most deeply nested function |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| call (or global read or write access) in the control flow point- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cut as shadow. This shadow triggers a residue. This residue |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| uses the activation record’s chaining to check whether the |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| remaining function calls of the control flow, are on the call |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| stack maintained by the Linux runtime. An appropriate |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| usage of hashtables that store the linking information con- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tained in the base program executables can thereby de- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| crease the cost of determining if a specific function is the |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| caller of another to a pointer comparison. Therefore, the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| residue for a controlf low with n directly nested functions |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| implies exactly n pointer comparisons. However, the residue |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| worst case runtime for the indirect control flow operator |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| controlflowstar that allows for not directly nested func- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions, is proportional to the base program stack depth. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsubsectionHeader ||| 4.2.3 Strategiesfor read and write |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| read and write are new join points not included in µDyner |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| that have been added to the latest version of Arachne. Their |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| implementation relays on a page memory protection as al- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| lowed by the Linux operating system interface (i.e. mprotect) |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and the Intel processor specifications [18]. A read or write |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pointcut triggers a residue to relocate the bound variable |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| into a memory page that the base program is not allowed |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to access and adds a dedicated signal handler. Any attempt |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| made by the base program to access the bound variable iden- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tified will then trigger the execution of the previously added |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| signal handler. This handler will then inspect the binary |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| instruction trying to access the protected page to determine |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| whether it was a read or a write access before eventually |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| executing the appropriate advice. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsubsectionHeader ||| 4.2.4 Strategiesfor seq |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Like read and write, seq is a new language feature of |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Arachne. µDyner offers no equivalent construct. Arachne’s |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| rewriting strategy of this operator associates a linked list to |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| 2About 250 x86 instruction mnemonics can directly manip- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
footnote ||| ulate a global variable. This corresponds to more than one |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| thousand opcodes. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| execution flow |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Legacy base program |XML| xmlLoc_1 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| shadow: rewriting |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| site replaced by a |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| jump |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_yes xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| B���piled baof sethe |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| program |XML| xmlLoc_1 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| x86 instruction |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| x86 instruction |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| x86 instruction |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| x86 instruction |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Relocated tailored |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| ���tructio�� |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| up���ng re���ters |XML| xmlLoc_0 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| Hooks generated at weavingAspect DLL |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| time	generated at aspect compile time |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
figure ||| Entry hook |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| save registers |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| Return hook |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Restore registers |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
figure ||| Residue (dynamic tests) |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| and/or advices |XML| xmlLoc_0 xmlAlign_centered xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 34 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| every stage inside the sequence except the last one. Each |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| stage in a sequence triggers a residue that updates these |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| linked lists to reflect state transitions of currently match- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ing execution flows. Upon matching of the first pointcut |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of the first primitive aspect in the seq, a node is allocated |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and added to the associated linked list. This node con- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tains a structure holding variables shared among the dif- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ferent pointcuts within the sequence. Once a join point |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| matches a pointcut of an primitive aspect denoting a stage |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| in the sequence, Arachne consults every node in the linked |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| list associated with the previous stage and executes the cor- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| responding advice 3. Arachne eventually updates the node |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and in the absence of a * moves it to the list associated |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| with the currently matched pointcut.If the matching point- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cut corresponds to the end of the sequence, structures are |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| not moved into another list but freed. Our aspect compiler |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| includes an optimization where structures are allocated from |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a resizable pool and upon a sequence termination, structures |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| are not freed but returned to the pool. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 4.3 Arachne limitations |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Aggressive optimizations of the base program might pre- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| vent Arachne to seamlessly weave aspects. Two optimiza- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions are not yet supported by Arachne. First if the compiler |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| inlines a function in another one within the binary code of |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the base program, the Arachne weaver will fail to properly |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| handle pointcuts referring to that function. Second, con- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| trol flow pointcuts are based on the chaining of activation |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| records. On the x86 architecture, in leaf functions, opti- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mizing compilers sometimes do not maintain this chaining |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to free one register for the rest of the computation. This |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| however has not been a problem during our experiments |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| as we used the open source C compiler gcc. Arachne sup- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ports two of the three optimization levels proposed by gcc. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Stripping that removes linking information and aggressive |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| optimizations that break the interoperability between com- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pilers and/or debuggers are incompatible with Arachne. In |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| practice, Arachne can be used on applications compiled like |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| squid with two of the three gcc optimization level. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
sectionHeader ||| 5. PERFORMANCE EVALUATION |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Aspect-oriented solutions will be used if the aspect sys- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| tem’s language is expressive enough and if the aspect system |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| overhead is low enough, for the task at hand. The purpose |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of this section is to study Arachne’s performance. We first |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| present the speed of each Arachne language construct and |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| compare it to similar C language constructs. We then study |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the overhead of extending Squid with a prefetching policy. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| This case study shows that even if the cost of some Arachne |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspect language constructs might be high compared to C |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| language constructs, this overhead is largely amortized in |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| real applications. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 5.1 Evaluation of the language constructs |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
subsectionHeader ||| This performance evaluation focuses on studying the cost |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
subsectionHeader ||| of each construct of our aspect language. To estimate the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| cost for each construct of our aspect language, we wrote an |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| aspect using this construct that behaves as an interpreter of |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| 3In case the previous stage pointcut was used with a star |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
footnote ||| *, Arachne examines nodes from linked list associated with |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| the last two previous stages, and so on, until a not starred |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
footnote ||| primitive aspect in the sequence is reached. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Execution times (cycles) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_body
table ||| call	Arachne	Native	Ratio |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
table ||| 	28±2.3%	21±1.9%	1.3 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| seq	201±0.5%	63±1.7%	3.2 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| cflow	228±1.6%	42±1.8%	5.4 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| readGlobal	2762±4.3%	1±0.2%	2762 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| read	9729±4.9%	1±0.6%	9729 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
tableCaption ||| Table 1: Speed of each language construct used to |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
tableCaption ||| interpret the base program compared to a native |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
tableCaption ||| execution. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the base program. For example, to study the performance |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| of readGlobal, we wrote an aspect whose action returns the |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| value of the global variable referred in the pointcut, i.e., we |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| wrote aspects behaving like the base program. For each of |XML| xmlLoc_1 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| these aspects, we compare the time required to perform the |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| operation matching the pointcut, in case the operation is |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| interpreted by the woven aspect with the time required to |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| carry out the operation natively (without the woven aspect). |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| For example, to study the performance of readGlobal, we |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| first evaluate the time needed to retrieve the global variable |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| value through the code generated by the C compiler gcc |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| without any aspect woven and compare this value to the |XML| xmlLoc_2 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| time needed to retrieve the global variable value through |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the aspect once it has been woven in the base program. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| We express our measurements as a ratio between these two |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| durations to abstract from the experimentation platform. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| This approach requires the ability to measure short peri- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ods of time. For instance, a global variable value is usually |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| retrieved (readGlobal in our aspect language) in a single |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| clock tick. Since standard time measurement APIs were |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| not precise enough, our benchmarking infrastructure relies |XML| xmlLoc_3 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| on the rdtsc assembly instruction [18]. This instruction re- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| turns the number of clock cycles elapsed since power up. The |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Pentium 4 processor has the ability to dynamically reorder |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the instructions it executes. To ensure the validity of our |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| measurement, we thus insert mfence instructions in the gen- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| erated code whose execution speed is being measured. An |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| mfence forces the preceding instructions to be fully executed |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| before going on. The pipeline mechanism in the Pentium 4 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| processor entails that the speed of a piece of assembly code |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| depends from the preceding instructions. To avoid such hid- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| den dependencies, we place the operation whose execution |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| time is being measured in a loop. We use gcc to unroll the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| loop at compile time and we measure the time to execute |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the complete loop. This measure divided by the number of |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| loop repetitions yields an estimation of the time required |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to execute the operation. The number of times the loop is |XML| xmlLoc_5 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| executed is chosen after the relative variations of the mea- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sures ,i.e., we increased the number of repetitions until ten |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| runs yields an average relative variation not exceeding 5%. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| To check the correctness of our experimental protocol, we |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| measured the time needed to execute a nop assembly in- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| struction, that requires one processor cycle according to the |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Intel specification. The measures of nop presented a relative |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| variation of 1.6%. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Table 1 summarizes our experimental results. Using the |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| aspect language to replace a function that returns immedi- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ately is only 1.3 times slower than a direct, aspect-less, call |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to that empty function. Since the aspect compiler packages |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| advices as regular C functions, and because a call pointcut |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| involves no residue, this good result is not surprising. When |XML| xmlLoc_7 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
page ||| 35 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figureCaption ||| Figure 11: controlflow, seq, and read performances |XML| xmlLoc_1 xmlAlign_right xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| an access to a global variable is replaced by an advice exe- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| cution, the hooks generated by the rewriting strategy need |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to prepare the processor to call the advice function. This |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| increases the time spent in the hooks. In addition, while |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| an access to a global variable is often performed by a sin- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| gle x86 instruction, an empty function is often composed |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of four instructions. Hence the relative cost of an aspect |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| triggered upon a global variable access and a direct, aspect- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| less, access to a global variable is slightly higher than the |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| corresponding ratio for functions. A seq of three invoca- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tions of empty functions is only 3.2 time slower than the |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| direct, aspect-less, three successive functions calls. Com- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pared to the pointcuts used to delimit the different stages, |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the seq overhead is limited to a few pointer exchanges be- |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tween the linked lists holding the bound variable. On Intel |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| x86, global variable accesses benefit from excellent hardware |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| support. In the absence of aspects, a direct global variable |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| read is usually carried out in a single unique cycle. To trig- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ger the advice execution, the Arachne runtime has to save |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and restore the processor state to ensure the execution co- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| herency, as advices are packaged as regular C functions (see |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| also 4.2.1). It is therefore not surprising that a global vari- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| able readGlobal appears as being 2762 times slower than |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a direct, aspect-less global variable read. read performance |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| can be accounted in the same way: in the absence of aspect, |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| local variables are accessed in a single unique cycle. The |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| signal mechanism used in the read requires that the oper- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ating system detects the base program attempt to read into |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| a protected memory page before locating and triggering the |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| signal handler set up by Arachne, as shown in 4.2.3. Such |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| switches to and from kernel space remain slow. Using read |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to read a local variable is 9729 times slower than retrieving |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the local variable value directly, without aspects. |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| seq and controlf low can refer to several points in the exe- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| cution of the base program (i.e. different stages for seq and |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| different function invocations for the controlflow). The |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| runtime of these pointcuts grows linearly with the number |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of execution points they refer to and with the number of |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| matching instances. Figure 11 summarizes a few experimen- |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tal results for controlf low and seq proving these points. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
subsectionHeader ||| 5.2 Case Study on a real application |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Since, depending on the aspect construct used, interpret- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ing the base program with aspects can slow it down by a fac- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tor ranging between 1.3 and 9729, we studied Arachne’s per- |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| formance on a real world application, the Web cache Squid. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	Arachne	Manual	Diff |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
table ||| 			(%) |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	Top1	Top1	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	Top2	Top2	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Throughput	5.59	5.59	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| (request/s)	5.58	5.59	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Response Time (ms)	1131.42	1146.07	1.2–-1 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	1085.31	1074.55	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Miss response time (ms)	2533.50	2539.52	0.2– 1.8 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	2528.35	2525.34	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Hit response time (ms)	28.96	28.76	-0.6 – 3.8 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	30.62	31.84	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Hit ratio	59.76	59.35	-0.6 – 0.7 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	61.77	62.22	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| Errors	0.51	0.50	-1.9–0 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
table ||| 	0.34	0.34	 |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_yes xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
tableCaption ||| Table 2: Performances comparison between manual |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
tableCaption ||| modification and Arachne, for prefechting policy in- |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
tableCaption ||| tegration in Squid |XML| xmlLoc_1 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| We extended Squid with a prefetching policy [9]. As de- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| scribed in section 3.1, we implemented this policy as a set |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of aspects and made a second implementation of this policy |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| by editing the Squid source code and recompiling it. This |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| section compares the performance of these two implemen- |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tations using standard Web cache performance indicators: |XML| xmlLoc_2 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| throughput, response time and hit ratio. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Obtaining access traces adequate to study a Web cache |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| performance is difficult. The trace must be long enough to |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| fill the cache. Due to privacy issues, traces are usually not |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| publicly available. Since traces do not include the content of |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the accessed pages, these pages must be downloaded again. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| In the meantime the page contents may have changed and |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| even the URLs may have disappeared. |XML| xmlLoc_3 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Instead of traces, we based our evaluation on Web Poly- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| graph [30]. Polygraph is a benchmarking tool developed by |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the Squid team and featuring a realistic HTTP and SSL |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| traffic generator and a flexible content simulator. |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| We filled up the cache and simulated a one day workload |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| with its two request rate peaks observed in real life environ- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ments [30]. Table 2 shows results of our simulation. Mea- |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sures have been made during the two request peaks. The |XML| xmlLoc_4 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| hit time and the miss time, time needed to deliver a docu- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ment present, respectively not present, in the cache are very |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| similar. It shows that differences are imperceptible between |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the version of Squid extended by Arachne and the one ex- |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tended manually (less than 1%). Hence, even if the cost |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| of Arachne’s aspect language constructs might seem high, |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| they are largely amortized in real applications. To give a |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| typical example observed on our experimental platform: in |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| case of a cache hit, a 3.8 MB page was retrieved in a single |XML| xmlLoc_5 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| second, the time spent in prefetching advices amounted to |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| 1801 µsec, and the time spent within Arachne to execute the |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| hooks and dynamic tests to 0.45 µsec. In a miss case, on |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the average, a client retrieved the same page in 1.3 seconds, |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| 16679 µsec were spent in the advices and 0.67 µsec within |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Arachne itself. |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
sectionHeader ||| 6. RELATED WORK |XML| xmlLoc_6 xmlAlign_justified xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Our work is directly related to other aspect weavers for |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| C, approaches for expressive aspect languages, and dynamic |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| weaving, in particular for C. In this section, we consider |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| related work in each of these fields in turn. |XML| xmlLoc_7 xmlAlign_justified xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Apart from µDyner and Arachne, there are few aspect |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Sequence |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 1	2	3	4	5 |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 1	2	3	4	5 |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Number of imbricated calls	Number of matching instances |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_smaller xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| Controlflow |XML| xmlLoc_1 xmlAlign_left xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_yes xmlItalic_yes xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 10 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 3000 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 2000 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 30 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 20 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 5 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 1000 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
figure ||| 10 |XML| xmlLoc_0 xmlAlign_none xmlFontFace_different xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
page ||| 36 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| weavers for C (or even C like languages); some notewor- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| thy exceptions are AspectC [12] (no available implementa- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion), AspectC++ and [33]. All of these rely on source-code |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| transformation and thus cannot apply aspects to running |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| C applications as required by the applications we consider. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| Furthermore, none of these systems provides explicit sup- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| port for aspects over join point sequences. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| There is quite a large body of work now on the notion of |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| expressive aspect languages where “more expressive” typi- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| cally compares to w.r.t. AspectJ’s pointcut and advice mod- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| els. Our work has been inspired by Event-based AOP [15], |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| which aims at the definition of pointcuts in terms of arbi- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| trary relations between events. Nevertheless, many other |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| approaches to expressive aspect languages exist: e.g., data- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| flow relations [26], logic programming [13], process algebras |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| [3], graphs [5], and temporal logics [1], have all been pro- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| posed as a basis for the definition of expressive aspect lan- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| guages. However, few of these encompass dynamic weaving |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| and only the latter has been applied to C code under effi- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ciency considerations similar to our setting. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Dynamic weaving is commonly realized in Java through |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| preprocessing at load-time like [8] or through the JVM De- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| bugging Interface [28]. These tools rely on bytecode rewrit- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ing techniques, have typically limited expressivity (some do |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| not support field accesses) and incur a huge performance |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| overhead. Dynamic weaving through modification at run- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| time is found infrequently for compiled languages. An ex- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ception for Java is JasCo [21] whose most recent version (0.7) |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| supports dynamic weaving through the new instrumentation |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| API of Java 5. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Many instrumentation techniques have been proposed to |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| rewrite binary code on the fly. In these approaches, dif- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ficulty issues range from the complexity to rewrite binary |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| code to the lack of a well-defined relationship between source |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| code and the compiler generated binary code. Hence many |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| approaches work on an intermediate representation of the |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| binary code and source language [34]. Producing this repre- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| sentation first and then regenerating the appropriate binary |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| executable code has proven to be costly both in terms of |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| memory consumption and in CPU time. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| A few other approaches have considered a direct rewrit- |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ing of the binary code at runtime. Dyninst [17] and dynamic |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| probes [27] allow programmers to modify any binary instruc- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion belonging to an executable. Dyninst however relies on |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the Unix debugging API: ptrace. ptrace allows a third |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| party process to read and write the base program memory. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| It is however highly inefficient: before using ptrace, the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| third party process has to suspend the execution of the base |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| program and resume its execution afterwards. In compari- |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| son, Arachne uses ptrace at most once, to inject its kernel |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| DLL into the base program process. In addition, Dyninst |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| does not free the programmer from dealing with low level |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| details. For example, it seems difficult to trigger an advice |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| execution upon a variable access with Dyninst: the transla- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| tion from the variable identifier to an effective address is left |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to the user. Worse, Dyninst does not grant that the manip- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| ulation of the binary instructions it performs will succeed. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Dyninst uses an instrumentation strategy where several ad- |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| jacent instructions are relocated. This is unsafe as one of |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the relocated instructions can be the target of branching |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| instructions. In comparison, Arachne join point model has |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| been carefully chosen to avoid these kind of issues; if an as- |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pect can be compiled with Arachne, it can always be woven. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| 7. CONCLUSION AND FUTURE WORK |XML| xmlLoc_0 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| In this paper we have discussed three different crosscut- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| ting concerns which are typical for C applications using OS- |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| level services and which frequently need to be applied at |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| runtime. We have motivated that such concerns can be ex- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pressed as aspects and have defined a suitable aspect lan- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| guage. This language is more expressive than those used in |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| other aspect weavers for C in that it provides support for |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| aspects defined over sequences of execution points as well as |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| for variable aliases. We have presented an integration of this |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| language into Arachne, a weaver for runtime weaving of as- |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pects in C applications. Finally, we have provided evidence |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| that the integration is efficient enough to apply such aspects |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| dynamically to high-performance applications, in particular |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| the web cache “squid.” |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| As future work, we intend to investigate the suitability of |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_body
bodyText ||| the proposed aspect language for other C-applications. We |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| also intend to investigate Arachne extension to the C++ |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| language. Indeed, object-oriented programming heavily uses |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| protocol-based interfaces collaboration (hence sequence as- |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pects). Along with its open architecture, extending Arachne |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| to support C++, will pave the way to a relatively language |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| independent aspect and weaving infrastructure. Finally, |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| Arachne’s toolbox should be extended with support for as- |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
bodyText ||| pect interactions (e.g., analyses and composition operators). |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_same xmlStructure_body
sectionHeader ||| 8. REFERENCES |XML| xmlLoc_3 xmlAlign_left xmlFontFace_different xmlFontFaceChange_yes xmlFontSize_largest-2 xmlFontSizeChange_bigger xmlBold_yes xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
reference ||| [1] R. A. ºAberg, J. L. Lawall, M. SÄudholt, G. Muller, and |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_yes xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_body
reference ||| A.-F. L. Meur. On the automatic evolution of an os |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| kernel using temporal logic and AOP. In Proceedings |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| of Automated Software Engineering (ASE’03), pages |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 196{204. IEEE, 2003. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [2] American National Standards Institute. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| ANSI/ISO/IEC 9899-1999: Programming Languages |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| — C. American National Standards Institute, 1430 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Broadway, New York, NY 10018, USA, 1999. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [3] J. H. Andrews. Process-algebraic foundations of |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| aspect-oriented programming. In Proceedings of the |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 3rd International Conference on Metalevel |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Architectures and Separation of Crosscutting |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Concerns, volume 2192 of LNCS. Springer Verlag, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Sept. 2001. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [4] M. Arlitt and T. Jin. A workload characterization |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| study of the 1998 world cup web site. IEEE Network, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 14(3):30{37, May 2000. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [5] U. ABmann and A. Ludwig. Aspect weaving by graph |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| rewriting. In U. W. Eisenecker and K. Czarnecki, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| editors, Generative Component-based Software |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Engineering (GCSE), Erfurt, Oct. 1999. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [6] CERT - Carnegie Mellon University. Vulnerability |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| note vu#613459, Feb. 2002. published on line: |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| http://www.kb.cert.org/vuls/id/613459. |XML| xmlLoc_6 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_larger xmlFontSizeChange_bigger xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| [7] H. Chen and P. Mohapatra. Catp: A context-aware |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_smaller xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| transportation protocol for http. In International |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Workshop on New Advances in Web Servers and |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Proxy Technologies Held with ICDCS, 2003. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| [8] S. Chiba and K. Nakagawa. Josh: An open |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| AspectJ-like language. In Proceedings of the third |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
page ||| 37 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| international conference on Aspect-oriented software |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| development, pages 102–111. ACM Press, Mar. 2004. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [9] K.-I. Chinen and S. Yamaguchi. An interactive |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| prefetching proxy server for improvement of WWW |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| latency. In Seventh Annual Conference of the Internet |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Society (INET’97), Kuala Lumpur, June 1997. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [10] I. Cidon, A. Gupta, R. Rom, and C. Schuba. Hybrid |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| tcp-udp transport for web traffic. In Proceedings of the |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 18th IEEE International Performance, Computing, |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| and Communications Conference (IPCCC’99), pages |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 177–184, Feb. 1990. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [11] S. Clowes. Injectso: Modifying and spying on running |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| processes under linux. In Black hat briefings, 2001. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [12] Y. Coady, G. Kiczales, M. Feeley, and G. Smolyn. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Using AspectC to improve the modularity of |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Path-Specific customization in operating system code. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| In V. Gruhn, editor, Proc. of the Joint 8th European |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Software Engeneering Conference and 9th ACM |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| SIGSOFT Symposium on the Foundation of Software |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Engeneering (ESEC/FSE-01), volume 26, 5 of |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| SOFTWARE ENGINEERING NOTES, pages 88–98, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| New York, Sept. 10–14 2001. ACM Press. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [13] K. de Volder. Aspect-oriented logic meta |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| programming. In P. Cointe, editor, Meta-Level |XML| xmlLoc_2 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Architectures and Reflection, 2nd International |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Conference on Reflection, volume 1616 of LNCS, |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| pages 250–272. Springer Verlag, 1999. |XML| xmlLoc_3 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [14] R. Douence, P. Fradet, and M. SÄudholt. A framework |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| for the detection and resolution of aspect interactions. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| In Proceedings of the ACM SIGPLAN/SIGSOFT |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Conference on Generative Programming and |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Component Engineering (GPCE’02), volume 2487 of |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| LLNCS, pages 173–188. Springer-Verlag, Oct. 2002. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [15] R. Douence, O. Motelet, and M. SÄudholt. A formal |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| definition of crosscuts. In Proceedings of the 3rd |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| International Conference on Metalevel Architectures |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| and Separation of Crosscutting Concerns, volume 2192 |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| of LNCS, pages 170–186. Springer Verlag, Sept. 2001. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [16] E. Hilsdale and J. Hugunin. Advice weaving in |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| aspectj. In Proceedings of the 3rd international |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| conference on Aspect-oriented software development, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| pages 26–35. ACM Press, 2004. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [17] J. K. Hollingsworth, B. P. Miller, M. J. R. Goncalves, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| O. Naim, Z. Xu, and L. Zheng. MDL: A language and |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| compiler for dynamic program instrumentation. In |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| IEEE Conference on Parallel Architectures and |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Compilation Techniques (PACT), pages 201–213, Nov. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 1997. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [18] Intel Corportation. IA-32 Intel Architecture Software |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Developer’s Manual. Intel Corportation, 2001. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [19] V. Issarny, M. Ban^atre, B. Charpiot, and J.-M. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Menaud. Quality of service and electronic newspaper: |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| The Etel solution. Lecture Notes in Computer Science, |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| 1752:472–496, 2000. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [20] J. Jaffar, S. Michaylov, P. J. Stuckey, and R. H. C. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Yap. The clp( r ) language and system. ACM Trans. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Program. Lang. Syst., 14(3):339–395, 1992. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [21] JasCo home page. http://ssel.vub.ac.be/jasco/. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| [22] R. Jones and P. Kelly. Backwards-compatible bounds |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| checking for arrays and pointers in c programs. In |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| M. Kamkar, editor, Proceedings of the Third |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| International Workshop on Automatic Debugging, |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| volume 2, pages 13–26, May 1997. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| [23] A. D. Keromytis. ”Patch on Demand” Saves Even |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| More Time? IEEE Computer, 37(8):94–96, 2004. |XML| xmlLoc_0 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [24] G. Kiczales, J. Lamping, A. Menhdhekar, C. Maeda, |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| C. Lopes, J.-M. Loingtier, and J. Irwin. |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Aspect-oriented programming. In M. Ak»sit and |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| S. Matsuoka, editors, Proceedings European |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Conference on Object-Oriented Programming, volume |XML| xmlLoc_0 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| 1241, pages 220–242. JyvÄaskylÄa, Finland, June 1997. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [25] K. J. Lieberherr, J. Palm, and R. Sundaram. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| Expressiveness and complexity of crosscut languages. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Technical Report NU-CCIS-04-10, Northeastern |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| University, Sept. 2004. |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [26] H. Masuhara and K. Kawauchi. Dataflow pointcut in |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| aspect-oriented programming. In First Asian |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Symposium on Programming Languages and Systems |XML| xmlLoc_1 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| (APLAS’03), 2003. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [27] R. J. Moore. Dynamic probes and generalised kernel |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| hooks interface for Linux. In USENIX, editor, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Proceedings of the 4th Annual Linux Showcase and |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Conference, Atlanta, October 10–14, 2000, Atlanta, |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Georgia, USA, Berkeley, CA, USA, 2000. USENIX. |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [28] A. Popovici, G. Alonso, and T. Gross. Just-in-time |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| aspects: efficient dynamic weaving for Java. In |XML| xmlLoc_2 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Proceedings of the 2nd international conference on |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Aspect-oriented software development, pages 100–109, |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Boston, Massachusetts, Mar. 2003. ACM Press. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [29] M. Rabinovich and H. Wang. DHTTP: An efficient |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| and cache-friendly transfer protocol for web traffic. In |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| INFOCOM, pages 1597–1606, 2001. |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [30] A. Rousskov and D. Wessels. High-performance |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| benchmarking with Web Polygraph. Software Practice |XML| xmlLoc_3 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| and Experience, 34(2):187–211, Feb. 2004. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [31] O. Ruwase and M. S. Lam. A practical dynamic buffer |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| overflow detector. In Proceedings of the 11th Annual |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Network and Distributed System Security Symposium. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Internet Society, Feb. 2004. |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [32] M. S¶egura-Devillechaise, J.-M. Menaud, G. Muller, |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| and J. Lawall. Web cache prefetching as an aspect: |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Towards a dynamic-weaving based solution. In |XML| xmlLoc_4 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Proceedings of the 2nd international conference on |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Aspect-oriented software development, pages 110–119, |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Boston, MA, USA, Mar. 2003. ACM Press. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [33] O. Spinczyk, A. Gal, and W. Schroeder-Preikschat. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| AspectC++: an aspect-oriented extension to the C++ |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| programming language. In Proceedings of the Fortieth |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| International Conference on Tools Pacific, pages |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| 53–60. Australian Computer Society, Inc., 2002. |XML| xmlLoc_5 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| [34] A. Srivastava and A. Edwards. Vulcan: Binary |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| transformation in a distributed environment. Microsoft |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Research Tech. Rpt. MSR-TR-2001-50, 2001. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [35] U. S. L. System Unix. System V Application Binary |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Interface Intel 386 Architecture Processor Supplement. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| Prentice Hall Trade, 1994. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [36] D. Wessels. Squid: The Definitive Guide. O’Reilly and |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_new xmlStructure_reference
reference ||| Associates, Jan. 2004. |XML| xmlLoc_6 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_yes xmlIndent_no xmlPara_same xmlStructure_reference
reference ||| [37] J. Wilander and M. Kamkar. A comparison of publicly |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_new xmlStructure_reference
reference ||| available tools for dynamic buffer overflow prevention. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| In Proceedings of the 10th Network and Distributed |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_yes xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| System Security Symposium, pages 149–162, San |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_reference
reference ||| Diego, California, February 2003. |XML| xmlLoc_7 xmlAlign_none xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_no xmlCell_no xmlBullet_no xmlIndent_yes xmlPara_same xmlStructure_reference
page ||| 38 |XML| xmlLoc_7 xmlAlign_left xmlFontFace_common xmlFontFaceChange_no xmlFontSize_common xmlFontSizeChange_no xmlBold_no xmlItalic_no xmlDd_yes xmlCell_no xmlBullet_no xmlIndent_no xmlPara_new xmlStructure_reference
